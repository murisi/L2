(ignore Most macros that are about modifying control flow and their helper functions are here.)

(ignore This is false.)

(function false (l r) [=# #0 r])

(function true (l r) [=# #1 r])

(ignore
  The following macro iterates through its arguments in order and returns (true) upon
  encountering the first non-zero argument supplied to it. If all the arguments are zero,
  then it returns (false).)

(function or (l r)
  (loop prepend-or (l [meta:reverse l r]) (sexpr (`(false)r))
    (if [emt? l]
      sexpr
      {prepend-or [@rst l] (`(if (,[@fst l]) (true) (, sexpr r))r)})))

(ignore
  The following macro iterates through its arguments in order and returns (false) upon
  encountering the first zero argument supplied to it. If all the arguments are non-zero,
  then it returns (true).)

(function and (l r)
  (loop prepend-and (l [meta:reverse l r]) (sexpr (`(true)r))
    (if [emt? l]
      sexpr
      {prepend-and [@rst l] (`(if (,[@fst l]) (, sexpr r) (false))r)})))

(ignore
  The following macro returns (false) if the single argument supplied to it is non-zero.
  Otherwise it returns (true).)

(function not (l r) (`(if (,[@fst l]) (false) (true))r))

(ignore
  Reverses the given list. l is the list to be reversed. r is the region into which the
  reversed list will be put. Return value is the reversed list.)

(function meta:reverse (l r)
  (with return
    {(continuation _ (l reversed)
      (if [emt? l]
        {return reversed}
        {_ [@rst l] [lst [@fst l] reversed r]})) l emt}))

(ignore
  Maps the given list using the given function. l is the list to be mapped. ctx
  is always passed as a second argument to the mapper. mapper is the two argument
  function that will be supplied a list item as its first argument and ctx as its
  second argument and will return an argument that will be put into the corresponding
  position of another list. r is the region into which the list being constructed
  will be put. Return value is the mapped list.)

(function meta:map (l mapper r)
  (with return
    {(continuation aux (in out)
      (if [emt? in]
        {return [meta:reverse out r]}
        {aux [@rst in] [lst [mapper [@fst in]] out r]})) l emt}))

(function meta:map2 (l ctx mapper r)
  (with return
    {(continuation aux (in out)
      (if [emt? in]
        {return [meta:reverse out r]}
        {aux [@rst in] [lst [mapper [@fst in] ctx] out r]})) l emt}))

(function meta:map3 (l ctx1 ctx2 mapper r)
  (with return
    {(continuation aux (in out)
      (if [emt? in]
        {return [meta:reverse out r]}
        {aux [@rst in] [lst [mapper [@fst in] ctx1 ctx2] out r]})) l emt}))

(ignore
  The following function implements variable binding by do the following transformation:
  (let (params vals) ... expr0)
  ->
  (with let:return
    {(continuation let:aux (params ...)
      {let:return expr0}) vals ...}))

(function let (l r)
  (`(with let:return
    (,[llst (` jump r) (`(continuation let:aux (,[meta:map [@rst [meta:reverse l r]] @fst r])
      {let:return (,[@fst [meta:reverse l r]])}) r) [meta:map [@rst [meta:reverse l r]] @frst r] r])) r))

(ignore
  The following function implements variable binding by do the following transformation:
  (where expr0 (params vals) ...)
  ->
  (with let:return
    {(continuation let:aux (params ...)
      {let:return expr0}) vals ...}))

(function where (l r) [let [meta:reverse l r] r])

(ignore
  The following function implements the switch expression by doing the following transformation:
  (switch eq0 val0 (vals exprs) ... expr0)
  ->
  (let (tempeq0 eq0) (tempval0 val0)
    (if [tempeq0 tempval0 vals1]
      exprs1
      (if [tempeq0 tempval0 vals2]
        exprs2
        ...
          (if [tempeq0 tempval0 valsN]
            exprsN
            expr0)))))

(function switch (l r)
  (`(let (switch:= (,[@fst l])) (switch:val (,[@frst l]))
    (,(with return
      {(continuation aux (remaining else-clause)
        (if [emt? remaining]
          {return else-clause}
          {aux [@rst remaining]
            (`(if (,[lst (` or r) [meta:map2 [@rst [meta:reverse [@fst remaining] r]] r
                (function _ (e r) [llllst (` invoke r) (` switch:= r) (` switch:val r) e emt r]) r] r])
              (,[@fst [meta:reverse [@fst remaining] r]]) ,else-clause) r)}))
        [@rst [meta:reverse [@rrst l] r]] [@fst [meta:reverse l r]]})))r))

(ignore
  The following macro is roughly analogous to C's for-loop. The difference is
  that until loops until the condition is true rather than while it is true. The
  other difference is that this construct updates the loop control varable itself
  using the update expression - this is different from C where the update part
  of the loop header must do the mutations itself.)

(function until (l r)
  (`(with until:return {(continuation until:aux ((,[@ffst l]))
    (if (,[@frst l])
      {until:return (ignore)}
      (do (,[@frrrst l]) {until:aux (,[@frrst l])}))) (,[@frfst l])})r))

(ignore
  The following function implements the following transformation:
  (fallthrough expr (labels args exprs) ...)
  ->
  (let (argN (with labelN
      (let (argN-1 (with labelN-1
          ...
              (let (arg1 (with label1
                  (let (arg0 (with label0
                      expr))
                    expr0)))
                expr1)
            ...))
        exprN-1)))
    exprN))

(function fallthrough (l r)
  (loop do-layer (acc [@fst l]) (exprs [@rst l])
    (if [emt? exprs]
      acc
      {do-layer (`(let ((,[@frfst exprs]) (with (,[@ffst exprs]) ,acc)) (,[@frrfst exprs]))r) [@rst exprs]})))

(ignore
  Syntactic sugar for continuation passing style. The next continuations is always bound.
  Transformation is as follows:
  (cps expr (conts (args ...) exprs) ...)
  ->
  (with cps:return
    (let (cont1 (continuation cont1 (arg11 arg12 ...)
        (let (cont2 (continuation cont2 (arg21 arg22 ...)
            ...
                (let (contN-1 (continuation contN-1 (argN-11 argN-12 ...)
                    (let (contN (continuation contN (argN1 argN2 ...)
                        {cps:return exprN}))
                      {cps:return exprN-1})))
                  {cps:return exprN-2})
              ...))
          {cps:return expr1})))
      {cps:return expr})))

(function cps (l r) (`(with cps:return
  (,[(function cps-aux (body rem-exprs r)
      (if [emt? rem-exprs]
        body
        (let (cont-name [@ffst rem-exprs]) (cont-args [@frfst rem-exprs]) (cont-expr [@frrfst rem-exprs])
          (`(let (,cont-name (continuation ,cont-name ,cont-args {cps:return ,cont-expr}))
              ,body)r)))) [@fst l] [@rst l] r]))r))

(ignore
  The following function implements variable binding by do the following transformation:
  (loop cont (params args) ... expr0)
  ->
  (with loop:return
    {(continuation cont (params ...)
      {loop:return expr0}) vals ...}))

(function loop (l r)
  (let (bindings [meta:reverse [@rst [meta:reverse [@rst l] r]] r])
    (`(with loop:return
      (,[llst (` jump r) (`(continuation (,[@fst l]) (,[meta:map bindings @fst r])
        {loop:return (,[@fst [meta:reverse l r]])}) r) [meta:map bindings @frst r] r])) r)))

(ignore
  The following function implements an anonymous function using the following transformation:
  (\ params ... body)
  ->
  (function \:self (params ...) body))

(function \ (l r) (`(function \:self (,[meta:reverse [@rst [meta:reverse l r]]r]) (,[@fst [meta:reverse l r]]))r))

(ignore
  The following function implements sequencing by doing the following transformation:
  (do expr1 expr2 ... exprN)
  ->
  (with do:return
    {(continuation do:cont (do:arg)
      {(continuation do:cont (do:arg)
        {...
          {(continuation do:cont (do:arg) {do:return do:arg}) exprN}...}) expr2}) expr1}))

(function do (l r)
  (`(with do:return
    (,(loop make-do (acc (`{do:return do:arg}r)) (exprs [meta:reverse l r])
        (if [emt? exprs]
          acc
          {make-do (`{(continuation do:cont (do:arg) ,acc) (,[@fst exprs])}r) [@rst exprs]}))))r))

