<<A complete description for bindings that will be put into generated object files.>>

  (constant binding-aug #:80 \:r:[var r])

  (property bndg-name #:0 #:8 \:r:`;(! static~ string bndg-aug);r)

  (property bndg-offset #:8 #:8 \:r:(?(a) `:(! static~ ,:a bndg-aug):r r))

  (property bndg-size #:16 #:8 \:r:(?(a) `:(! static~ ,:a bndg-aug):r r))

  (property bndg-expression #:24 #:8 \:r:(?(a) `:(! static~ (expr ,:a) bndg-aug):r r))

  (property bndg-other #:32 #:8 \:r:(?(a) `:(! static~ ,:a bndg-aug):r r))
  
  (property bndg-propagate #:40 #:8 \:r:(?(a) `:(! static~ (expr ,:a) bndg-aug):r r))
  
  (property bndg-signature #:48 #:8 \:r:`;(! static~ frag bndg-aug);r)
  
  (property bndg-preferred-offset #:56 #:8 \:r:(?(a) `:(! static~ ,:a bndg-aug):r r))
  
  (property bndg-condition-jump #:64 #:8 \:r:`;(! static~ instr-code bndg-aug);r)

  (property bndg-storage #:72 #:1 \:r:`;(! static~ bndg-storage bndg-aug);r)

  (property bndg-scope #:73 #:1 \:r:`;(! static~ bndg-scope bndg-aug);r)

  (property bndg-state #:74 #:1 \:r:`;(! static~ bndg-state bndg-aug);r)
  
  (property bndg-context #:75 #:1 \:r:`;(! static~ bndg-context bndg-aug);r)
  
  (property bndg-preferred-storage #:76 #:1 \:r:`;(! static~ bndg-storage bndg-aug);r)
  
  (property bndg-mode #:77 #:1 \:r:`;(! static~ bndg-mode bndg-aug);r)
  
  (property bndg-is-read #:78 #:1 \:r:(?(a) `:(! static~ ,:a bndg-aug):r r))
  
  (property bndg-is-condition #:79 #:1 \:r:(?(a) `:(! static~ ,:a bndg-aug):r r))

<<Valid values for bndg-storage>>

  (constant absolute-storage #:0 \:r:`;bndg-storage;r)

  (constant frame-relative-storage #:1 \:r:`;bndg-storage;r)
  
  (constant register-storage #:2 \:r:`;bndg-storage;r)

  (constant nil-storage #:3 \:r:`;bndg-storage;r)

<<Valid values for bndg-scope>>

  (constant local-scope #:0 \:r:`;bndg-scope;r)

  (constant global-scope #:1 \:r:`;bndg-scope;r)

<<Valid values for bndg-state>>

  (constant undefined-state #:0 \:r:`;bndg-state;r)

  (constant defined-state #:1 \:r:`;bndg-state;r)

<<Valid values for bndg-context>>

  (constant intra-function-context #:0 \:r:`;bndg-context;r)

  (constant extra-function-context #:1 \:r:`;bndg-context;r)

<<Valid values for bndg-mode>>

  (constant value-mode #:0 \:r:`;bndg-mode;r)

  (constant reference-mode #:1 \:r:`;bndg-mode;r)

<<A complete representation for L2 expressions as they are found in L2 source files.>>

  (constant expression #:120 \:r:[var r])
  
  (property expr-new #:0 #:0 \:r:(?(a) `:(! dynamic~ (expr ,:a) (expr ())):r r))

  (property expr-type #:0 #:8 \:r:(?(a) `:(! static~ expr-type (expr ,:a)):r r))

  (property expr-fragment #:8 #:8 \:r:(?(a) `:(! static~ frag (expr ,:a)):r r))

  (property expr-metalink #:16 #:8 \:r:(?(a) `:(! static~ (expr ,:a) (expr ,:a)):r r))

  (property expr-lowlink #:32 #:8 \:r:(?(a b) `:(! static~ ,:b (expr ,:a)):r r))

  (property expr-dependencies #:40 #:8 \:r:(?(a) `:(! static~ (list (expr ,:a)) (expr ,:a)):r r))
  
  (property expr-binding-aug #:48 #:8 \:r:(?(a) `:(! static~ bndg-aug (expr ,:a)):r r))
  
  (property expr-generator #:56 #:8 \:r:(?(a) `:(! static~ generator (expr ,:a)):r r))
  
  (property expr-depth #:64 #:8 \:r:(?(a b) `:(! static~ ,:a (expr ,:b)):r r))
  
  (property expr-storage #:72 #:48 \:r:(?(b) `:(! static~ (expr-storage ,:b) (expr ,:b)):r r))
  
  (property expr-literal #:72 #:48 \:r:(?(b) `:(! static~ (expr-literal ,:b) (expr ,:b)):r r))
  
  (property expr-if #:72 #:48 \:r:(?(b) `:(! static~ (expr-if ,:b) (expr ,:b)):r r))
  
  (property expr-continuation #:72 #:48 \:r:(?(b) `:(! static~ (expr-continuation ,:b) (expr ,:b)):r r))
  
  (property expr-with #:72 #:48 \:r:(?(b) `:(! static~ (expr-with ,:b) (expr ,:b)):r r))
  
  (property expr-jump #:72 #:48 \:r:(?(b) `:(! static~ (expr-jump ,:b) (expr ,:b)):r r))
  
  (property expr-invoke #:72 #:48 \:r:(?(b) `:(! static~ (expr-invoke ,:b) (expr ,:b)):r r))
  
  (property expr-function #:72 #:48 \:r:(?(b) `:(! static~ (expr-function ,:b) (expr ,:b)):r r))
  
  (property expr-meta #:72 #:48 \:r:(?(b) `:(! static~ (expr-meta ,:b) (expr ,:b)):r r))
  
  (property expr-constrain #:72 #:48 \:r:(?(b) `:(! static~ (expr-constrain ,:b) (expr ,:b)):r r))
  
  (property expr-symbol #:72 #:48 \:r:(?(b) `:(! static~ (expr-symbol ,:b) (expr ,:b)):r r))

<<Properties of (-storage-) objects.>>
  
  (property expr-storage-reference #:0 #:8 \:r:(?(a) `:(! static~ bndg-aug !:Ref:(expr-storage ,:a)):r r))
  
  (property expr-storage-arguments #:8 #:8 \:r:(?(a) `:(! static~ (list (expr ,:a)) !:Ref:(expr-storage ,:a)):r r))
  
<<Properies of (-invoke-) objects.>>
  
  (property expr-invoke-target #:0 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-invoke ,:a)):r r))
  
  (property expr-invoke-arguments #:8 #:8 \:r:(?(a) `:(! static~ (list (expr ,:a)) !:Ref:(expr-invoke ,:a)):r r))
  
<<Properies of (-jump-) objects.>>
  
  (property expr-jump-target #:0 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-jump ,:a)):r r))
  
  (property expr-jump-arguments #:8 #:8 \:r:(?(a) `:(! static~ (list (expr ,:a)) !:Ref:(expr-jump ,:a)):r r))
  
  (property expr-short-circuit #:32 #:8 \:r:(?(a b) `:(! static~ ,:a !:Ref:(expr-jump ,:b)):r r))
  
<<Properies of (-function-) objects.>>
  
  (property expr-function-reference #:0 #:8 \:r:(?(a) `:(! static~ bndg-aug !:Ref:(expr-function ,:a)):r r))
  
  (property expr-function-expression #:8 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-function ,:a)):r r))
  
  (property expr-function-parameters #:16 #:8 \:r:(?(a) `:(! static~ (list bndg-aug) !:Ref:(expr-function ,:a)):r r))
  
  (property expr-frame-size #:24 #:8 \:r:(?(a b) `:(! static~ ,:a !:Ref:(expr-function ,:b)):r r))
  
  (property expr-registers-used #:32 #:8 \:r:(?(a) `:(! static~ reg-use-vec !:Ref:(expr-function ,:a)):r r))
  
<<Properies of (-continuation-) objects.>>
  
  (property expr-continuation-reference #:0 #:8 \:r:(?(a) `:(! static~ bndg-aug !:Ref:(expr-continuation ,:a)):r r))
  
  (property expr-continuation-expression #:8 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-continuation ,:a)):r r))
  
  (property expr-continuation-parameters #:16 #:8 \:r:(?(a) `:(! static~ (list bndg-aug) !:Ref:(expr-continuation ,:a)):r r))
  
  (property expr-continuation-instr-bndg #:24 #:8 \:r:(?(a b) `:(! static~ ,:a !:Ref:(expr-continuation ,:b)):r r))
  
  (property expr-continuation-escapes #:32 #:8 \:r:(?(a b) `:(! static~ ,:a !:Ref:(expr-continuation ,:b)):r r))
  
  (property expr-continuation-jumps #:40 #:8 \:r:(?(a) `:(! static~ (list (expr ,:a)) !:Ref:(expr-continuation ,:a)):r r))

<<Properies of (-with-) objects.>>
  
  (property expr-with-reference #:0 #:8 \:r:(?(a) `:(! static~ bndg-aug !:Ref:(expr-with ,:a)):r r))
  
  (property expr-with-expression #:8 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-with ,:a)):r r))
  
  (property expr-with-parameters #:16 #:8 \:r:(?(a) `:(! static~ (list bndg-aug) !:Ref:(expr-with ,:a)):r r))
  
  (property expr-with-instr-bndg #:24 #:8 \:r:(?(a b) `:(! static~ ,:a !:Ref:(expr-with ,:b)):r r))
  
  (property expr-with-escapes #:32 #:8 \:r:(?(a b) `:(! static~ ,:a !:Ref:(expr-with ,:b)):r r))
  
  (property expr-with-jumps #:40 #:8 \:r:(?(a) `:(! static~ (list (expr ,:a)) !:Ref:(expr-with ,:a)):r r))
  
<<Properies of (-symbol-) objects.>>
  
  (property expr-symbol-reference #:0 #:8 \:r:(?(a) `:(! static~ bndg-aug !:Ref:(expr-symbol ,:a)):r r))
  
  (property expr-name #:8 #:8 \:r:(?(a) `:(! static~ string !:Ref:(expr-symbol ,:a)):r r))

<<Properies of (-meta-) objects.>>
  
  (property expr-meta-target #:0 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-meta ,:a)):r r))

<<Properies of (-constrain-) objects.>>

  (property expr-constrain-target #:0 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-constrain ,:a)):r r))
  
  (property expr-constrain-expression #:8 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-constrain ,:a)):r r))

<<Properies of (-if-) objects.>>

  (property expr-condition #:0 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-if ,:a)):r r))

  (property expr-consequent #:8 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-if ,:a)):r r))

  (property expr-alternate #:16 #:8 \:r:(?(a) `:(! static~ (expr ,:a) !:Ref:(expr-if ,:a)):r r))

<<Properies of (-literal-) objects.>>

  (property expr-value #:0 #:8 \:r:(?(a b) `:(! static~ ,:a !:Ref:(expr-literal ,:b)):r r))

<<Valid values for expr-type.>>

  (constant -storage- #:0 \:r:`;expr-type;r)

  (constant -function- #:1 \:r:`;expr-type;r)

  (constant -with- #:2 \:r:`;expr-type;r)

  (constant -invoke- #:3 \:r:`;expr-type;r)

  (constant -if- #:4 \:r:`;expr-type;r)

  (constant -literal- #:6 \:r:`;expr-type;r)

  (constant -symbol- #:7 \:r:`;expr-type;r)

  (constant -jump- #:8 \:r:`;expr-type;r)

  (constant -continuation- #:9 \:r:`;expr-type;r)

  (constant -meta- #:11 \:r:`;expr-type;r)

  (constant -constrain- #:12 \:r:`;expr-type;r)

<<Matchers for the various expression types.>>

(define expr-union (union = expr-type))

(define exprm (module

  (invoke? (expr-union (-invoke-) expr-invoke))
  
  (jump? (expr-union (-jump-) expr-jump))
  
  (continuation? (expr-union (-continuation-) expr-continuation))

  (with? (expr-union (-with-) expr-with))

  (function? (expr-union (-function-) expr-function))

  (storage? (expr-union (-storage-) expr-storage))

  (if? (expr-union (-if-) expr-if))

  (literal? (expr-union (-literal-) expr-literal))

  (symbol? (expr-union (-symbol-) expr-symbol))

  (meta? (expr-union (-meta-) expr-meta))

  (constrain? (expr-union (-constrain-) expr-constrain))))

<<Some expressions resemble each other in different ways and hence are treated
  the same for some operations. Manually implementing ad-hoc polymorphism over
  certain fields below.>>

(function expr-target (n)
  (sub (F exprm) (match n
    ((F:invoke? .:inve) (& expr-invoke-target inve))
    ((F:jump? .:jmpe) (& expr-jump-target jmpe))
    ((F:meta? .:mete) (& expr-meta-target mete))
    ((F:constrain? .:ctne) (& expr-constrain-target ctne))
    [print-str (stdout) (" expr-target called on incorrect type.) (~)])))

(function expr-arguments (n)
  (sub (F exprm) (match n
    ((F:storage? .:stge) (& expr-storage-arguments stge))
    ((F:invoke? .:inve) (& expr-invoke-arguments inve))
    ((F:jump? .:jmpe) (& expr-jump-arguments jmpe))
    [print-str (stdout) (" expr-arguments called on incorrect type.) (~)])))

(function expr-reference (n)
  (sub (F exprm) (match n
    ((F:storage? .:stge) (& expr-storage-reference stge))
    ((F:function? .:funce) (& expr-function-reference funce))
    ((F:continuation? .:conte) (& expr-continuation-reference conte))
    ((F:with? .:wthe) (& expr-with-reference wthe))
    ((F:symbol? .:syme) (& expr-symbol-reference syme))
    [print-str (stdout) (" expr-reference called on incorrect type.) (~)])))

(function expr-expression (n)
  (sub (F exprm) (match n
    ((F:function? .:funce) (& expr-function-expression funce))
    ((F:continuation? .:conte) (& expr-continuation-expression conte))
    ((F:with? .:wthe) (& expr-with-expression wthe))
    ((F:constrain? .:ctne) (& expr-constrain-expression ctne))
    [print-str (stdout) (" expr-target called on incorrect type.) (~)])))

(function expr-parameters (n)
  (sub (F exprm) (match n
    ((F:function? .:funce) (& expr-function-parameters funce))
    ((F:continuation? .:conte) (& expr-continuation-parameters conte))
    ((F:with? .:wthe) (& expr-with-parameters wthe))
    [print-str (stdout) (" expr-parameters called on incorrect type.) (~)])))

(function expr-instr-bndg (n)
  (sub (F exprm) (match n
    ((F:continuation? .:conte) (& expr-continuation-instr-bndg conte))
    ((F:with? .:wthe) (& expr-with-instr-bndg wthe))
    [print-str (stdout) (" expr-instr-bndg called on incorrect type.) (~)])))

(function expr-escapes (n)
  (sub (F exprm) (match n
    ((F:continuation? .:conte) (& expr-continuation-escapes conte))
    ((F:with? .:wthe) (& expr-with-escapes wthe))
    [print-str (stdout) (" expr-escapes called on incorrect type.) (~)])))

(function expr-jumps (n)
  (sub (F exprm) (match n
    ((F:continuation? .:conte) (& expr-continuation-jumps conte))
    ((F:with? .:wthe) (& expr-with-jumps wthe))
    [print-str (stdout) (" expr-jumps called on incorrect type.) (~)])))

<<Convenience functions for making L2 expressions. They save you from having
  to construct parameter and argument lists separately from the construction of
  the expression.>>

<<Usage (make-functionN ref-expr (param-exprs ...) expr frag meta buf handler)>>

(function make-functionN (l r)
  `:[make-function ,:[@fst l] (list ,:[@rrrrrst l] , [@frst l]) ,:[@frrst l] , [@rrrst l]]:r)

<<Analogous to above.>>

(function make-continuationN (l r)
  `:[make-continuation ,:[@fst l] (list ,:[@rrrrrst l] , [@frst l]) ,:[@frrst l] , [@rrrst l]]:r)

<<Usage (make-jumpN ref-expr (arg-exprs ...) frag meta buf handler)>>

(function make-jumpN (l r)
  `:[make-jump ,:[@fst l] (list ,:[@rrrrst l] , [@frst l]) , [@rrst l]]:r)

<<Analogous to above.>>

(function make-invokeN (l r)
  `:[make-invoke ,:[@fst l] (list ,:[@rrrrst l] , [@frst l]) , [@rrst l]]:r)

<<Constant against which the length of a literal expression is checked.>>

(constant build-expression-literal-len #:64 \:r:[var r])

(constrain null-expr (\ r (?(a) (` (expr ,:a) r)r)))

(storage null-expr (~))

(storage null-binding (~))

(constrain make-binding-aug
  (\ r (?(a b) (`(function (bndg-mode bndg-context bndg-storage bndg-scope bndg-state string frag (expr ,:b) region ,:a) bndg-aug)r)r)))

(function make-binding-aug (mode context stg scope state name sig expression r handler)
  (sub (.. r handler)
    (record (_[region-alloc (binding-aug) ..])
      (bndg-context context)
      (bndg-storage stg)
      (bndg-scope scope)
      (bndg-state state)
      (bndg-name name)
      (bndg-signature sig)
      (bndg-expression expression)
      (bndg-propagate null-expr)
      (bndg-preferred-storage (nil-storage))
      (bndg-is-read (false))
      (bndg-mode mode)
      (bndg-is-condition (false))
      (bndg-condition-jump (x86-nop)))))

(constrain set-expr-is-read (\ r (?(a b) (`(function ((expr ,:b) ,:a) ())r)r)))

(function set-expr-is-read (expr val) (do
  (setf bndg-is-read (@ expr-binding-aug expr) val)
  (~)))

(constrain bndg-depth (\ r (?(a) (`(function (bndg-aug) ,:a)r)r)))

(function bndg-depth (bndg) (@ expr-depth (@ bndg-expression bndg)))

(constrain expr-binding-depth (\ r (?(a b) (`(function ((expr ,:b)) ,:a)r)r)))

(function expr-binding-depth (expr) [bndg-depth (@ expr-binding-aug expr)])

(constrain bndg-escapes (\ r (?(a) (`(function (bndg-aug) ,:a)r)r)))

(function bndg-escapes (bndg)
  (let (e (@ bndg-expression bndg))
    (or (and [not= (@ expr-type e) (-continuation-)] [not= (@ expr-type e) (-with-)]) $:[expr-escapes e])))

(constrain make-literal (\ r (?(a b c) (`(function (,:a frag (expr ,:c) region ,:b) (expr ()))r)r)))

(function make-literal (value frag meta reg handler)
  (sub (.. reg handler)
    (record (t [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-literal-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] t ..])
      (phantom (record (_ (& expr-literal t))
        (expr-value value))))))

(constrain make-symbol (\ r (?(a b) (`(function (string frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-symbol (name frag meta reg handler)
  (sub (.. reg handler)
    (record (sym [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-symbol-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] sym ..])
      (phantom (record (_ (& expr-symbol sym))
        (expr-name name)
        (expr-symbol-reference null-binding))))))

<<Makes an undefined binding with the given name. Internally, a storage expression is made
  to be the target of the symbol so as to enable type inferencing on symbols using this
  binding.>>

(constrain make-undefined-binding (\ r (?(b) (`(function (string region ,:b) bndg-aug)r)r)))

(function make-undefined-binding (name r handler)
  (sub (.. r handler)
    (let (stg [make-storage name nil null-fragment null-expr ..])
    (record (bndg (@ expr-storage-reference (& expr-storage stg)))
      (bndg-context (extra-function-context))
      (bndg-storage (absolute-storage))
      (bndg-scope (global-scope))
      (bndg-state (undefined-state))))))

(constrain expr-signature (\ r (?(a) (`(function ((expr ,:a)) frag)r)r)))

(function expr-signature (expr) (@ bndg-signature (@ expr-binding-aug expr)))

(constrain make-function (\ r (?(a b) (`(function (string (list string) (expr ,:a) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-function (ref params expr frag meta reg handler)
  (sub (.. reg handler)
    (record (func [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-function-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] func ..])
      (phantom (record (_ (& expr-function func))
        (expr-function-reference
          [make-binding-aug (reference-mode) (extra-function-context) (absolute-storage) (local-scope)
            (defined-state) ref [vbl-to-frag [vbl ..]] func ..])
        (expr-function-parameters
          [collect-list (map (param (%:list-iter params))
            [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
              (defined-state) param [vbl-to-frag [vbl ..]] func ..]) nil ..])
        (expr-function-expression expr))))))

(constrain make-continuation (\ r (?(a b) (`(function (string (list string) (expr ,:a) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-continuation (ref params expr frag meta reg handler)
  (sub (.. reg handler)
    (record (cont [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-continuation-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] cont ..])
      (phantom (record (_ (& expr-continuation cont))
        (expr-continuation-expression expr)
        (expr-continuation-escapes (false))
        (expr-continuation-jumps nil)
        (expr-continuation-reference
          [make-binding-aug (reference-mode) (intra-function-context) (nil-storage) (local-scope)
            (defined-state) ref [vbl-to-frag [vbl ..]] cont ..])
        (expr-continuation-parameters
          [collect-list (map (param (%:list-iter params))
            [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
              (defined-state) param [vbl-to-frag [vbl ..]] cont ..]) nil ..])
        (expr-continuation-instr-bndg
          [make-binding-aug (reference-mode) (extra-function-context) (absolute-storage) (local-scope)
            (defined-state) empty-string null-fragment null-expr ..]))))))

(constrain make-with (\ r (?(a b) (`(function (string (expr ,:a) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-with (ref expr frag meta reg handler)
  (sub (.. reg handler)
    (record (wth [region-alloc (expression) ..])
      (expr-type (-with-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] wth ..])
      (phantom (record (_(& expr-with wth))
        (expr-with-escapes (false))
        (expr-with-expression expr)
        (expr-with-jumps nil)
        (expr-with-parameters [cons
          [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
            (defined-state) empty-string [vbl-to-frag [vbl ..]] wth ..] nil ..])
        (expr-with-reference
          [make-binding-aug (reference-mode) (intra-function-context) (nil-storage) (local-scope)
            (defined-state) ref [vbl-to-frag [vbl ..]] wth ..])
        (expr-with-instr-bndg
          [make-binding-aug (reference-mode) (extra-function-context) (absolute-storage) (local-scope)
            (defined-state) empty-string null-fragment null-expr ..]))))))

(constrain make-jump (\ r (?(a b) (`(function ((expr ,:a) (list (expr ,:a)) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-jump (ref args frag meta reg handler)
  (sub (.. reg handler)
    (record (u [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-jump-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] u ..])
      (phantom (record (_ (& expr-jump u))
        (expr-short-circuit null-expr)
        (expr-jump-target ref)
        (expr-jump-arguments args))))))

(constrain make-storage (\ r (?(a b) (`(function (string (list (expr ,:a)) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-storage (ref args frag meta reg handler)
  (sub (.. reg handler)
    (record (u [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-storage-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] u ..])
      (phantom (record (_ (& expr-storage u))
        (expr-storage-arguments args)
        (expr-storage-reference
        [make-binding-aug (reference-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) ref [vbl-to-frag [vbl ..]] u ..]))))))

(constrain make-meta (\ r (?(a b) (`(function ((expr ,:a) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-meta (ref frag meta reg handler)
  (sub (.. reg handler)
    (record (u [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-meta-))
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug null-binding)
      (expr-fragment frag)
      (phantom (record (_ (& expr-meta u))
        (expr-meta-target ref))))))

(constrain make-constrain (\ r (?(a b) (`(function ((expr ,:a) (expr ,:a) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-constrain (expr ref frag meta reg handler)
  (sub (.. reg handler)
    (record (u [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-constrain-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] u ..])
      (phantom (record (_ (& expr-constrain u))
        (expr-constrain-target ref)
        (expr-constrain-expression expr))))))

(constrain make-if (\ r (?(a b) (`(function ((expr ,:a) (expr ,:a) (expr ,:a) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-if (condition consequent alternate frag meta reg handler)
  (sub (.. reg handler)
    (record (u [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-if-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] u ..])
      (phantom (record (_ (& expr-if u))
        (expr-condition condition)
        (expr-consequent consequent)
        (expr-alternate alternate))))))

(constrain make-invoke (\ r (?(a b) (`(function ((expr ,:a) (list (expr ,:a)) frag (expr ,:a) region ,:b) (expr ()))r)r)))

(function make-invoke (ref args frag meta reg handler)
  (sub (.. reg handler)
    (record (u [region-alloc (expression) ..])
      (expr-new (~))
      (expr-type (-invoke-))
      (expr-fragment frag)
      (expr-metalink meta)
      (expr-lowlink #:0)
      (expr-dependencies nil)
      (expr-binding-aug
        [make-binding-aug (value-mode) (intra-function-context) (nil-storage) (local-scope)
          (defined-state) empty-string [vbl-to-frag [vbl ..]] u ..])
      (phantom (record (_ (& expr-invoke u))
        (expr-invoke-target ref)
        (expr-invoke-arguments args))))))

<<Prints the given expression as it would be written in an L2 source file. s is an expression.>>

(function print-binding (bndg hdl) (sub (.. hdl)
  (if [getb (@ bndg-name bndg)]
    [print-str (stdout) (@ bndg-name bndg) ..]
    (do
      [print-str (stdout) (" (lparen)binding(space)) ..]
      [print-uint (stdout) bndg ..]
      [print-str (stdout) (" (rparen)) ..]))))

(constrain print-expression (\ r (?(a b) (`(function ((expr ,:b) ,:a) ())r)r)))

(function print-expression (s hdl) (sub (.. hdl)
  (switch = (@ expr-type s)
    ((-with-) (do
      [print-str (stdout) (" (lparen)with(space)) ..]
      [print-binding (@ expr-with-reference (& expr-with s)) ..]
      [print-str (stdout) (" (space)) ..]
      [print-expression (@ expr-with-expression (& expr-with s)) ..]
      [print-str (stdout) (" (rparen)) ..]))
    
    ((-storage-) (do
      [print-str (stdout) (" (lparen)storage(space)) ..]
      [print-binding (@ expr-storage-reference (& expr-storage s)) ..]
      [print-str (stdout) (" (space)) ..]
      (for (t (%:list-iter (@ expr-storage-arguments (& expr-storage s)))) (~) (do
        [print-expression t ..]
        [print-str (stdout) (" (space)) ..]))
      [print-str (stdout) (" (bs)) ..]
      [print-str (stdout) (switch = (@ expr-type s)
        ((-invoke-) (" (rbracket)))
        ((-jump-) (" (rbrace)))
        (" (rbracket))) ..]))
    
    ((-invoke-) (-jump-) (do
      [print-str (stdout) (switch = (@ expr-type s)
        ((-invoke-) (" (lbracket)))
        ((-jump-) (" (lbrace)))
        (~)) ..]
      [print-expression $:[expr-target s] ..]
      [print-str (stdout) (" (space)) ..]
      (for (t (%:list-iter $:[expr-arguments s])) (~) (do
        [print-expression t ..]
        [print-str (stdout) (" (space)) ..]))
      [print-str (stdout) (" (bs)) ..]
      [print-str (stdout) (switch = (@ expr-type s)
        ((-invoke-) (" (rbracket)))
        ((-jump-) (" (rbrace)))
        (" (rbracket))) ..]))
    
    ((-function-) (-continuation-) (do
      [print-str (stdout) (" (lparen)) ..]
      [print-str (stdout) (switch = (@ expr-type s)
        ((-function-) (" function))
        ((-continuation-) (" continuation))
        (~)) ..]
      [print-str (stdout) (" (space)) ..]
      [print-binding $:[expr-reference s] ..]
      [print-str (stdout) (" (space)(lparen)(space)) ..]
      (for (t (%:list-iter $:[expr-parameters s])) (~) (do
        [print-binding t ..]
        [print-str (stdout) (" (space)) ..]))
      [print-str (stdout) (" (rparen)(space)) ..]
      [print-expression $:[expr-expression s] ..]
      [print-str (stdout) (" (rparen)) ..]))
      
    ((-if-) (do
      [print-str (stdout) (" (lparen)if(space)) ..]
      [print-expression (@ expr-condition (& expr-if s)) ..]
      [print-str (stdout) (" (space)) ..]
      [print-expression (@ expr-consequent (& expr-if s)) ..]
      [print-str (stdout) (" (space)) ..]
      [print-expression (@ expr-alternate (& expr-if s)) ..]
      [print-str (stdout) (" (rparen)) ..]))
    
    ((-constrain-) (do
      [print-str (stdout) (" (lparen)constrain(space)) ..]
      [print-expression (@ expr-constrain-expression (& expr-constrain s)) ..]
      [print-str (stdout) (" (space)) ..]
      [print-fragment (@ bndg-signature (@ expr-binding-aug s)) ..]
      [print-str (stdout) (" (rparen)) ..]))
    
    ((-symbol-)
      (if [getb (@ expr-name (& expr-symbol s))]
        [print-str (stdout) (@ expr-name (& expr-symbol s)) ..]
        [print-binding (@ expr-symbol-reference (& expr-symbol s)) ..]))
          
    ((-literal-) (do
      [print-str (stdout) (" (lparen)literal(space)) ..]
      [print-uint (stdout) (@ expr-value (& expr-literal s)) ..]
      [print-str (stdout) (" (rparen)) ..]))
    
    ((-meta-) [print-fragment (@ expr-fragment s) ..])
      
    (~))))

(storage special-form-error (~))

<<Builds an expression from a given program fragment. d is the program fragment.
  reg is the region into which the built expressions will be put. The return value
  is the constructed expression. The continuation handler will be followed with the
  tuple (special-form-error, ...) in the event of a malformed expression.>>

(constrain build-expression (\ r (?(a b) (`(function (frag (expr ,:b) region ,:a) (expr ()))r)r)))

(function build-expression (frag meta reg handler) (sub (.. reg handler)
  (if [i/f.token? frag] [make-symbol [to-string [fragment-to-token frag] ..] frag meta ..]
  (let (d [frag-to-list frag])
    (if [= [length d] #:0] {handler (storage _ special-form-error d null-fragment)}
    (switch str= [to-string [fragment-to-token [@car d]] ..]
      ((" with)
        (if (not [= [length d] #:3])
          {handler (storage _ special-form-error d null-fragment)}
        (if (not [i/f.token? [@cadr d]])
          {handler (storage _ special-form-error d [@cadr d])}
          [make-with [to-string [fragment-to-token [@cadr d]] ..] [build-expression [@caddr d] meta ..] frag meta ..])))
      
      ((" if)
        (if (not [= [length d] #:4])
          {handler (storage _ special-form-error d null-fragment)}
          [make-if [build-expression [@cadr d] meta ..] [build-expression [@caddr d] meta ..]
            [build-expression [@cadddr d] meta ..] frag meta ..]))
      
      ((" function) (" continuation)
        (if (not [= [length d] #:4])
          {handler (storage _ special-form-error d null-fragment)}
        (if (not [i/f.token? [@cadr d]])
          {handler (storage _ special-form-error d [@cadr d])}
        (if [i/f.token? [@caddr d]]
          {handler (storage _ special-form-error d [@caddr d])}
          (let (parameters [collect-list (map (v (%:list-iter [frag-to-list [@caddr d]]))
              (if [i/f.token? v]
                [to-string [fragment-to-token v] ..]
                {handler (storage _ special-form-error d v)})) nil ..])
                
            [(switch str= [to-string [fragment-to-token [@car d]] ..]
                ((" function) make-function)
                ((" continuation) make-continuation)
                (~))
              [to-string [fragment-to-token [@cadr d]] ..] parameters [build-expression [@cadddr d] meta ..] frag meta ..])))))
      
      ((" storage)
        (if [= [length d] #:1]
          {handler (storage _ special-form-error d null-fragment)}
        (if (and [str= [to-string [fragment-to-token [@car d]] ..] (" storage)] (not [i/f.token? [@cadr d]]))
          {handler (storage _ special-form-error d [@cadr d])}
          [make-storage
            [to-string [fragment-to-token [@cadr d]] ..] [collect-list (map (v (%:list-iter [@cddr d])) [build-expression v meta ..]) nil ..] frag meta ..])))
      
      ((" invoke) (" jump)
        (if [= [length d] #:1]
          {handler (storage _ special-form-error d null-fragment)}
        (if (and [str= [to-string [fragment-to-token [@car d]] ..] (" storage)] (not [i/f.token? [@cadr d]]))
          {handler (storage _ special-form-error d [@cadr d])}
          [(switch str= [to-string [fragment-to-token [@car d]] ..]
              ((" invoke) make-invoke)
              ((" jump) make-jump)
              (~))
            [build-expression [@cadr d] meta ..] [collect-list (map (v (%:list-iter [@cddr d])) [build-expression v meta ..]) nil ..] frag meta ..])))
      
      ((" literal)
        (if (not [= [length d] #:2])
          {handler (storage _ special-form-error d null-fragment)}
        (if (or (not [i/f.token? [@cadr d]]) (not [= [length [frag-to-list [@cadr d]]] (build-expression-literal-len)]))
          {handler (storage _ special-form-error d [@cadr d])}
          [make-literal
            (loop build-num (str [to-string [fragment-to-token [@cadr d]] ..]) (i (build-expression-literal-len)) (value #:0)
              (if [= i #:0]
                value
              (if [= [getb str] (char 1)]
                {build-num [+ str #:1] [- i #:1] [+ [shl value #:1] #:1]}
              (if [= [getb str] (char 0)]
                {build-num [+ str #:1] [- i #:1] [shl value #:1]}
                {handler (storage _ special-form-error d [@cadr d])})))) frag meta ..])))
      
      ((" constrain)
        (if (not [= [length d] #:3])
          {handler (storage _ special-form-error d null-fragment)}
          [make-constrain [build-expression [@cadr d] meta ..] [build-expression [@caddr d] meta ..] frag meta ..]))
      
      [make-meta [build-expression [@car d] meta ..] frag meta ..]))))))

<<Make a unary function with the given name that calls an undefined function of the same
  name with the same arguments that it received. The idea is that the intrinsic generators
  will replace the function call with inline assembly.>>

(constrain make-unary-intrinsic (\ r (?(a b) (`(function (string region ,:a) (expr ,:b))r)r)))

(function make-unary-intrinsic (name buf handler)
  (sub (.. buf handler)
    (let (callee-symbol [make-symbol empty-string null-fragment null-expr ..])
        (arg-a [make-symbol empty-string null-fragment null-expr ..])
      (let (func (make-functionN name (empty-string)
          (make-invokeN callee-symbol (arg-a) null-fragment null-expr ..) null-fragment null-expr ..)) (do
        (setf expr-symbol-reference (& expr-symbol callee-symbol) [make-undefined-binding name ..])
        (setf expr-symbol-reference (& expr-symbol arg-a) [@car (@ expr-function-parameters (& expr-function func))])
        func)))))

<<Performs actions analogous to make-unary-intrinsic, but for binary functions.>>

(constrain make-binary-intrinsic (\ r (?(a b) (`(function (string region ,:a) (expr ,:b))r)r)))

(function make-binary-intrinsic (name buf handler)
  (sub (.. buf handler)
    (let (callee-symbol [make-symbol empty-string null-fragment null-expr ..])
        (arg-a [make-symbol empty-string null-fragment null-expr ..])
        (arg-b [make-symbol empty-string null-fragment null-expr ..])
      (let (func (make-functionN name (empty-string empty-string)
          (make-invokeN callee-symbol (arg-a arg-b) null-fragment null-expr ..) null-fragment null-expr ..)) (do
        (setf expr-symbol-reference (& expr-symbol callee-symbol) [make-undefined-binding name ..])
        (setf expr-symbol-reference (& expr-symbol arg-a) [@car (@ expr-function-parameters (& expr-function func))])
        (setf expr-symbol-reference (& expr-symbol arg-b) [@cadr (@ expr-function-parameters (& expr-function func))])
        func)))))

