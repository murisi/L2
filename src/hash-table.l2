(constant ht-initial-bucket-count #:2 \:r:[var r])

(constant ht-resize-factor #:2 \:r:[var r])

(constant ht-load-factor-num #:3 \:r:[var r])

(constant ht-load-factor-den #:4 \:r:[var r])

(-- The hash-table data structure. Note that it is parameterized by a hash function and an equality function.)

  (constant hash-table-struct #:40 \:r:[var r])

  (property ht-bucket-count #:0 #:8 \:r:(?(a b c) `:(! static~ ,:c (hash-table ,:a ,:b)):r r))

  (property ht-element-count #:8 #:8 \:r:(?(a b c) `:(! static~ ,:c (hash-table ,:a ,:b)):r r))

  (property ht-hash-func #:16 #:8 \:r:(?(a b c) `:(! static~ (function (,:a) ,:c) (hash-table ,:a ,:b)):r r))

  (property ht-equals-func #:24 #:8 \:r:(?(a b c) `:(! static~ (function (,:a ,:a) ,:c) (hash-table ,:a ,:b)):r r))

  (property ht-values #:32 #:8 \:r:(?(a b c) `:(! static~ !:Ref:(list (values ,:a ,:b)) (hash-table ,:a ,:b)):r r))

(constrain ht-create (\ r (?(a b c d e) `:(function ((function (,:a) ,:d) (function (,:a ,:a) ,:e) region ,:c) (hash-table ,:a ,:b)):r r)))

(function ht-create (hash-func equals-func buf hdl)
  (sub (.. buf hdl)
    (let (ht [region-alloc (hash-table-struct) ..]) (do
      (setf ht-bucket-count ht (ht-initial-bucket-count))
      (setf ht-element-count ht #:0)
      (setf ht-hash-func ht hash-func)
      (setf ht-equals-func ht equals-func)
      (setf ht-values ht [region-alloc [*(ht-initial-bucket-count)(unit)] ..])
      (for (i (%:range #:0 (ht-initial-bucket-count))) (~) [set (loc(unit)i (@ ht-values ht)) nil])
      ht))))

(-- Checks to see if the number of elements in the hash table exceeds the load
  factor and if so, scales the number of uckets in the hash table by the
  resize factor.)

(constrain ht-resize (\ r (?(a b c d) `:(function ((hash-table ,:a ,:b) region ,:c) ,:d):r r)))

(function ht-resize (ht buf hdl)
  (sub (.. buf hdl)
    (if [> [* (@ ht-element-count ht) (ht-load-factor-den)] [* (@ ht-bucket-count ht) (ht-load-factor-num)]]
      (let (new-bucket-count [* (@ ht-bucket-count ht) (ht-resize-factor)])
      (let (new-values [region-alloc [* new-bucket-count(unit)] ..]) (do
        (for (i (%:range #:0 new-bucket-count)) (~) [set (loc(unit)i new-values) nil])
        (for (i (%:range #:0 (@ ht-bucket-count ht))) (~)
          (let (bucket ($(loc(unit)i(@ ht-values ht))))
          (loop move-node (bucket bucket)
            (if [nil? bucket] (~)
              ((values? .:key .:value) [@car bucket]
              (let (next [@cdr bucket])
              (let (new-bucket-idx [rem [(@ ht-hash-func ht) key] new-bucket-count])
              (let (new-bucket (loc(unit)new-bucket-idx new-values)) (do
              (setf cdr bucket nil)
              [append-list new-bucket bucket]
              {move-node next})))) (~))))))
        (setf ht-bucket-count ht new-bucket-count)
        (setf ht-values ht new-values)))) (~))))

(constrain ht-put (\ r (?(a b c) `:(function (,:a ,:b (hash-table ,:a ,:b) region ,:c) (hash-table ,:a ,:b)):r r)))

(function ht-put (key value ht buf hdl)
  (sub (.. buf hdl)
    (let (bucket-idx [rem [(@ ht-hash-func ht) key] (@ ht-bucket-count ht)])
    (let (bucket (loc(unit)bucket-idx(@ ht-values ht))) (do
    [prepend (values (region-storage ..) key value) bucket ..]
    [set+ (& ht-element-count ht) #:1]
    [ht-resize ht ..]
    ht)))))

(constrain ht-putmap (\ r (?(a b c) `:(function ((hash-table ,:a ,:b) (hash-table ,:a ,:b) region ,:c) (hash-table ,:a ,:b)):r r)))

(function ht-putmap (ht1 ht2 buf hdl)
  (sub (.. buf hdl)
    (select (tuple? .:key .:val) (%:ht-iter ht2) ht1
      [ht-put key val ht1 ..])))

(constrain ht-contains (\ r (?(a b d) `:(function (,:a (hash-table ,:a ,:b) !:Ref:,;b) ,:d):r r)))

(function ht-contains (key ht out)
  (let (bucket-idx [rem [(@ ht-hash-func ht) key] (@ ht-bucket-count ht)])
  (let (bucket ($(loc(unit)bucket-idx(@ ht-values ht))))
  (loop find-end (bucket bucket)
    (if [nil? bucket]
      (false)
      ((values? .:k .:v) [@car bucket]
        (if [(@ ht-equals-func ht) key k]
          (do [set out v] (true))
          {find-end [@cdr bucket]}) (~)))))))

(constrain ht-get (\ r (?(a b) `:(function (,:a (hash-table ,:a ,:b)) ,:b):r r)))

(function ht-get (key ht)
  (let (bucket-idx [rem [(@ ht-hash-func ht) key] (@ ht-bucket-count ht)])
  (let (bucket ($(loc(unit)bucket-idx(@ ht-values ht))))
  (loop find-end (bucket bucket)
    ((values? .:k .:v) [@car bucket]
      (if [(@ ht-equals-func ht) key k]
        v
        {find-end [@cdr bucket]}) (~))))))

(constrain ht-iter-key (\ r (?(a b c d) `:(function ((continuation ((! iterator ,:b ,:c))) ,:a (hash-table ,:a ,:b)) ,:d):r r)))

(function ht-iter-key (ret key ht)
  {ret (continuation cont (end ctx recv)
    (let (bucket-idx [rem [(@ ht-hash-func ht) key] (@ ht-bucket-count ht)])
    (let (bucket ($(loc(unit)bucket-idx(@ ht-values ht))))
    (loop find-end (bucket bucket) (recv recv) (ctx ctx)
      (if [nil? bucket]
        {end ctx}
        ((values? .:k .:v) [@car bucket]
          (if [(@ ht-equals-func ht) key k]
            (cps {recv next ctx v}
              (next (new-recv new-ctx) {find-end [@cdr bucket] [cast new-recv] new-ctx}))
            {find-end [@cdr bucket] recv ctx}) (~)))))))})

(constrain ht-remove (\ r (?(a b d) `:(function (,:a (hash-table ,:a ,:b)) ,:d):r r)))

(function ht-remove (key ht)
  (let (bucket-idx [rem [(@ ht-hash-func ht) key] (@ ht-bucket-count ht)])
  (let (bucket (loc(unit)bucket-idx(@ ht-values ht)))
  (loop find-end (bucket bucket)
    (if [nil? $:bucket]
      (~)
      ((values? .:k .:v) [@car $:bucket]
        (if [(@ ht-equals-func ht) key k]
          (do [set bucket [@cdr $:bucket]] [set- (& ht-element-count ht) #:1])
          {find-end (& cdr $:bucket)}) (~)))))))

(constrain ht-removeall (\ r (?(a b d) `:(function ((hash-table ,:a ,:b)) ,:d):r r)))

(function ht-removeall (ht)
  (for (bucket-idx (%:range #:0 (@ ht-bucket-count ht))) (~) (do
    (let (bucket (loc(unit)bucket-idx(@ ht-values ht))) [set bucket nil])
    [set (& ht-element-count ht) #:0])))

(constrain ht-iter \:r:(?(a b c d) (`(function ((continuation ((! iterator (! tuple- ,:a ,:d) ,:b))) (hash-table ,:a ,:d)) ,:c)r)r))

(function ht-iter (ret ht)
  {ret (continuation cont (end ictx recv)
    ((tuple? .:recv .:ictx)
      (fold (ctx (tuple recv ictx)) (i (%:range #:0 (@ ht-bucket-count ht)))
        (fold (ctx ctx) (assoc (%:list-iter ($(loc (unit) i (@ ht-values ht)))))
          ((tuple? .:recv .:ictx) ctx
            ((values? .:key .:val) assoc
              (cps {recv next ictx (tuple key val)}
                (next (new-recv new-ctx) (tuple [cast new-recv] new-ctx))) (~)) (~)))) {end ictx} (~)))})

(-- Puts all the given associations into the given hash table. Does the following
  transformation.
  (ht-putall (ht ..) (k1 v1) (k2 v2) ... (kN vN))
  ->
  [ht-put kN vN [... [ht-put k2 v2 [ht-put k1 v1 ht ..] ..] ...] ..])

(function ht-putall (l r)
  (loop build-expr (expr [@ffst l]) (rem [@rst l])
    (if [emt? rem] expr
      {build-expr [lllllst (` invoke r) (` ht-put r) [@ffst rem] [@frfst rem] expr [@rfst l] r] [@rst rem]})))

(-- Find a value under the given key in the given hash table satisfying the given predicate:
  (ht-find (value key ht) expr)
  ->
  (let (ht-find.key key) (ht-find.ht ht)
  (let (ht-find.bucket-idx [rem [(@ ht-hash-func ht-find.ht) ht-find.key] (@ ht-bucket-count ht-find.ht)])
  (let (ht-find.bucket ($(loc(unit)ht-find.bucket-idx(@ ht-values ht-find.ht))))
  (loop ht-find.find-end (ht-find.bucket ht-find.bucket)
    (if [nil? ht-find.bucket]
      (false)
      ((values? .:ht-find.k .:value) [@car ht-find.bucket]
        (if (and [(@ ht-equals-func ht) ht-find.key ht-find.k] expr)
          (true)
          {ht-find.find-end [@cdr ht-find.bucket]}) (~))))))))

(function ht-find (l r)
  (`(let (ht-find.key (,[@frfst l])) (ht-find.ht (,[@frrfst l]))
    (let (ht-find.bucket-idx [rem [(@ ht-hash-func ht-find.ht) ht-find.key] (@ ht-bucket-count ht-find.ht)])
    (let (ht-find.bucket ($(loc(unit)ht-find.bucket-idx(@ ht-values ht-find.ht))))
    (loop ht-find.find-end (ht-find.bucket ht-find.bucket)
      (if [nil? ht-find.bucket]
        (false)
        ((values? .:ht-find.k .:(,[@ffst l])) [@car ht-find.bucket]
          (if (and [(@ ht-equals-func ht-find.ht) ht-find.key ht-find.k] (,[@frst l]))
            (true)
            {ht-find.find-end [@cdr ht-find.bucket]}) (~)))))))r))

(constrain hash-str (\ r (?(a) `:(function (string) ,:a):r r)))

(function hash-str (str)
  (loop do-hash (i #:0) (h #:0)
    (let (ch [getb [+ str i]])
      (if ch
        (let (h [+ [<< h #:4] ch])
        (let (g [band h 0x:F0000000])
        (let (h (if g [bxor h [>> g #:24]] h))
        (let (h [band h [bnot g]])
          {do-hash [+ i #:1] h})))) h))))

(constrain hash-ptr (\ r (?(a b) `:(function (,:a) ,:b):r r)))

(function hash-ptr (ptr) ptr)
