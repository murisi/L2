(ignore ELF-64 Object File Format)

  (ignore Data representation: ELF64 Data Types)

    (function elf64-addr (l r) [=# #8 r])

    (function elf64-off (l r) [=# #8 r])

    (function elf64-half (l r) [=# #2 r])

    (function elf64-word (l r) [=# #4 r])

    (function elf64-sword (l r) [=# #4 r])

    (function elf64-xword (l r) [=# #8 r])

    (function elf64-sxword (l r) [=# #8 r])

  (ignore File header: ELF-64 Header)

    (function elf64-ehdr (l r) [=# #64 r])

    (function e-ident (l r) [property #0 #16 (\ r (`(; static~ e-ident elf64-ehdr)r)) l r])

    (function e-type (l r) [property #16 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-machine (l r) [property #18 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-version (l r) [property #20 #4 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-entry (l r) [property #24 #8 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-phoff (l r) [property #32 #8 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-shoff (l r) [property #40 #8 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-flags (l r) [property #48 #4 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-ehsize (l r) [property #52 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-phentsize (l r) [property #54 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-phnum (l r) [property #56 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-shentsize (l r) [property #58 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-shnum (l r) [property #60 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

    (function e-shstrndx (l r) [property #62 #2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)) l r])

  (ignore File header: ELF Identification, e-ident)

    (function ei-mag0 (l r) [property #0 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-mag1 (l r) [property #1 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-mag2 (l r) [property #2 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-mag3 (l r) [property #3 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-class (l r) [property #4 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-data (l r) [property #5 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-version (l r) [property #6 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-osabi (l r) [property #7 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-abiversion (l r) [property #8 #1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)) l r])

    (function ei-pad (l r) [=# #9 r])

    (function ei-nident (l r) [=# #16 r])

    (function elfmag0 (l r) [=# (hex 7F) r])

    (function elfmag1 (l r) [=# (char E) r])

    (function elfmag2 (l r) [=# (char L) r])

    (function elfmag3 (l r) [=# (char F) r])

  (ignore File header: Object File Classes, e-ident > ei-class)

    (function elfclass32 (l r) [=# #1 r])

    (function elfclass64 (l r) [=# #2 r])

  (ignore File header: Data Encodings, e-ident > ei-data)

    (function elfdata2lsb (l r) [=# #1 r])

    (function elfdata3msb (l r) [=# #2 r])

  (ignore File header: Operating System and ABI Identifiers, e-ident > ei-osabi)

    (function elfosabi-sysv (l r) [=# #0 r])

    (function elfosabi-hpux (l r) [=# #1 r])

    (function elfosabi-standalone (l r) [=# #255 r])

  (ignore File header: Object File Types, e-type)

    (function et-none (l r) [=# #0 r])

    (function et-rel (l r) [=# #1 r])

    (function et-exec (l r) [=# #2 r])

    (function et-dyn (l r) [=# #3 r])

    (function et-core (l r) [=# #4 r])

    (function et-loos (l r) [=# (hex FE00) r])

    (function et-hios (l r) [=# (hex FEFF) r])

    (function et-loproc (l r) [=# (hex FF00) r])

    (function et-hiproc (l r) [=# (hex FFFF) r])

  (ignore Sections: Section indicies)

    (function shn-undef (l r) [=# #0 r])

    (function shn-loproc (l r) [=# (hex FF00) r])

    (function shn-hiproc (l r) [=# (hex FF1F) r])

    (function shn-loos (l r) [=# (hex FF20) r])

    (function shn-hios (l r) [=# (hex FF3F) r])

    (function shn-abs (l r) [=# (hex FFF1) r])

    (function shn-common (l r) [=# (hex FFF2) r])

  (ignore Sections: Section header entries)

    (function elf64-shdr (l r) [=# #64 r])

    (function sh-name (l r) [property #0 #4 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-type (l r) [property #4 #4 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-flags (l r) [property #8 #8 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-addr (l r) [property #16 #8 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-offset (l r) [property #24 #8 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-size (l r) [property #32 #8 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-link (l r) [property #40 #4 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-info (l r) [property #44 #4 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-addralign (l r) [property #48 #8 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

    (function sh-entsize (l r) [property #56 #8 (\ r (`(; static~ (,[var r]) elf64-shdr)r)) l r])

  (ignore Sections: Section Types)

    (function sht-null (l r) [=# #0 r])

    (function sht-progbits (l r) [=# #1 r])

    (function sht-symtab (l r) [=# #2 r])

    (function sht-strtab (l r) [=# #3 r])

    (function sht-rela (l r) [=# #4 r])

    (function sht-hash (l r) [=# #5 r])

    (function sht-dynamic (l r) [=# #6 r])

    (function sht-note (l r) [=# #7 r])

    (function sht-nobits (l r) [=# #8 r])

    (function sht-rel (l r) [=# #9 r])

    (function sht-shlib (l r) [=# #10 r])

    (function sht-dynsym (l r) [=# #11 r])

    (function sht-loos (l r) [=# (hex 60000000) r])

    (function sht-hios (l r) [=# (hex 6FFFFFFF) r])

    (function sht-loproc (l r) [=# (hex 70000000) r])

    (function sht-hiproc (l r) [=# (hex 7FFFFFFF) r])

  (ignore Sections: Section Attributes, sh-flags)

    (function shf-write (l r) [=# (hex 1) r])

    (function shf-alloc (l r) [=# (hex 2) r])

    (function shf-execinstr (l r) [=# (hex 4) r])

    (function shf-maskos (l r) [=# (hex 0F000000) r])

    (function shf-maskproc (l r) [=# (hex F0000000) r])

  (ignore Symbol Table: ELF-64 Symbol Table Entry)

    (function elf64-sym (l r) [=# #24 r])

    (function st-name (l r) [property #0 #4 (\ r (`(; static~ (,[var r]) elf64-sym)r)) l r])

    (function st-info (l r) [property #4 #1 (\ r (`(; static~ (,[var r]) elf64-sym)r)) l r])

    (function st-other (l r) [property #5 #1 (\ r (`(; static~ (,[var r]) elf64-sym)r)) l r])

    (function st-shndx (l r) [property #6 #2 (\ r (`(; static~ (,[var r]) elf64-sym)r)) l r])

    (function st-value (l r) [property #8 #8 (\ r (`(; static~ (,[var r]) elf64-sym)r)) l r])

    (function st-size (l r) [property #16 #8 (\ r (`(; static~ (,[var r]) elf64-sym)r)) l r])

  (ignore Symbol Table: Symbol Bindings)

    (function stb-local (l r) [=# #0 r])

    (function stb-global (l r) [=# #1 r])

    (function stb-weak (l r) [=# #2 r])

    (function stb-loos (l r) [=# #10 r])

    (function stb-hios (l r) [=# #12 r])

    (function stb-loproc (l r) [=# #13 r])

    (function stb-hiproc (l r) [=# #15 r])

    (function elf64-st-bind (l r) (`[>> (,[@fst l]) #4]r))

    (function elf64-st-type (l r) (`[band (,[@fst l]) #15]r))

    (function elf64-st-info (l r) (`[+ [<< (,[@fst l]) #4] [band (,[@frst l]) #15]]r))

  (ignore Symbol Table: Symbol Types)

    (function stt-notype (l r) [=# #0 r])

    (function stt-object (l r) [=# #1 r])

    (function stt-func (l r) [=# #2 r])

    (function stt-section (l r) [=# #3 r])

    (function stt-file (l r) [=# #4 r])

    (function stt-loos (l r) [=# #10 r])

    (function stt-hios (l r) [=# #12 r])

    (function stt-loproc (l r) [=# #13 r])

    (function stt-hiproc (l r) [=# #15 r])

  (ignore Relocations: ELF-64 Relocation Entries)

    (function elf64-rel (l r) [=# #16 r])

    (function elf64-rela (l r) [=# #24 r])

    (function r-offset (l r) [property #0 #8 (\ r (`(; static~ (,[var r]) elf64-rela)r)) l r])

    (function r-info (l r) [property #8 #8 (\ r (`(; static~ (,[var r]) elf64-rela)r)) l r])

    (function r-addend (l r) [property #16 #8 (\ r (`(; static~ (,[var r]) elf64-rela)r)) l r])

    (function elf64-r-sym (l r) (`[>> (,[@fst l]) #32]r))

    (function elf64-r-type (l r) (`[band (,[@fst l]) (hex FFFFFFFF)]r))

    (function elf64-r-info (l r) (`[+ [<< (,[@fst l]) #32] [band (,[@frst l]) (hex FFFFFFFF)]]r))

  (ignore System V Application Binary Interface: AMD64 Architecture Processor Supplement)

  (ignore Machine Information: Processor Identification)

    (function em-x86-64 (l r) [=# #62 r])

  (ignore Sections: Section Flags)

    (function shf-x86-64-large (l r) [=# (hex 10000000) r])

  (ignore Sections: Section Types)

    (function sht-x86-64-unwind (l r) [=# (hex 70000001) r])

  (ignore Relocation: Relocation Types)

    (function r-x86-64-none (l r) [=# #0 r])

    (function r-x86-64-64 (l r) [=# #1 r])

    (function r-x86-64-pc32 (l r) [=# #2 r])

    (function r-x86-64-got32 (l r) [=# #3 r])

    (function r-x86-64-plt32 (l r) [=# #4 r])

    (function r-x86-64-copy (l r) [=# #5 r])

    (function r-x86-64-glob-dat (l r) [=# #6 r])

    (function r-x86-64-jump-slot (l r) [=# #7 r])

    (function r-x86-64-relative (l r) [=# #8 r])

    (function r-x86-64-gotpcrel (l r) [=# #9 r])

    (function r-x86-64-32 (l r) [=# #10 r])

    (function r-x86-64-32s (l r) [=# #11 r])

    (function r-x86-64-16 (l r) [=# #12 r])

    (function r-x86-64-pc16 (l r) [=# #13 r])

    (function r-x86-64-8 (l r) [=# #14 r])

    (function r-x86-64-pc8 (l r) [=# #15 r])

    (function r-x86-64-dtpmod64 (l r) [=# #16 r])

    (function r-x86-64-dtpoff64 (l r) [=# #17 r])

    (function r-x86-64-tposs64 (l r) [=# #18 r])

    (function r-x86-64-tlsgd (l r) [=# #19 r])

    (function r-x86-64-tlsld (l r) [=# #20 r])

    (function r-x86-64-dtpoff32 (l r) [=# #21 r])

    (function r-x86-64-gottpoff (l r) [=# #22 r])

    (function r-x86-64-tpoff32 (l r) [=# #23 r])

    (function r-x86-64-pc64 (l r) [=# #24 r])

    (function r-x86-64-gotoff64 (l r) [=# #25 r])

    (function r-x86-64-gotpc32 (l r) [=# #26 r])

    (function r-x86-64-size32 (l r) [=# #32 r])

    (function r-x86-64-size64 (l r) [=# #33 r])

    (function r-x86-64-gotpc32-tlsdesc (l r) [=# #34 r])

    (function r-x86-64-tlsdesc-call (l r) [=# #35 r])

    (function r-x86-64-tlsdesc (l r) [=# #36 r])

    (function r-x86-64-irelative (l r) [=# #37 r])

    (function r-x86-64-relative64 (l r) [=# #38 r])

    (function r-x86-64-gotpcrelx (l r) [=# #41 r])

    (function r-x86-64-rex-gotpcrelx (l r) [=# #42 r])

(ignore
  ELF-64 Object File Format structures but with addresses instead of offsets and indicies.
  This serves to ease the construction and parsing of ELF-64 Object Files.)
  
  (ignore File header and body: ELF-64 Header and Body)

    (function linked-elf64-e (l r) [=# #40 r])

    (function lkde-raw (l r) [property #0 #8 (\ r (`(; static~ elf64-ehdr linked-elf64-e)r)) l r])

    (function lkde-ph (l r) [property #8 #8 (\ r (`(; static~ (list linked-elf64-ph) linked-elf64-e)r)) l r])

    (function lkde-sh (l r) [property #16 #8 (\ r (`(; static~ (list linked-elf64-sh) linked-elf64-e)r)) l r])

    (function lkde-shstr (l r) [property #24 #8 (\ r (`(; static~ linked-elf64-sh linked-elf64-e)r)) l r])
    
    (function lkde-undef (l r) [property #32 #8 (\ r (`(; static~ linked-elf64-sh linked-elf64-e)r)) l r])
  
  (ignore Sections: Section header entries)

    (function linked-elf64-sh (l r) [=# #48 r])
    
    (function lkdsh-raw (l r) [property #0 #8 (\ r (`(; static~ elf64-shdr linked-elf64-sh)r)) l r])
    
    (function lkdsh-name (l r) [property #8 #8 (\ r (`(; static~ linked-elf64-strtab linked-elf64-sh)r)) l r])

    (function lkdsh-offset (l r) [property #16 #8 (\ r (`(; static~ (,[var r]) linked-elf64-sh)r)) l r])
    
    (function lkdsh-symtab (l r) [property #16 #8 (\ r (`(; static~ (list linked-elf64-sym) linked-elf64-sh)r)) l r])
    
    (function lkdsh-strtab (l r) [property #16 #8 (\ r (`(; static~ (list linked-elf64-strtab) linked-elf64-sh)r)) l r])
    
    (function lkdsh-rela (l r) [property #16 #8 (\ r (`(; static~ (list linked-elf64-rela) linked-elf64-sh)r)) l r])

    (function lkdsh-link (l r) [property #24 #8 (\ r (`(; static~ linked-elf64-sh linked-elf64-sh)r)) l r])

    (function lkdsh-rela-info (l r) [property #32 #8 (\ r (`(; static~ linked-elf64-sh linked-elf64-sh)r)) l r])
    
    (function lkdsh-ndx (l r) [property #40 #8 (\ r (`(; static~ (,[var r]) linked-elf64-sh)r)) l r])
  
  (ignore Symbol Table: ELF-64 Symbol Table Entry)

    (function linked-elf64-sym (l r) [=# #40 r])
    
    (function lkdst-raw (l r) [property #0 #8 (\ r (`(; static~ elf64-sym linked-elf64-sym)r)) l r])

    (function lkdst-name (l r) [property #8 #8 (\ r (`(; static~ linked-elf64-strtab linked-elf64-sym)r)) l r])

    (function lkdst-sh (l r) [property #16 #8 (\ r (`(; static~ linked-elf64-sh linked-elf64-sym)r)) l r])
    
    (function lkdst-ndx (l r) [property #24 #8 (\ r (`(; static~ (,[var r]) linked-elf64-sym)r)) l r])
    
    (function lkdst-other (l r) [property #32 #8 (\ r (`(; static~ (,[var r]) linked-elf64-sym)r)) l r])
  
  (ignore Relocations: ELF-64 Relocation Entries)

    (function linked-elf64-rela (l r) [=# #16 r])

    (function lkdr-raw (l r) [property #0 #8 (\ r (`(; static~ elf64-rela linked-elf64-rela)r)) l r])

    (function lkdr-info-sym (l r) [property #8 #8 (\ r (`(; static~ linked-elf64-sym linked-elf64-rela)r)) l r])
  
  (ignore String Table: ELF-64 String Table Entry)
  
    (function linked-elf64-strtab (l r) [=# #16 r])
    
    (function lkdstrt-raw (l r) [property #0 #8 (\ r (`(; static~ string linked-elf64-strtab)r)) l r])
    
    (function lkdstrt-ndx (l r) [property #8 #8 (\ r (`(; static~ (,[var r]) linked-elf64-strtab)r)) l r])

(constrain make-lkdstrt (\ r (?(a) (`(function (string region ,a) linked-elf64-strtab)r)r)))

(function make-lkdstrt (str buf hdl)
  (substitute (.. buf hdl)
    (record (lkdstrt [region-alloc (linked-elf64-strtab) ..])
      (lkdstrt-raw str))))

(constrain make-lkdr (\ r (?(a) (`(function (linked-elf64-sym region ,a) linked-elf64-rela)r)r)))

(function make-lkdr (info-sym buf hdl)
  (substitute (.. buf hdl)
    (record (lkdr [region-alloc (linked-elf64-rela) ..])
      (lkdr-raw [region-alloc (elf64-rela) ..])
      (lkdr-info-sym info-sym))))

(constrain make-lkdst (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,a) linked-elf64-sym)r)r)))

(function make-lkdst (name sh buf hdl)
  (substitute (.. buf hdl)
    (record (lkdst [region-alloc (linked-elf64-sym) ..])
      (lkdst-raw [region-alloc (elf64-sym) ..])
      (lkdst-name name)
      (lkdst-sh sh))))

(constrain make-lkdsymtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-sym) region ,a) linked-elf64-sh)r)r)))

(function make-lkdsymtab (name link symtab buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-symtab)))
      (lkdsh-name name)
      (lkdsh-link link)
      (lkdsh-symtab symtab))))

(constrain make-lkdstrtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-strtab) region ,a) linked-elf64-sh)r)r)))

(function make-lkdstrtab (name link strtab buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-strtab)))
      (lkdsh-name name)
      (lkdsh-strtab strtab)
      (lkdsh-link link))))

(constrain make-lkdrela
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh linked-elf64-sh (list linked-elf64-rela) region ,a) linked-elf64-sh)r)r)))

(function make-lkdrela (name link info rela buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-rela)))
      (lkdsh-name name)
      (lkdsh-rela rela)
      (lkdsh-link link)
      (lkdsh-rela-info info))))

(constrain make-lkds
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,a) linked-elf64-sh)r)r)))

(function make-lkds (name link buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-name name)
      (lkdsh-link link))))

(constrain make-lkde
  (\ r (?(a) (`(function ((list linked-elf64-ph) (list linked-elf64-sh) linked-elf64-sh linked-elf64-sh region ,a)
    linked-elf64-e)r)r)))

(function make-lkde (ph sh undef shstr buf hdl)
  (substitute (.. buf hdl)
    (record (lkde [region-alloc (linked-elf64-e) ..])
      (lkde-raw [region-alloc (elf64-ehdr) ..])
      (lkde-ph ph)
      (lkde-sh sh)
      (lkde-undef undef)
      (lkde-shstr shstr))))
