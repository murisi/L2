(ignore
  The following functions are abbreviations of sequences of list operations that are
  frequently useful when working with s-expressions.)

(function @frst (l) [@fst [@rst l]])

(function @ffrst (l) [@fst [@frst l]])

(function @frfrst (l) [@fst [@rst [@frst l]]])

(function @rrst (l) [@rst [@rst l]])

(function @rrrst (l) [@rst [@rrst l]])

(function @rrrrst (l) [@rst [@rrrst l]])

(function @rrrrrst (l) [@rst [@rrrrst l]])

(function @rfst (l) [@rst [@fst l]])

(function @frfst (l) [@fst [@rfst l]])

(function @frrfst (l) [@fst [@rst [@rfst l]]])

(function @frrst (l) [@fst [@rst [@rst l]]])

(function @frrrst (l) [@fst [@rst [@rst [@rst l]]]])

(function @frrrrst (l) [@fst [@rst [@rst [@rst [@rst l]]]]])

(function @frrrrrst (l) [@fst [@rst [@rst [@rst [@rst [@rst l]]]]]])

(function @frrrrrrst (l) [@fst [@rst [@rst [@rst [@rst [@rst [@rst l]]]]]]])

(function @frrrrrrrst (l) [@fst [@rst [@rst [@rst [@rst [@rst [@rst [@rst l]]]]]]]])

(function @ffst (l) [@fst [@fst l]])

(function llst (a b c r) [lst a [lst b c r] r])

(function lllst (a b c d r) [lst a [llst b c d r] r])

(function llllst (a b c d e r) [lst a [lllst b c d e r] r])

(function lllllst (a b c d e f r) [lst a [llllst b c d e f r] r])

(function llllllst (a b c d e f g r) [lst a [lllllst b c d e f g r] r])

(function lllllllst (a b c d e f g h r) [lst a [llllllst b c d e f g h r] r])

(function llllllllst (a b c d e f g h i r) [lst a [lllllllst b c d e f g h i r] r])

(function lllllllllst (a b c d e f g h i j r) [lst a [llllllllst b c d e f g h i j r] r])

(ignore
  The following function provides an abbreviation for getting a value from a memory
  address. It implements the transformation $a -> [get a].)

(function $ (var r)
  [llst
    [llllllst -i- -n- -v- -o- -k- -e- emt r]
    [lllst -g- -e- -t- emt r]
    var r])

(constrain get (\ r (with-vars (a) (`(function ((ref ,a)) ,a)r)r)))

(constrain set (\ r (with-vars (a) (`(function ((ref ,a) ,a) ())r)r)))

(function meta:lookup-var (key map)
  (with return
    {(continuation lookup (map)
      (if [emt? map]
        {return emt}
      (if [var= key [@ffst map]]
        {return [@fst map]}
        {lookup [@rst map]}))) map}))

(function meta:map-values (map r)
  (with return
    {(continuation extract (map values)
      (if [emt? map]
        {return values}
        {extract [@rst map] [lst [@frfst values] values r]})) map emt}))

(function meta:bind1 (tuple fun)
  [fun [@fst tuple]])

(function meta:bind5 (tuple fun)
  [fun [@fst tuple] [@frst tuple] [@frrst tuple] [@frrrst tuple] [@frrrrst tuple]])

(function meta:bind6 (tuple fun)
  [fun [@fst tuple] [@frst tuple] [@frrst tuple] [@frrrst tuple] [@frrrrst tuple] [@frrrrrst tuple]])

(function meta:bind7 (tuple fun)
  [fun [@fst tuple] [@frst tuple] [@frrst tuple] [@frrrst tuple] [@frrrrst tuple] [@frrrrrst tuple] [@frrrrrrst tuple]])

(ignore
  The following function generates the L2 code to generate a fragment corresponding to the
  supplied fragment. Known as backquote in other languages.)

(function quote-aux (s t map state r)
  (if [emt? s] [lllllst [lllst -e- -m- -t- emt r] t map state r emt r]
  
  (if [and? s] [lllllst [lllst -a- -n- -d- emt r] t map state r emt r]
  
  (if [or? s] [lllllst [llst -o- -r- emt r] t map state r emt r]
  
  (if [var? s]
    [meta:bind6 [llllllst [meta:lookup-var s map] s t map state r emt r] (function _(res s t map state r)
      (if [emt? res]
        [lllllst state t [lst [llst s state emt r] map r] [meta:reverse [lst -1- [meta:reverse state r]r]r] r emt r]
        [lllllst [@frst res] t map state r emt r]))]
  
  (if (if [emt? s] #0 (if [token? s] #0 (if [token? [@fst s]]
    (if [char= [@ffst s] -`-] [emt? [@rfst s]] #0) #0)))
        [meta:bind6 [lst t [quote-aux [@frst s] [@frrst s] map state r] r]
          (function _(outer-t s t map state r) [quote-aux s outer-t map state r])]
  
  (if (if [emt? s] #0 (if [token? s] #0 (if [token? [@fst s]]
    (if [char= [@ffst s] -,-] [emt? [@rfst s]] #0) #0)))
        [lllllst [@frst s] t map state r emt r]
  
  (if (if [emt? s] #0 (if [token? s] #0 (if [token? [@fst s]]
    (if [char= [@ffst s] -;-] [emt? [@rfst s]] #0) #0)))
        [meta:bind6 [lst s [quote-aux [@rrst s] t map state r] r]
          (function _(outer-s s t map state r)
            [lllllst [llllst [llllllst -i- -n- -v- -o- -k- -e- emt r]
              [@frst outer-s] s t emt r] t map state r emt r])]

  [meta:bind6
    [lst s (if [token? s]
      [lllllst [lllst --- [@fst s] --- emt r] t map state r emt r]
      [quote-aux [@fst s] t map state r]) r]
    (function _(s inner-s t map state r)
      [meta:bind7 [llst s inner-s [quote-aux [@rst s] t map state r] r]
        (function _(s inner-s inner-s2 t map state r)
          [lllllst [lllllst [llllllst -i- -n- -v- -o- -k- -e- emt r]
            [lllst -l- -s- -t- emt r] inner-s inner-s2 t emt r] t map state r emt r])])]))))))))

(ignore Quote macro that only works for fragments not containing variables.)

(function quote (l r)
  [@fst [quote-aux [@fst l] [@frst l] emt [llllllst -q- -u- -o- -t- -e- -:- emt r] r]])

(ignore Quote macro that works for fragments containing variables.)

(function ` (l r)
  [meta:bind5 [quote-aux [@fst l] [@frst l] emt (quote quote: r) r]
    (function _(s t map state r)
      (quote(with quote:return
        {(continuation quote:cont (,[meta:map-values map r]) {quote:return ,s}),
          [meta:map3 map t r (function _(elt t r) (quote[var ,t]r)) r]})r))])

(ignore
  The following function generates code to create variables and bind them. It does the
  following transformation:
  
  (with-vars (vars ...) expr region)
  ->
  (let (var0 [var region]) ... (varN [var region]) expr))

(function with-vars (l r)
  (let (bindings [meta:map3 [@fst l] [@frrst l] r (\ e s r (`(,e [var ,s])r)) r])
    [lst (` let r) [meta:reverse [lst [@frst l] [meta:reverse bindings r] r] r] r]))

(ignore The following function checks if the tokens a and b are equal.)

(function token= (a b)
  (loop check (a a) (b b)
    (if (cand [emt? a] [emt? b])
      (true)
    (if (cor [emt? a] [emt? b])
      (false)
    (if [char= [@fst a] [@fst b]]
      {check [@rst a] [@rst b]}
      (false))))))

(ignore
  The following function concatenates lists a and b. A part of the constructed list will
  lie in the region r.)

(function meta:concat (a b r)
  (loop do-prepend (rem-list [meta:reverse a r]) (constr b)
    (if [emt? rem-list]
      constr
      {do-prepend [@rst rem-list] [lst [@fst rem-list] constr r]})))

(ignore
  The following macro does the following transformation:
  (substitute (tkn repls ...) frag)
  ->
  frag but with the fragments repls inserted in order at all the places that the token tkn
  occurred. An example usage is when the arguments a group of functions are called with
  have a common sublist.)

(function substitute (l r)
  [(function aux (frag fnd repl r)
      (if (cor [token? frag] [emt? frag])
        frag
        (if (cand [token? [@fst frag]] [token= [@fst frag] fnd])
          [meta:concat repl [@rst frag] r]
          [lst [aux [@fst frag] fnd repl r] [aux [@rst frag] fnd repl r] r])))
    [@frst l] [@ffst l] [@rfst l] r])

(ignore
  A set of macros to provide struct functionality in L2. The most naive way
  to do structs in L2 would be to create a getter function, setter function,
  and offset calculation function for every field where these functions
  simply access the desired memory locations. However this solution is
  untenable because of the amount of boilerplate that one would have to write.
  The approach taken in the below macros is to aggregate the offset, size,
  getter, and setter of each field into a higher-order macro that supplies
  this information into any macro that is passed to it. This way, generic
  getter, setter, address-of, offset-of, and sizeof functions can be defined
  once and used on any field.)

(ignore
  The following function is a macro for getting the offset of a field of a struct.
  The macro expands into a macro invocation of the supplied field (the second
  item in the fragment l), passing into it offset-aux (the macro that actually
  produces the offset of the field).)

(function offset-of (l r) (`((,[@fst l]) offset-of-aux)r))

(ignore
  This function is not to be called directly. It returns a fragment representing
  the offset of the field. That is, it returns the first item in the fragment l.)
  
(function offset-of-aux (l r) [@fst l])

(function size-of (l r) (`((,[@fst l]) size-of-aux)r))

(function size-of-aux (l r) [@frst l])

(function getter-of (l r) (`((,[@fst l]) getter-of-aux)r))

(function getter-of-aux (l r) [@frrst l])

(function setter-of (l r) (`((,[@fst l]) setter-of-aux)r))

(function setter-of-aux (l r) [@frrrst l])

(ignore
  The following function is a macro for getting the address of a field of a struct.
  The macro expands into a macro invocation of the supplied field (the second
  item in the fragment l), passing into it &-aux (the macro that will generate
  the actual invocation that calculates the address of the field) and the address of
  the struct (the first item in the fragment l).)

(function & (l r) (`((,[@fst l]) &-aux (,[@frst l]))r))

(ignore
  This function is not to be called directly. It generates the actual
  invocation to calculate the address of the field. When macro-called, it
  adds the offset (the first item in the fragment l) to the base
  (the fifth item in the fragment l).)

(function &-aux (l r)
  (`(with &-aux:ret
      (let (@-aux:obj (,[@frrrrrst l]))
        {(constrain (continuation @-aux:cont (pseudo prop-ref obj) {&-aux:ret prop-ref})
            (\ s (with-vars (a b) (`(continuation (((,[(,[@frrrrst l]) s]) (@ ,a ,b), and) (ref ,a) ,b))s)s)))
          (ignore) [+ @-aux:obj (,[@fst l])] @-aux:obj}))r))

(ignore
  The following function is a macro for getting the field of a struct. The
  macro expands into a macro invocation of the supplied field (the second
  item in the fragment l), passing into it @-aux (the macro that will generate
  the actual invocation that gets the field) and the address of the struct (the
  first item in the fragment l).)
  
(function @ (l r) (`((,[@fst l]) @-aux (,[@frst l]))r))

(ignore
  This function is not to be called directly. It generates the actual
  invocation to get the field. When macro-called, it invokes the getter
  function (the fourth item in the fragment l) with an address formed by
  adding the offset (the first item in the fragment l) to the base
  (the fifth item in the fragment l).)

(function @-aux (l r)
  (`(with @-aux:ret
      (let (@-aux:obj (,[@frrrrrst l]))
        {(constrain (continuation @-aux:cont (pseudo prop obj) {@-aux:ret prop})
            (\ s (with-vars (a b) (`(continuation (((,[(,[@frrrrst l]) s]) (@ ,a ,b), and) ,a ,b))s)s)))
          (ignore) [(,[@frrst l]) [+ @-aux:obj (,[@fst l])]] @-aux:obj}))r))

(ignore
  The following function is a macro for setting the field of a struct. The
  macro expands into a macro invocation of the supplied field (the second
  item in the fragment l), passing into it setf-aux (the macro that will generate
  the actual invocation that sets the field), the address of the struct (the
  first item in the fragment l), and the new value of the field (the third
  item in the fragment l).)

(function setf (l r) (`((,[@fst l]) setf-aux (,[@frst l]) (,[@frrst l]))r))

(ignore
  This function is not to be called directly. It generates the actual
  invocation to set the field. When macro-called, it invokes the setter
  function (the fourth item in the fragment l) with an address formed by
  adding the offset (the first item in the fragment l) to the base
  (the fifth item in the fragment l) and a value (the sixth item in the
  fragment l).)

(function setf-aux (l r)
  (`(with setf-aux:ret
      {(constrain (continuation setf-aux:cont (pseudo prop obj)
            {setf-aux:ret [(,[@frrrst l]) [+ obj (,[@fst l])] prop]})
          (\ s (with-vars (a b) (`(continuation (((,[(,[@frrrrst l]) s]) (@ ,a ,b), and) ,a ,b))s)s)))
        (ignore) (,[@frrrrrrst l]) (,[@frrrrrst l])})r))

(ignore
  The following function is a helper function for generating the fields of
  structs. All that it does is create a macro invocation on the first token
  in the fragment l supplying to it the offset, size, getter, and setter of
  the field in addition to the rest of the fragment l.)

(function property (offset size sig l r)
  [llllllst [@fst l] [=# offset r] [=# size r]
    (switch = size (#1 (` get1b r)) (#2 (` get2b r)) (#4 (` get4b r)) (#8 (` get8b r)) (`(ignore)r))
    (switch = size (#1 (` set1b r)) (#2 (` set2b r)) (#4 (` set4b r)) (#8 (` set8b r)) (`(ignore)r))
    [=# sig r] [@rst l] r])

(ignore
  The following function provides a method for ignoring L2 code. It is being used for this
  comment to work.)

(function ignore (l r) [=# (hex DEADBEEF) r])

(ignore Takes a list and produces a list of unique tokens that are prefixed by the given seed.)

(function meta:label (list seed r) (with return
  {(continuation aux (labels state list)
    (if (not [emt? list])
      {aux [lst state labels r]
        [meta:reverse [lst -1- [meta:reverse state r]r]r]
        [@rst list]}
      {return [meta:reverse labels r]})) emt seed list}))

(ignore
  Does the transformation (values storer arg1 arg2 ...) -> (storer values:stor arg1 arg2 ...).
  (values storer arg1 arg2 ...) has the type (values sig1 sig2 ...) where sigj is the signature
  of argj.)

(function values (l r)
  (let (storer [@fst l]) (args [@rst l])
  (let (params [meta:label args (` values:param r) r])
        (vars [meta:label args (` values:var r) r])
  (let (unquoted-vars [meta:map2 vars r (\ l r [llst [lst -,- emt r] l emt r]) r])
    (`(with values:return
        (,[llst (` jump r) [llllst (` continuation r) (` values:eval r) params [lllst (` jump r) (`(constrain
            (continuation values:func (,[lst (` values:storage r) params r])
              {values:return values:storage})
            (\ values:r (with-vars ,vars
              (`(continuation (,[lst
                  [lst (` values values:r) (,[`[llst unquoted-vars (` values:r r) emt r]r]) values:r]
                  (,[`[llst unquoted-vars (` values:r r) emt r]r]) values:r])) values:r) values:r)))r)
          [llst storer (` values:stor r) params r] params r] emt r] args r]))r)))))

(ignore
  Binds values bound by values. I.e. evaluating (bind (param1 param2 ...) x expr) where
  x is (values storer arg1 arg2 ...) is the same as evaluating expr in an environment where
  paramj is argj for each j.)

(function bind (l r)
  (let (identifiers [@fst l]) (param [@frst l]) (body [@frrst l])
  (let (bind-storage [llst (` storage r) (` bind r) [meta:map2 identifiers r (\ l r (`(ignore)r)) r] r])
  (let (vars [meta:label identifiers (` values:var r) r])
  (let (unquoted-vars [meta:map2 vars r (\ l r [llst [lst -,- emt r] l emt r]) r])
  (let (param-parts (loop make-set (identifiers identifiers) (offset #0) (params emt)
      (if [emt? identifiers]
        [meta:reverse params r]
        {make-set [@rst identifiers] [+ offset (unit)]
          [lst (`[get [+ bind:param (,[=# offset r])]]r) params r]})))
    (`(with bind:return
        (let (bind:param (let (bind ,bind-storage) ,param))
          (,[lllst (` jump r) (`(constrain (continuation bind:func (,[lst (` bind:param r) identifiers r])
                {bind:return ,body})
              (\ bind:r (with-vars ,vars
                [llst (` continuation bind:r) [lst [lst (` values bind:r) (,[`[llst unquoted-vars (` bind:r r) emt r]r]) bind:r]
                  (,[`[llst unquoted-vars (` bind:r r) emt r]r]) bind:r] emt bind:r] bind:r)))r)
            (` bind:param r) param-parts r])))r)))))))

(ignore
  The following macro implements the following transformation:
  ((use-storage stor) use-stor arg1 arg2 ... argN)
  ->
  (let (use-stor stor) (do
    [set [+ use-stor [* #0(unit)]] arg1]
    [set [+ use-stor [* #1(unit)]] arg2]
    ...
    [set [+ use-stor [* #(N-1)(unit)]] argN]
    use-stor)))

(function use-storage (use-storage:l use-storage:r)
  (`(function use-storage:temp (l r)
      (`(let ((,[@fst l]) (,(,[`[llst [@fst use-storage:l] (` r use-storage:r) emt use-storage:r] use-storage:r])))
          (,[lst (` do r) [meta:reverse [lst [@fst l]
            (loop make-set (identifiers [@rst l]) (idx #0) (sets emt)
              (if [emt? identifiers]
                sets
                {make-set [@rst identifiers] [+ idx #1]
                  [lst (`[set [+ (,[@fst l]) [* (,[=# idx r]) (unit)]] (,[@fst identifiers])]r) sets r]})) r] r] r]))r))use-storage:r))

(ignore
  Implements the transformations (@n expr) -> ($[+ expr [* #n(unit)]]). Designed to
  evaluate to the nth argument of a storage expression.)

(function @0 (l r) (`($[+ (,[@fst l]) [* #0(unit)]])r))

(function @1 (l r) (`($[+ (,[@fst l]) [* #1(unit)]])r))

(function @2 (l r) (`($[+ (,[@fst l]) [* #2(unit)]])r))

(function @3 (l r) (`($[+ (,[@fst l]) [* #3(unit)]])r))

(function @4 (l r) (`($[+ (,[@fst l]) [* #4(unit)]])r))

(ignore
  A macro to produce the address of an element of a multi-dimensional array.
  For example, (loc(unit) #4 $arr) gets the address corresponding to unit 4
  from $arr. The signature of the expression is the same as that of the base.)

(function loc (l r)
  (`(with loc:return
      (let (loc:base (,[@frrst l]))
        {(constrain (continuation loc:cont (base val) {loc:return val})
            (\ r (with-vars (a) (`(continuation (,a ,a))r)r)))
          loc:base [+ [* (,[@fst l]) (,[@frst l])] loc:base]}))r))

(ignore
  A macro for partial macro application. Does the following transformation:
  ((%(func arg1 arg2 ... argN)) argN+1 argN+2 ... argM)
  ->
  (func arg1 arg2 ... argN argN+1 argN+2 argM))

(function % (%:l %:r)
  (`(function %:temp (l r)
      [meta:concat (,[`[llst [@fst %:l] (` r %:r) emt %:r] %:r]) l r])%:r))

(ignore
  A macro for matching objects against certain properties. The macro does the following
  transformation:
  (match-property (prop1 matcher1) (prop2 matcher2) ... (propN matcherN) obj)
  ->
  (let (match-property:obj obj) (cand
    (matcher1 (@ prop1 match-property:obj))
    (matcher2 (@ prop2 match-property:obj))
    ...
    (matcherN (@ propN match-property:obj)))))

(function match-property (l r)
  (let (obj [@fst [meta:reverse l r]])
    (`(let (match-property:obj ,obj)
        (,[lst (` cand r)
          (loop build (conds emt) (parts [@rst [meta:reverse l r]])
            (if [emt? parts]
              conds
              (let (matcher [@frfst parts]) (prop [@ffst parts])
                {build [lst (`(,matcher (@ ,prop match-property:obj))r) conds r]
                  [@cdr parts]}))) r]))r)))

(ignore
  A macro for matching objects to at least one of the given matchers. The macro does the
  following transformation:
  (match-or matcher1 matcher2 ... matcherN obj)
  ->
  (let (match-or:obj obj) (cor
    (matcher1 match-or:obj)
    (matcher2 match-or:obj)
    ...
    (matcherN match-or:obj))))

(function match-or (l r)
  (let (obj [@fst [meta:reverse l r]])
    (`(let (match-or:obj ,obj)
        (,[lst (` cor r)
          (loop build (conds emt) (parts [@rst [meta:reverse l r]])
            (if [emt? parts]
              conds
              (let (matcher [@fst parts])
                {build [lst (`(,matcher match-or:obj)r) conds r] [@cdr parts]}))) r]))r)))

(ignore
  A macro for matching objects to at least one of the given matchers. The macro does the
  following transformation:
  (match-and matcher1 matcher2 ... matcherN obj)
  ->
  (let (match-and:obj obj) (cand
    (matcher1 match-and:obj)
    (matcher2 match-and:obj)
    ...
    (matcherN match-and:obj))))

(function match-and (l r)
  (let (obj [@fst [meta:reverse l r]])
    (`(let (match-and:obj ,obj)
        (,[lst (` cand r)
          (loop build (conds emt) (parts [@rst [meta:reverse l r]])
            (if [emt? parts]
              conds
              (let (matcher [@fst parts])
                {build [lst (`(,matcher match-and:obj)r) conds r] [@cdr parts]}))) r]))r)))

(ignore
  (guard-match matcher guard obj)
  ->
  (cand (matcher1 obj) guard))

(function guard-match (l r) (`(cand ((,[@fst l]) (,[@frrst l])) (,[@frst l]))r))

(ignore
  A variant of the if-expression where the condition and the consequent are evaluated in
  the environment of the given storage bindings. The macro performs the following
  transformation:
  (bind-if cond (param1 param2 ... paramN)
    consequent
    alternate)
  ->
  (with bind-if:return (do
    (let
        (param1 (storage bind-if:temp (ignore)))
        (param2 (storage bind-if:temp (ignore)))
        ...
        (paramN (storage bind-if:temp (ignore)))
      (if cond
        {bind-if:return consequent}
        (ignore)))
    alternate)))

(function bind-if (l r)
  (let (cond [@fst l]) (params [@frst l]) (consequent [@frrst l]) (alternate [@frrrst l])
  (let (bindings [meta:map2 params r
      (function _ (elt r) (`(,elt (storage bind-if:temp (ignore)))r)) r])
    (`(with bind-if:return (do
        (,[lst (` let r)
            [meta:reverse [lst (`(if ,cond {bind-if:return ,consequent} (ignore))r) bindings r] r] r])
        ,alternate))r))))

(ignore The following function measures the length of the list given as its argument.)

(function meta:length (l)
  (loop measure (l l) (len #0)
    (if [emt? l] len {measure [@rst l] [+ len #1]})))

(ignore
  Creates a signature for a list that contains the N given signatures in its first
  M positions where M is fixed at compile time. Useful for asserting that an object
  is in a particular state.
  
  (sig-contains sig1 sig2 ... sigN)
  ->
  (((sig1 , !0) (!1 sig1 , !0) (!2 !1 sig1 , !0) ... (!M ... !2 !1 sig1 , !0), or)
  ((sig2 , !0) (!1 sig2 , !0) (!2 !1 sig2 , !0) ... (!M ... !2 !1 sig2 , !0), or)
  ...
  ((sigN , !0) (!1 sigN , !0) (!2 !1 sigN , !0) ... (!M ... !2 !1 sigN , !0), or), and))

(function sig-contains (l r)
  (loop layer-sig (l l) (acc and)
    (if [emt? l] acc
      (let (sig [@fst l])
        {layer-sig [@rst l] (with-vars (a b c d e f g h i j)
          (`(((,sig , j) (,i ,sig , j) (,h ,i ,sig , j) (,g ,h ,i ,sig , j) (,f ,g ,h ,i ,sig , j)
            (,e ,f ,g ,h ,i ,sig , j) (,d ,e ,f ,g ,h ,i ,sig , j) (,c ,d ,e ,f ,g ,h ,i ,sig , j)
            (,b ,c ,d ,e ,f ,g ,h ,i ,sig , j) (,a ,b ,c ,d ,e ,f ,g ,h ,i ,sig , j), or), acc)r)r)}))))
