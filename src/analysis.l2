(constrain defined-str= (\ r (?(a) (`(function (string string) ,:a)r)r)))

(function defined-str= (a b) (and [getb a] [getb b] [str= a b]))

(constrain bndg-name= (\ r (?(a) (`(function (bndg-aug bndg-aug) ,:a)r)r)))

(function bndg-name= (a b) [defined-str= (@ bndg-name a) (@ bndg-name b)])

(storage multiple-definition-error (~))

(constrain vfind-multiple-definitions (\ r (?(a b) (`(function ((expr ,:b) ,:a) (expr ,:b))r)r)))

(function vfind-multiple-definitions (e handler)
  (match e
    ((or? (expr:continuation? .:_) (expr:function? .:_)) (do
      (let (ref-with-params (storage-cons $:[expr-reference e] $:[expr-parameters e]))
      (for (partial (%:sublist-iter ref-with-params)) (~)
        (if [nil? (find (f [@cdr partial]) [bndg-name= f [@car partial]])] (~)
          (let (dup-ref-name (@ bndg-name[@car partial]))
            {handler (storage _ multiple-definition-error dup-ref-name)}))))
      e))
    e))

(-- A visitor to remove constrain expressions. This is a harmless operation providing that
  type-checking has been completed.)

(constrain veliminate-constrain (\ r (?(a) (`(function ((expr ,:a) ()) (expr ,:a))r)r)))

(function veliminate-constrain (e ctx)
  (if [= (@ expr:type e) (-constrain-)] (@ expr:constrain-expression (& expr:constrain e)) e))

(-- Replaces symbols with the literal or the symbol they are defined by in the cases in
  which it is possible.)

(constrain vpropagate-expressions (\ r (?(a b) (`(function ((expr ,:b) (values region ,:a)) (expr ,:b))r)r)))

(function vpropagate-expressions (e ctx)
  ((values? .:buf .:handler) ctx
    (if (and [= (@ expr:type e) (-continuation-)] (not (@ expr:continuation-escapes (& expr:continuation e))) [= [length (@ expr:continuation-jumps (& expr:continuation e))] #:1])
      (do
        (let (jmp [@car (@ expr:continuation-jumps (& expr:continuation e))])
          (for (u (%:list-iter(@ expr:continuation-parameters (& expr:continuation e)))) (v (%:list-iter(@ expr:jump-arguments (& expr:jump jmp)))) (~)
            (setf bndg-propagate u v)))
        e)
    (if (and [= (@ expr:type e) (-symbol-)] [not= (@ bndg-propagate (@ expr:symbol-reference (& expr:symbol e))) null-expr]
        [= (@ expr:type (@ bndg-propagate (@ expr:symbol-reference (& expr:symbol e)))) (-symbol-)])
      (do
        (setf expr:symbol-reference (& expr:symbol e) (@ expr:symbol-reference (& expr:symbol (@ bndg-propagate (@ expr:symbol-reference (& expr:symbol e))))))
        e)
    (if (and [= (@ expr:type e) (-symbol-)] [not= (@ bndg-propagate (@ expr:symbol-reference (& expr:symbol e))) null-expr]
        [= (@ expr:type (@ bndg-propagate (@ expr:symbol-reference (& expr:symbol e)))) (-literal-)])
      (do
        [make-literal (@ expr:value (& expr:literal (@ bndg-propagate (@ expr:symbol-reference (& expr:symbol e))))) null-fragment null-expr buf handler])
      e))) (~)))

(-- Does the following optimizations:
  (if (if cond <zero literal> <non-zero literal>) <consequent> <alternate>)
  ->
  (if cond <alternate> <consequent>)
  AND
  (if (if cond <non-zero literal> <zero literal>) <consequent> <alternate>)
  ->
  (if cond <consequent> <alternate>))

(constrain vswap-branches (\ r (?(a) (`(function ((expr ,:a) ()) (expr ,:a))r)r)))

(function vswap-branches (e ctx)
  ((expr:if? (property?
      (expr:condition (guards? (expr:if? (property?
          (expr:condition .:cond)
          (expr:consequent (expr:literal? (property?
            (expr:value .:cons-val))))
          (expr:alternate (expr:literal? (property?
            (expr:value .:alt-val))))))
        (and (or cons-val alt-val) (not (and cons-val alt-val)))))
      (expr:consequent .:consequent)
      (expr:alternate .:alternate))) e
    (do
      (setf expr:condition (& expr:if e) cond)
      (if alt-val (do
        (setf expr:consequent (& expr:if e) alternate)
        (setf expr:alternate (& expr:if e) consequent)) (~))
      e)
    e))

(-- Does the following optimizations:
  [... {expr1 ... exprN} ...] -> {expr1 ... exprN}
  {... {expr1 ... exprN} ...} -> {expr1 ... exprN}
  (if {expr1 ... exprN} cons alt) -> {expr1 ... exprN})

(constrain vdominate-jumps (\ r (?(a) (`(function ((expr ,:a) ()) (expr ,:a))r)r)))

(function vdominate-jumps (e ctx)
  (match e
    ((or? (expr:invoke? .:_) (expr:jump? .:_))
      (loop search (exprs (storage-cons $:[expr-target e] $:[expr-arguments e]))
        (if [nil? exprs] e
        (if [= (@ expr:type [@car exprs]) (-jump-)] [@car exprs]
          {search [@cdr exprs]}))))
    
    ((expr:if? (property? (expr:condition .:cond)))
      ((expr:jump? .:_) cond cond e))
    
    e))

(-- Assigns depths to the given expression and its descendents.)

(constrain assign-depths (\ r (?(a b) (`(function ((expr ,:b) ,:a) ())r)r)))

(function assign-depths (e depth) (do
  (setf expr:depth e depth)
  (match e
    ((or? (expr:function? .:_) (expr:continuation? .:_) (expr:with? .:_) (expr:constrain? .:_))
      [assign-depths $:[expr-expression e] [+ depth #:1]])
    ((expr:if? .:ife) (do
      [assign-depths (@ expr:condition ife) [+ depth #:1]]
      [assign-depths (@ expr:consequent ife) [+ depth #:1]]
      [assign-depths (@ expr:alternate ife) [+ depth #:1]]))
    ((or? (expr:invoke? .:inve) (expr:jump? .:jmpe))
      (for (u (%:list-iter (storage-cons $:[expr-target e] $:[expr-arguments e]))) (~)
        [assign-depths u [+ depth #:1]]))
    ((expr:storage? .:stge)
      (for (u (%:list-iter (@ expr:storage-arguments stge))) (~) [assign-depths u [+ depth #:1]]))
    (~))))

(-- A visitor that replaces all occurences of the first binding in function/continuation
  /with parameters, symbol references, and expression bindings with the second binding.)

(constrain vreplace-value-bindings (\ r (?(a) (`(function ((expr ,:a) (values bndg-aug bndg-aug)) (expr ,:a))r)r)))

(function vreplace-value-bindings (e ctx)
  ((values? .:repl-target .:replacement) ctx (do
    (if [= (@ expr:binding-aug e) repl-target]
      (setf expr:binding-aug e replacement)
      (~))
    (match e
      ((or? (expr:continuation? .:_) (expr:with? .:_) (expr:function? .:_))
        (loop replace (rem-params $:[expr-parameters e])
          (if [nil? rem-params] e
          (if [= [@car rem-params] repl-target]
            (do (setf car rem-params replacement) {replace [@cdr rem-params]})
            {replace [@cdr rem-params]}))))
      ((expr:symbol? .:syme)
        (if [= (@ expr:symbol-reference syme) repl-target]
          (do (setf expr:symbol-reference syme replacement) e)
          e))
      e)) (~)))

(constrain assign-expr-is-reads (\ r (?(a) (`(function ((expr ,:a)) ())r)r)))

(function assign-expr-is-reads (s)
  (match s
    ((expr:if? (property? (expr:condition .:cond) (expr:consequent .:consq) (expr:alternate .:alte))) (do
      [assign-expr-is-reads cond]
      [set-expr-is-read cond (true)]
      [assign-expr-is-reads consq]
      [set-expr-is-read consq (true)]
      [assign-expr-is-reads alte]
      [set-expr-is-read alte (true)]))
    
    ((expr:constrain? (property? (expr:constrain-expression .:body))) (do
      [assign-expr-is-reads body]
      [set-expr-is-read body (true)]))
    
    ((expr:function? (property? (expr:function-reference .:ref) (expr:function-expression .:body))) (do
      (setf bndg-is-read ref (true))
      [assign-expr-is-reads body]
      [set-expr-is-read body (true)]))
    
    ((expr:with? (property? (expr:with-reference .:ref) (expr:with-parameters .:params) (expr:with-expression .:body))) (do
      (setf bndg-is-read ref (true))
      (setf bndg-is-read [@car params] (true))
      [assign-expr-is-reads body]
      [set-expr-is-read body (true)]))
    
    ((expr:continuation? (property? (expr:continuation-parameters .:params) (expr:continuation-reference .:ref) (expr:continuation-expression .:body))) (do
      (for (param (%:list-iter params)) (~) (setf bndg-is-read param (true)))
      (setf bndg-is-read ref (true))
      [assign-expr-is-reads body]
      [set-expr-is-read body (false)]))
    
    ((expr:storage? (property? (expr:storage-reference .:ref) (expr:storage-arguments .:args))) (do
      (setf bndg-is-read ref (true))
      (for (u (%:list-iter args)) (~) (do
        [assign-expr-is-reads u]
        [set-expr-is-read u (true)]))))
    
    ((or? (expr:jump? .:_) (expr:invoke? .:_)) (do
      [assign-expr-is-reads $:[expr-target s]]
      [set-expr-is-read $:[expr-target s] (true)]
      (for (u (%:list-iter $:[expr-arguments s])) (~) (do
        [assign-expr-is-reads u]
        [set-expr-is-read u (true)]))))
    
    ((expr:symbol? (property? (expr:symbol-reference .:ref))) (do
      (setf bndg-is-read ref (true))
      (~)))
    
    (~)))

(constrain global-binding-augs-of (\ r (?(a b) (`(function ((list (expr ,:b)) region ,:a) (hash-table string bndg-aug))r)r)))

(function global-binding-augs-of (exprs r handler)
  (sub (.. r handler)
    (let (binding-augs [ht-create hash-str str= ..])
    (loop add-binding (exprs exprs)
      (if [nil? exprs]
        binding-augs
        (let (t [@car exprs])
        (if (or [= (@ expr:type t) (-function-)] [= (@ expr:type t) (-storage-)])
          (do
            (setf bndg-scope $:[expr-reference t] (global-scope))
            [ht-put (@ bndg-name $:[expr-reference t]) $:[expr-reference t] binding-augs ..]
            {add-binding [@cdr exprs]})
          {add-binding [@cdr exprs]})))))))

(constrain vunlink-symbols (\ r (?(a b) (`(function ((expr ,:b) (values (hash-table string bndg-aug) region ,:a)) (expr ,:b))r)r)))

(function vunlink-symbols (s ctx)
  ((values? .:blacklist .:buf .:hdl) ctx
    (with-region buf
      (if (and [= (@ expr:type s) (-symbol-)] [not= (@ expr:symbol-reference (& expr:symbol s)) null-binding]
          [contains (@ expr:symbol-reference (& expr:symbol s)) [collect-list (%:ht-iter-key (@ bndg-name (@ expr:symbol-reference (& expr:symbol s))) blacklist) nil buf hdl]])
        (do (setf expr:symbol-reference (& expr:symbol s) null-binding) s)
        s)) (~)))

(constrain assign-binding (\ r (?(a b) (`(function ((expr ,:b) (hash-table string bndg-aug)) ,:a)r)r)))

(function assign-binding (s bindings)
  (bind-if [ht-contains (@ expr:name (& expr:symbol s)) bindings bndg]
    (bndg) (do (setf expr:symbol-reference (& expr:symbol s) $:bndg) (true))
    (false)))

(constrain link-symbols
  (\ r (?(a b c)
    (`(function ((expr ,:c) ,:a (hash-table string bndg-aug) (hash-table string bndg-aug) (hash-table string bndg-aug) region ,:b) ())r)r)))

(function link-symbols (s static-storage undefined-bindings static-bindings dynamic-bindings r handler)
  (sub (.. r handler)
    (let (bindings (if static-storage static-bindings dynamic-bindings))
    
    (switch = (@ expr:type s)
      ((-function-) (do
        [ht-put (@ bndg-name(@ expr:function-reference (& expr:function s))) (@ expr:function-reference (& expr:function s)) static-bindings ..]
        (let (dynamic-bindings [ht-create hash-str str= ..]) (do
        (for (u (%:list-iter (@ expr:function-parameters (& expr:function s)))) (~) [ht-put (@ bndg-name u) u dynamic-bindings ..])
        [link-symbols (@ expr:function-expression (& expr:function s)) (false) undefined-bindings static-bindings dynamic-bindings ..]))
        [ht-remove (@ bndg-name(@ expr:function-reference (& expr:function s))) static-bindings]))
      
      ((-with-) (-continuation-) (do
        [ht-put (@ bndg-name $:[expr-reference s]) $:[expr-reference s] bindings ..]
        (for (u (%:list-iter $:[expr-parameters s])) (~) [ht-put (@ bndg-name u) u bindings ..])
        [link-symbols $:[expr-expression s] static-storage undefined-bindings static-bindings dynamic-bindings ..]
        (for (u (%:list-iter $:[expr-parameters s])) (~) [ht-remove (@ bndg-name u) bindings])
        [ht-remove (@ bndg-name $:[expr-reference s]) bindings]))
      
      ((-storage-) (do
        [ht-put (@ bndg-name (@ expr:storage-reference (& expr:storage s))) (@ expr:storage-reference (& expr:storage s)) bindings ..]
        (for (u (%:list-iter (@ expr:storage-arguments (& expr:storage s)))) (~)
          [link-symbols u static-storage undefined-bindings static-bindings dynamic-bindings ..])
        [ht-remove (@ bndg-name (@ expr:storage-reference (& expr:storage s))) bindings]))
      
      ((-symbol-)
        (if (and [= (@ expr:symbol-reference (& expr:symbol s)) null-binding] (not (if static-storage (false) [assign-binding s dynamic-bindings]))
            (not [assign-binding s static-bindings]) (not [assign-binding s undefined-bindings]))
          (let (bndg [make-undefined-binding (@ expr:name (& expr:symbol s)) ..]) (do
            (setf expr:symbol-reference (& expr:symbol s) bndg)
            [ht-put (@ bndg-name(@ expr:symbol-reference (& expr:symbol s))) (@ expr:symbol-reference (& expr:symbol s)) undefined-bindings ..]
            (~)))
          (~)))
      
      ((-if-) (do
        [link-symbols (@ expr:condition (& expr:if s)) static-storage undefined-bindings static-bindings dynamic-bindings ..]
        [link-symbols (@ expr:consequent (& expr:if s)) static-storage undefined-bindings static-bindings dynamic-bindings ..]
        [link-symbols (@ expr:alternate (& expr:if s)) static-storage undefined-bindings static-bindings dynamic-bindings ..]))
      
      ((-invoke-) (-jump-) (do
        [link-symbols $:[expr-target s] static-storage undefined-bindings static-bindings dynamic-bindings ..]
        (for (u (%:list-iter $:[expr-arguments s])) (~)
          [link-symbols u static-storage undefined-bindings static-bindings dynamic-bindings ..])))
      
      ((-constrain-)
        [link-symbols (@ expr:constrain-expression (& expr:constrain s)) static-storage undefined-bindings static-bindings dynamic-bindings ..])
      
      (~)))))

(constrain escape-analysis (\ r (?(a b c) (`(function ((expr ,:c) ,:a region ,:b) ())r)r)))

(function escape-analysis (s escaping r handler)
  (sub (.. r handler)
    (switch = (@ expr:type s)
      ((-symbol-)
        (let (target-expr (@ bndg-expression (@ expr:symbol-reference (& expr:symbol s))))
          (if (and escaping (or [= (@ expr:type target-expr) (-continuation-)] [= (@ expr:type target-expr) (-with-)])
              [= $:[expr-reference target-expr] (@ expr:symbol-reference (& expr:symbol s))])
            (do [set [expr-escapes target-expr] escaping] (~))
            (~))))
      
      ((-if-) (do
        [escape-analysis (@ expr:condition (& expr:if s)) (true) ..]
        [escape-analysis (@ expr:consequent (& expr:if s)) (true) ..]
        [escape-analysis (@ expr:alternate (& expr:if s)) (true) ..]))
      
      ((-function-) (-continuation-) (-with-) (do
        (if (and escaping [= (@ expr:type s) (-continuation-)])
          (setf expr:continuation-escapes (& expr:continuation s) escaping)
          (~))
        [escape-analysis $:[expr-expression s] (true) ..]))
      
      ((-storage-)
        (for (t (%:list-iter (@ expr:storage-arguments (& expr:storage s)))) (~) [escape-analysis t (true) ..]))
      
      ((-jump-) (do
        (if [= (@ expr:type (@ expr:jump-target (& expr:jump s))) (-symbol-)]
          (let (target-expr (@ bndg-expression (@ expr:symbol-reference (& expr:symbol (@ expr:jump-target (& expr:jump s))))))
          (if (and (or [= (@ expr:type target-expr) (-continuation-)] [= (@ expr:type target-expr) (-with-)])
              [= $:[expr-reference target-expr] (@ expr:symbol-reference (& expr:symbol (@ expr:jump-target (& expr:jump s))))]) (do
            [prepend s [expr-jumps target-expr] ..]
            (setf expr:short-circuit (& expr:jump s) target-expr))
            (~)))
        (if [= (@ expr:type (@ expr:jump-target (& expr:jump s))) (-continuation-)] (do
          [prepend s (& expr:continuation-jumps (& expr:continuation (@ expr:jump-target (& expr:jump s)))) ..]
          (setf expr:short-circuit (& expr:jump s) (@ expr:jump-target (& expr:jump s))))
          (~)))
        [escape-analysis (@ expr:jump-target (& expr:jump s)) (false) ..]
        (for (t (%:list-iter (@ expr:jump-arguments (& expr:jump s)))) (~) [escape-analysis t (true) ..])))
      
      ((-invoke-) (do
        [escape-analysis (@ expr:invoke-target (& expr:invoke s)) (true) ..]
        (for (t (%:list-iter (@ expr:invoke-arguments (& expr:invoke s)))) (~) [escape-analysis t (true) ..])))
      
      ((-constrain-) [escape-analysis (@ expr:constrain-expression (& expr:constrain s)) (true) ..])
      
      (~))))

(constrain vfind-dependencies (\ r (?(a b) (`(function ((expr ,:b) (values region ,:a)) (expr ,:b))r)r)))

(function vfind-dependencies (s ctx)
  ((values? .:r .:handler) ctx (sub (.. r handler) (do
    (switch = (@ expr:type s)
      ((-if-) (do
        [prepend (@ expr:condition (& expr:if s)) (& expr:dependencies s) ..]
        [prepend (@ expr:consequent (& expr:if s)) (& expr:dependencies s) ..]
        [prepend (@ expr:alternate (& expr:if s)) (& expr:dependencies s) ..]))
      
      ((-function-) (-with-)
        [prepend $:[expr-expression s] (& expr:dependencies s) ..])
      
      ((-continuation-) (~))
      
      ((-storage-)
        (for (t (%:list-iter (@ expr:storage-arguments (& expr:storage s)))) (~) [prepend t (& expr:dependencies s) ..]))
      
      ((-invoke-) (do
        [prepend (@ expr:invoke-target (& expr:invoke s)) (& expr:dependencies s) ..]
        (for (t (%:list-iter (@ expr:invoke-arguments (& expr:invoke s)))) (~) [prepend t (& expr:dependencies s) ..])))
      
      ((-jump-) (do
        [prepend (@ expr:jump-target (& expr:jump s)) (& expr:dependencies s) ..]
        [prepend s (& expr:dependencies (@ expr:jump-target (& expr:jump s))) ..]
        (for (t (%:list-iter (@ expr:jump-arguments (& expr:jump s)))) (~) [prepend t (& expr:dependencies s) ..])))
      
      ((-symbol-)
        (let (target-expr (@ bndg-expression (@ expr:symbol-reference (& expr:symbol s)))) (do
        [prepend target-expr (& expr:dependencies s) ..]
        [prepend s (& expr:dependencies target-expr) ..])))
      
      ((-constrain-) (do
        [prepend (@ expr:constrain-expression (& expr:constrain s)) (& expr:dependencies s) ..]
        [prepend s (& expr:dependencies (@ expr:constrain-expression (& expr:constrain s))) ..]))
      
      (~))
    s)) (~)))

(constrain construct-sccs (\ r (?(a b c) (`(function ((expr ,:c) ,:a !:Ref:(list (expr ,:c)) !:Ref:(list (list (expr ,:c))) region ,:b) ())r)r)))

(function construct-sccs (s preorder stack sccs r handler)
  (sub (.. r handler)
    (if [= (@ expr:lowlink s) #:0]
      (let (marker $:stack) (do
      (setf expr:lowlink s preorder)
      (for (t (%:list-iter (@ expr:dependencies s))) (~) (do
        [construct-sccs t [+ preorder #:1] stack sccs ..]
        (if [< (@ expr:lowlink t) (@ expr:lowlink s)]
          (setf expr:lowlink s (@ expr:lowlink t))
          (~))))
      [prepend s stack ..]
      
      (if [= (@ expr:lowlink s) preorder] (do
        [prepend (loop add (t $:stack) (scc nil)
          (if [= t marker] scc
            (let (u [@car t]) (do
            (setf expr:lowlink u [- #:0 #:1])
            {add [@cdr t] [cons u scc ..]})))) sccs ..]
        [set stack marker])
        (~))))
      (~))))

(constrain occurs-in? (\ r (?(a) (`(function (vbl frag (hash-table vbl frag)) ,:a)r)r)))

(function occurs-in? (var val assigns)
  (let (eval [evaluate val assigns])
    (if [vbl? eval]
      [vbl= var [frag->vbl eval]]
    (if (or [i/f.token? eval] [nil? [frag->list eval]])
      (false)
      (let (a [frag->list eval])
        (or [occurs-in? var [@car a] assigns] [occurs-in? var [list->fragment [@cdr a]] assigns]))))))

(constrain unify-var (\ r (?(a c) (`(function (vbl frag (hash-table vbl frag) region ,:c) ,:a)r)r)))

(function unify-var (var val assigns buf hdl)
  (sub (.. buf hdl)
    (if [occurs-in? var val assigns] (false)
      (do [ht-put var val assigns ..] (true)))))

(constrain unify (\ r (?(a c) (`(function (frag frag (hash-table vbl frag) region ,:c) ,:a)r)r)))

(function unify (x y assigns buf hdl)
  (sub (.. buf hdl)
    (let (xl [evaluate x assigns]) (yl [evaluate y assigns])
      (if (and [vbl? xl] [vbl? yl] [vbl= [frag->vbl xl] [frag->vbl yl]]) (true)
      (if [vbl? xl] [unify-var [frag->vbl xl] yl assigns ..]
      (if [vbl? yl] [unify-var [frag->vbl yl] xl assigns ..]
      (if (and [i/f.token? xl] [i/f.token? yl])
        [i/f.token= [fragment->token xl] [fragment->token yl]]
      (if (or [i/f.token? xl] [i/f.token? yl]) (false)
      (let (xl [frag->list xl]) (yl [frag->list yl])
        (if (and [emt?! xl] [emt?! yl]) (true)
        (if (or [emt?! xl] [emt?! yl]) (false)
          (and [unify [@car xl] [@car yl] assigns ..]
            [unify [list->fragment [@cdr xl]] [list->fragment [@cdr yl]] assigns ..]))))))))))))

(-- The same function may be called with different type parameters in the same strongly connected
  component, hence we need to make sure that each equation has its own fresh type variables.)

(constrain scoped-signature (\ r (?(a b) (`(function ((expr ,:b) (list (expr ,:b)) region ,:a) frag)r)r)))

(function scoped-signature (e scc r handler)
  (sub (.. r handler)
    (if (not [nil? (find (x scc) [= x e])])
      [expr-signature e]
      (let (var-map [ht-create hash-ptr = ..])
        [copy-fragment [expr-signature e] var-map ..]))))

(constrain generate-equations
  (\ r (?(a b c) (`(function ((expr ,:c) (list (expr ,:c)) frag frag !:Ref:(list frag) !:Ref:(list frag) region ,:a) ,:b)r)r)))

(function generate-equations (e scc function-token continuation-token lhss rhss buf handler)
  (sub (.. buf handler) (E expr)
    (match e
      ((E:function? .:funce)
        (let (params-signature [list->fragment [collect-list (map (x (%:list-iter (@ E:function-parameters funce))) (@ bndg-signature x)) nil ..]]) (do
          [prepend [expr-signature e] [prepend [expr-signature e] lhss ..] ..]
          [prepend [list->fragment [cons function-token [cons params-signature
            [cons [expr-signature (@ E:function-expression funce)] nil ..] ..] ..]] [prepend (@ bndg-signature (@ E:function-reference funce)) rhss ..] ..])))
      
      ((E:continuation? .:conte)
        (let (params-signature [list->fragment [collect-list (map (x (%:list-iter (@ E:continuation-parameters conte))) (@ bndg-signature x)) nil ..]]) (do
          [prepend [expr-signature e] [prepend [expr-signature e] lhss ..] ..]
          [prepend [list->fragment [cons continuation-token [cons params-signature nil ..] ..]]
            [prepend (@ bndg-signature (@ E:continuation-reference conte)) rhss ..] ..])))
      
      ((E:constrain? .:conste) (do
        [prepend [expr-signature e] lhss ..]
        [prepend [expr-signature (@ E:constrain-expression conste)] rhss ..]))
      
      ((E:invoke? .:inve)
        (let (params-signature [list->fragment [collect-list (map (arg (%:list-iter (@ E:invoke-arguments inve))) [scoped-signature arg scc ..]) nil ..]]) (do
          [prepend [scoped-signature (@ E:invoke-target inve) scc ..] lhss ..]
          [prepend [list->fragment [cons function-token [cons params-signature [cons [expr-signature e] nil ..] ..] ..]] rhss ..])))
      
      ((E:jump? .:jmpe)
        (let (params-signature [list->fragment [collect-list (map (arg (%:list-iter (@ E:jump-arguments jmpe))) [scoped-signature arg scc ..]) nil ..]]) (do
          [prepend [scoped-signature (@ E:jump-target jmpe) scc ..] lhss ..]
          [prepend [list->fragment [cons continuation-token [cons params-signature nil ..] ..]] rhss ..])))
      
      ((E:with? .:wthe)
        (let (params-signature [list->fragment [cons [expr-signature e] nil ..]]) (do
          [prepend (@ bndg-signature (@ E:with-reference wthe)) [prepend [expr-signature e] lhss ..] ..]
          [prepend [list->fragment [cons continuation-token [cons params-signature nil ..] ..]]
            [prepend [expr-signature (@ E:with-expression wthe)] rhss ..] ..])))
      
      ((E:if? .:ife)
        (let (consequent-sig [scoped-signature (@ E:consequent ife) scc ..])
        (let (alternate-sig [scoped-signature (@ E:alternate ife) scc ..]) (do
          [prepend consequent-sig [prepend [expr-signature e] lhss ..] ..]
          [prepend alternate-sig [prepend consequent-sig rhss ..] ..]))))
      
      ((E:symbol? .:syme) (do
        [prepend [expr-signature e] lhss ..]
        [prepend (@ bndg-signature (@ E:symbol-reference syme)) rhss ..]))
      
      (~))))

(storage unification-error (~))

(constrain infer-types (\ r (?(a b) (`(function ((list (expr ,:b)) region ,:a) ())r)r)))

(function infer-types (exprs buf handler)
  (sub (.. buf handler) (do
    (-- Type inferencing is done on strongly connected components)
    (let (stack (storage _ nil))
    (let (sccs (storage _ nil)) (do
    (for (expr (%:list-iter exprs)) (~) [visit-expressions vfind-dependencies (storage _ expr) (values storage ..)])
    (for (expr (%:list-iter exprs)) (~) [construct-sccs expr #:1 stack sccs ..])
    
    (let (assigns [ht-create hash-ptr = ..])
    (let (function-token [token->fragment [build-token [rstrcpy (" function) ..] ..]])
    (let (continuation-token [token->fragment [build-token [rstrcpy (" continuation) ..] ..]])
    (for (scc (%:list-iter [reverse $:sccs ..])) (~)
      (let (lhss (storage _ nil)) (rhss (storage _ nil)) (do
        (for (e (%:list-iter scc)) (~) [generate-equations e scc function-token continuation-token lhss rhss ..])
        (if [unify [list->fragment $:lhss] [list->fragment $:rhss] assigns ..] (~)
          {handler (storage _ unification-error)})
        (for (e (%:list-iter scc)) (~) (do
          (setf bndg-signature (@ expr:binding-aug e) [recursive-evaluate [expr-signature e] assigns ..])
          (~)))))))))))))))

(constrain visit-expressions (\ r (?(a b) (`(function ((function ((expr ,:b) ,:a) (expr ,:b)) !:Ref:(expr ,:b) ,:a) ())r)r)))

(function visit-expressions (visitor s ctx) (do
  (switch = (@ expr:type $:s)
    ((-if-) (do
      [visit-expressions visitor (& expr:condition (& expr:if $:s)) ctx]
      [visit-expressions visitor (& expr:consequent (& expr:if $:s)) ctx]
      [visit-expressions visitor (& expr:alternate (& expr:if $:s)) ctx]))
    
    ((-function-) (-continuation-) (-with-) (-constrain-)
      [visit-expressions visitor [expr-expression $:s] ctx])
    
    ((-storage-)
      (for (elt (%:list-ref-iter (@ expr:storage-arguments (& expr:storage $:s)))) (~)
        [visit-expressions visitor elt ctx]))
    
    ((-jump-) (-invoke-) (do
      [visit-expressions visitor [expr-target $:s] ctx]
      (for (elt (%:list-ref-iter (@ expr:jump-arguments (& expr:jump $:s)))) (~)
        [visit-expressions visitor elt ctx])))
    
    (~))
  [set s [visitor $:s ctx]]))

(constrain pre-visit-expressions (\ r (?(a b) (`(function ((function ((expr ,:b) ,:a) (expr ,:b)) !:Ref:(expr ,:b) ,:a) ())r)r)))

(function pre-visit-expressions (visitor s ctx) (do
  [set s [visitor $:s ctx]]
  
  (switch = (@ expr:type $:s)
    ((-if-) (do
      [pre-visit-expressions visitor (& expr:condition (& expr:if $:s)) ctx]
      [pre-visit-expressions visitor (& expr:consequent (& expr:if $:s)) ctx]
      [pre-visit-expressions visitor (& expr:alternate (& expr:if $:s)) ctx]))
    
    ((-function-) (-continuation-) (-with-) (-constrain-)
      [pre-visit-expressions visitor [expr-expression $:s] ctx])
    
    ((-storage-)
      (for (elt (%:list-ref-iter (@ expr:storage-arguments (& expr:storage $:s)))) (~)
        [pre-visit-expressions visitor elt ctx]))
    
    ((-jump-) (-invoke-) (do
      [pre-visit-expressions visitor [expr-target $:s] ctx]
      (for (elt (%:list-ref-iter $:[expr-arguments $:s])) (~)
        [pre-visit-expressions visitor elt ctx])))
    
    (~))))

(constrain classify-program-bindings (\ r (?(a) (`(function ((expr ,:a)) ())r)r)))

(function classify-program-bindings (expr) (do
  (setf bndg-context (@ expr:binding-aug expr) (extra-function-context))
  (switch = (@ expr:type expr)
    ((-constrain-) [classify-program-bindings (@ expr:constrain-expression (& expr:constrain expr))])
    
    ((-storage-) (do
      (setf bndg-context (@ expr:storage-reference (& expr:storage expr)) (extra-function-context))
      (for (t (%:list-iter (@ expr:storage-arguments (& expr:storage expr)))) (~) [classify-program-bindings t])))
    
    ((-jump-) (-invoke-) (do
      [classify-program-bindings $:[expr-target expr]]
      (for (t (%:list-iter $:[expr-arguments expr])) (~) [classify-program-bindings t])))
    
    ((-continuation-) (-with-) (do
      (setf bndg-context $:[expr-reference expr] (extra-function-context))
      (for (t (%:list-iter $:[expr-parameters expr])) (~)
        (setf bndg-context t (extra-function-context)))
      [classify-program-bindings $:[expr-expression expr]]))
    
    ((-if-) (do
      [classify-program-bindings (@ expr:condition (& expr:if expr))]
      [classify-program-bindings (@ expr:consequent (& expr:if expr))]
      [classify-program-bindings (@ expr:alternate (& expr:if expr))]))
    
    (~))))

(constrain setup-collect-static-bindings (\ r (?(a b) (`(function ((expr ,:a)) ,:b)r)r)))

(function setup-collect-static-bindings (n) (do
  (switch = (@ expr:type n)
    ((-continuation-) (-with-) (do
      [setup-collect-static-bindings $:[expr-expression n]]
      (if $:[expr-escapes n]
        (setf bndg-other $:[expr-reference n] (true)) (~))
      (for (t (%:list-iter $:[expr-parameters n])) (~)
        (setf bndg-other t (true)))))
    
    ((-storage-) (do
      (setf bndg-other (@ expr:storage-reference (& expr:storage n)) (true))
      (for (u (%:list-iter (@ expr:storage-arguments (& expr:storage n)))) (~) [setup-collect-static-bindings u])))
    
    ((-jump-) (-invoke-) (do
      [setup-collect-static-bindings $:[expr-target n]]
      (for (u (%:list-iter $:[expr-arguments n])) (~) [setup-collect-static-bindings u])))
    
    ((-if-) (do
      [setup-collect-static-bindings (@ expr:condition (& expr:if n))]
      [setup-collect-static-bindings (@ expr:consequent (& expr:if n))]
      [setup-collect-static-bindings (@ expr:alternate (& expr:if n))]))
    
    ((-constrain-)
      [setup-collect-static-bindings (@ expr:constrain-expression (& expr:constrain n))])
    
    (~))
  
  (setf bndg-other (@ expr:binding-aug n) (true))))

(constrain append-static-binding (\ r (?(a b) (`(function (bndg-aug !:Ref:(list bndg-aug) region ,:a) ,:b)r)r)))

(function append-static-binding (bndg binding-augs r handler)
  (sub (.. r handler)
    (if (and [= (@ bndg-storage bndg) (absolute-storage)] (@ bndg-other bndg))
      (do (setf bndg-other bndg (false)) [append bndg binding-augs ..])
      (~))))

(constrain collect-static-bindings (\ r (?(a b c) (`(function ((expr ,:c) !:Ref:(list bndg-aug) region ,:a) ,:b)r)r)))

(function collect-static-bindings (n binding-augs r handler)
  (sub (.. r handler) (do
    (switch = (@ expr:type n)
      ((-continuation-) (-with-) (do
        [collect-static-bindings $:[expr-expression n] binding-augs ..]
        (if $:[expr-escapes n]
          [append-static-binding $:[expr-reference n] binding-augs ..] (~))
        (for (t (%:list-iter $:[expr-parameters n])) (~)
          [append-static-binding t binding-augs ..])))
      
      ((-storage-) (do
        [append-static-binding (@ expr:storage-reference (& expr:storage n)) binding-augs ..]
        (for (u (%:list-iter (@ expr:storage-arguments (& expr:storage n)))) (~) [collect-static-bindings u binding-augs ..])))
      
      ((-jump-) (-invoke-) (do
        [collect-static-bindings $:[expr-target n] binding-augs ..]
        (for (u (%:list-iter $:[expr-arguments n])) (~) [collect-static-bindings u binding-augs ..])))
      
      ((-if-) (do
        [collect-static-bindings (@ expr:condition (& expr:if n)) binding-augs ..]
        [collect-static-bindings (@ expr:consequent (& expr:if n)) binding-augs ..]
        [collect-static-bindings (@ expr:alternate (& expr:if n)) binding-augs ..]))
      
      ((-constrain-)
        [collect-static-bindings (@ expr:constrain-expression (& expr:constrain n)) binding-augs ..])
      
      (~))
      
    [append-static-binding (@ expr:binding-aug n) binding-augs ..])))

(constrain set-bindings-resolved (\ r (?(a c) (`(function ((hash-table ,:c bndg-aug) ,:a) (hash-table ,:c bndg-aug))r)r)))

(function set-bindings-resolved (bindings val)
  (select (tuple? .:_ .:binding) (%:ht-iter bindings) bindings (do
    (setf bndg-resolved binding val)
    bindings)))

(storage undefined-symbol-error (~))

(constrain assert-binding-resolved (\ r (?(c) (`(function (bndg-aug ,:c) bndg-aug)r)r)))

(function assert-binding-resolved (bndg handler)
  (if [band (@ bndg-resolved bndg) 0x:1]
    (if [band (@ bndg-resolved bndg) 0x:2] bndg (do
      (setf bndg-resolved bndg [bor (@ bndg-resolved bndg) 0x:2])
      (loop assert-depends (deps (@ bndg-dependencies bndg))
        (if [nil? deps] bndg (do
          [assert-binding-resolved [@car deps] handler]
          {assert-depends [@cdr deps]})))))
    {handler (storage _ undefined-symbol-error (@ bndg-name bndg))}))

(constrain unvisit-binding-resolved (\ r (`(function (bndg-aug) bndg-aug)r)))

(function unvisit-binding-resolved (bndg)
  (if [band (@ bndg-resolved bndg) 0x:2] (do
    (setf bndg-resolved bndg [band (@ bndg-resolved bndg) [bnot 0x:2]])
    (loop unvisit-depends (deps (@ bndg-dependencies bndg))
      (if [nil? deps] bndg (do
        [unvisit-binding-resolved [@car deps]]
        {unvisit-depends [@cdr deps]})))) bndg))

(constrain evaluate-expr
  (\ r (?(a c) (`(function ((expr ,:c) (list initializer) !:Ref:(list (expr ,:c)) (hash-table string (expr ,:c)) (hash-table string bndg-aug) region region ,:a) bndg-aug)r)r)))

(function evaluate-expr (s inits meta-exprs func-exprs bindings buf buf2 handler)
  (sub (.. buf handler) (with-region buf2
    (match s
      ((expr:symbol? .:sym) (do
        (-- If the expression, s, is a mere symbol, then we can just lookup its value in
          the bindings list instead of preprocessing, compiling, and then evaluating
          the expression.)
        (bind-if [ht-contains (@ expr:name sym) bindings bndg]
          (bndg) $:bndg
        (bind-if [ht-contains (@ expr:name sym) func-exprs func-expr]
          (func-expr) [evaluate-expr $:func-expr inits meta-exprs func-exprs bindings buf buf2 handler]
        (if [nil? $:meta-exprs]
          {handler (storage _ undefined-symbol-error (@ expr:name sym))}
          (let (meta-expr [@car $:meta-exprs]) (do
            (cps (do
                [evaluate-expr meta-expr inits (& cdr $:meta-exprs) func-exprs bindings buf buf2 failure]
                [set meta-exprs [@cdr $:meta-exprs]]
                [evaluate-expr s inits meta-exprs func-exprs bindings buf buf2 handler])
              (failure (arg) (if [= (@0 arg) undefined-symbol-error]
                [evaluate-expr s inits (& cdr $:meta-exprs) func-exprs bindings buf buf2 handler]
                {handler arg}))))))))))
      ((expr:function? .:func) (do
        [pre-visit-expressions vgenerate-expr (storage _ s) (values storage inits meta-exprs func-exprs bindings buf buf2 handler)]
        (let (obj [load-program [cons s nil buf2 handler] inits buf buf2 handler]) (do
        (setf bndg-resolved (@ expr:function-reference func) #:0)
        [ht-put (@ bndg-name (@ expr:function-reference func)) (@ expr:function-reference func) bindings ..]
        (let (ms [mutable-bindings obj [ht-create hash-str str= buf2 handler] buf2 handler]) (do
          (select (tuple? .:d-name .:d) (%:ht-iter ms) (~) (do
            [prepend [evaluate-expr [make-symbol d-name null-fragment null-expr buf2 handler] inits meta-exprs func-exprs bindings buf buf2 handler]
              (& bndg-dependencies (@ expr:function-reference func)) ..]))
          [mutate-bindings obj bindings]))))
        (setf bndg-resolved (@ expr:function-reference func) #:1)
        (@ expr:function-reference func)))
      ((expr:meta? .:meta)
        (let (s-container (storage _ s)) (do
          [pre-visit-expressions vgenerate-expr s-container (values storage inits meta-exprs func-exprs bindings buf buf2 handler)]
          [evaluate-expr $:s-container inits meta-exprs func-exprs bindings buf buf2 handler])))
      (do
        (let (expr-container [make-function empty-string nil s null-fragment null-expr buf2 handler])
        (let (expr-val [(@ bndg-offset [assert-binding-resolved [unvisit-binding-resolved
          [evaluate-expr expr-container inits meta-exprs func-exprs bindings buf buf2 handler]] handler])])
        (let (bndg [make-binding empty-string expr-val buf handler]) (do
          (setf bndg-resolved bndg #:1)
          bndg)))))))))

(-- The error that wraps errors thrown by macros.)

(storage meta-expr-error (~))

(-- This function replaces meta-expressions with the code generated by calling the
  corresponding expression builder. It also sets the signatures of constrain-expressions
  to the result of evaluating a signature builder.)

(constrain vgenerate-expr
  (\ r (?(a b) (`(function ((expr ,:b) (values (list initializer) !:Ref:(list (expr ,:b)) (hash-table string (expr ,:b)) (hash-table string bndg-aug) region region ,:a)) (expr ,:b))r)r)))

(function vgenerate-expr (s ctx)
  ((values? .:inits .:meta-exprs .:func-exprs .:bindings .:buf .:buf2 .:handler) ctx
    (with-region buf2
      (switch = (@ expr:type s)
        ((-meta-)
          (let (macro (@ bndg-offset [assert-binding-resolved [unvisit-binding-resolved
              [evaluate-expr (@ expr:meta-target (& expr:meta s)) inits meta-exprs func-exprs bindings buf buf2 handler]] handler]))
            (cps [vgenerate-expr [build-expression [macro [list->fragment [@cdr [frag->list (@ expr:fragment s)]]] buf macro-err] s buf handler] ctx]
              (macro-err (msg) {handler (storage _ meta-expr-error msg)}))))
        
        ((-constrain-)
          (let (macro (@ bndg-offset [assert-binding-resolved [unvisit-binding-resolved
              [evaluate-expr (@ expr:constrain-target (& expr:constrain s)) inits meta-exprs func-exprs bindings buf buf2 handler]] handler]))
            (do (setf bndg-signature (@ expr:binding-aug s) [macro buf]) s)))
        
        s)) (~)))
