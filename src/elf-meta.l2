(-- ELF-64 Object File Format)

(define elf64 (++ (module

  (-- Data representation: ELF64 Data Types)

    (elf64-addr (constant elf64-addr #:8 \:r:[var r]))

    (elf64-off (constant elf64-off #:8 \:r:[var r]))

    (elf64-half (constant elf64-half #:2 \:r:[var r]))

    (elf64-word (constant elf64-word #:4 \:r:[var r]))

    (elf64-sword (constant elf64-sword #:4 \:r:[var r]))

    (elf64-xword (constant elf64-xword #:8 \:r:[var r]))

    (elf64-sxword (constant elf64-sxword #:8 \:r:[var r]))

  (-- File header: ELF-64 Header)

    (elf64-ehdr (constant elf64-ehdr #:64 \:r:[var r]))

    (e-ident (property e-ident #:0 #:16 (\ r (`(! static~ e-ident elf64-ehdr)r))))

    (e-type (property e-type #:16 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-machine (property e-machine #:18 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-version (property e-version #:20 #:4 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-entry (property e-entry #:24 #:8 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-phoff (property e-phoff #:32 #:8 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-shoff (property e-shoff #:40 #:8 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-flags (property e-flags #:48 #:4 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-ehsize (property e-ehsize #:52 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-phentsize (property e-phentsize #:54 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-phnum (property e-phnum #:56 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-shentsize (property e-shentsize #:58 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-shnum (property e-shnum #:60 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

    (e-shstrndx (property e-shstrndx #:62 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r))))

  (-- File header: ELF Identification, e-ident)

    (ei-mag0 (property ei-mag0 #:0 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-mag1 (property ei-mag1 #:1 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-mag2 (property ei-mag2 #:2 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-mag3 (property ei-mag3 #:3 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-class (property ei-class #:4 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-data (property ei-data #:5 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-version (property ei-version #:6 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-osabi (property ei-osabi #:7 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-abiversion (property ei-abiversion #:8 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r))))

    (ei-pad (constant ei-pad #:9 \:r:[var r]))

    (ei-nident (constant ei-nident #:16 \:r:[var r]))

    (elfmag0 (constant elfmag0 0x:7F \:r:[var r]))

    (elfmag1 (constant elfmag1 (char E) \:r:[var r]))

    (elfmag2 (constant elfmag2 (char L) \:r:[var r]))

    (elfmag3 (constant elfmag3 (char F) \:r:[var r]))

  (-- File header: Object File Classes, e-ident > ei-class)

    (elfclass32 (constant elfclass32 #:1 \:r:[var r]))

    (elfclass64 (constant elfclass64 #:2 \:r:[var r]))

  (-- File header: Data Encodings, e-ident > ei-data)

    (elfdata2lsb (constant elfdata2lsb #:1 \:r:[var r]))

    (elfdata3msb (constant elfdata3msb #:2 \:r:[var r]))

  (-- File header: Operating System and ABI Identifiers, e-ident > ei-osabi)

    (elfosabi-sysv (constant elfosabi-sysv #:0 \:r:[var r]))

    (elfosabi-hpux (constant elfosabi-hpux #:1 \:r:[var r]))

    (elfosabi-standalone (constant elfosabi-standalone #:255 \:r:[var r]))

  (-- File header: Object File Types, e-type)

    (et-none (constant et-none #:0 \:r:[var r]))

    (et-rel (constant et-rel #:1 \:r:[var r]))

    (et-exec (constant et-exec #:2 \:r:[var r]))

    (et-dyn (constant et-dyn #:3 \:r:[var r]))

    (et-core (constant et-core #:4 \:r:[var r]))

    (et-loos (constant et-loos 0x:FE00 \:r:[var r]))

    (et-hios (constant et-hios 0x:FEFF \:r:[var r]))

    (et-loproc (constant et-loproc 0x:FF00 \:r:[var r]))

    (et-hiproc (constant et-hiproc 0x:FFFF \:r:[var r]))

  (-- Sections: Section indicies)

    (shn-undef (constant shn-undef #:0 \:r:[var r]))

    (shn-loproc (constant shn-loproc 0x:FF00 \:r:[var r]))

    (shn-hiproc (constant shn-hiproc 0x:FF1F \:r:[var r]))

    (shn-loos (constant shn-loos 0x:FF20 \:r:[var r]))

    (shn-hios (constant shn-hios 0x:FF3F \:r:[var r]))

    (shn-abs (constant shn-abs 0x:FFF1 \:r:[var r]))

    (shn-common (constant shn-common 0x:FFF2 \:r:[var r]))

  (-- Sections: Section header entries)

    (elf64-shdr (constant elf64-shdr #:64 \:r:[var r]))

    (sh-name (property sh-name #:0 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-type (property sh-type #:4 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-flags (property sh-flags #:8 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-addr (property sh-addr #:16 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-offset (property sh-offset #:24 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-size (property sh-size #:32 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-link (property sh-link #:40 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-info (property sh-info #:44 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-addralign (property sh-addralign #:48 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

    (sh-entsize (property sh-entsize #:56 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r)))

  (-- Sections: Section Types)

    (sht-null (constant sht-null #:0 \:r:[var r]))

    (sht-progbits (constant sht-progbits #:1 \:r:[var r]))

    (sht-symtab (constant sht-symtab #:2 \:r:[var r]))

    (sht-strtab (constant sht-strtab #:3 \:r:[var r]))

    (sht-rela (constant sht-rela #:4 \:r:[var r]))

    (sht-hash (constant sht-hash #:5 \:r:[var r]))

    (sht-dynamic (constant sht-dynamic #:6 \:r:[var r]))

    (sht-note (constant sht-note #:7 \:r:[var r]))

    (sht-nobits (constant sht-nobits #:8 \:r:[var r]))

    (sht-rel (constant sht-rel #:9 \:r:[var r]))

    (sht-shlib (constant sht-shlib #:10 \:r:[var r]))

    (sht-dynsym (constant sht-dynsym #:11 \:r:[var r]))

    (sht-loos (constant sht-loos 0x:60000000 \:r:[var r]))

    (sht-hios (constant sht-hios 0x:6FFFFFFF \:r:[var r]))

    (sht-loproc (constant sht-loproc 0x:70000000 \:r:[var r]))

    (sht-hiproc (constant sht-hiproc 0x:7FFFFFFF \:r:[var r]))

  (-- Sections: Section Attributes, sh-flags)

    (shf-write (constant shf-write 0x:1 \:r:[var r]))

    (shf-alloc (constant shf-alloc 0x:2 \:r:[var r]))

    (shf-execinstr (constant shf-execinstr 0x:4 \:r:[var r]))

    (shf-maskos (constant shf-maskos 0x:0F000000 \:r:[var r]))

    (shf-maskproc (constant shf-maskproc 0x:F0000000 \:r:[var r]))

  (-- Symbol Table: ELF-64 Symbol Table Entry)

    (elf64-sym (constant elf64-sym #:24 \:r:[var r]))

    (st-name (property st-name #:0 #:4 \:r:(`(! static~ ,:[var r] elf64-sym)r)))

    (st-info (property st-info #:4 #:1 \:r:(`(! static~ ,:[var r] elf64-sym)r)))

    (st-other (property st-other #:5 #:1 \:r:(`(! static~ ,:[var r] elf64-sym)r)))

    (st-shndx (property st-shndx #:6 #:2 \:r:(`(! static~ ,:[var r] elf64-sym)r)))

    (st-value (property st-value #:8 #:8 \:r:(`(! static~ ,:[var r] elf64-sym)r)))

    (st-size (property st-size #:16 #:8 \:r:(`(! static~ ,:[var r] elf64-sym)r)))

  (-- Symbol Table: Symbol Bindings)

    (stb-local (constant stb-local #:0 \:r:[var r]))

    (stb-global (constant stb-global #:1 \:r:[var r]))

    (stb-weak (constant stb-weak #:2 \:r:[var r]))

    (stb-loos (constant stb-loos #:10 \:r:[var r]))

    (stb-hios (constant stb-hios #:12 \:r:[var r]))

    (stb-loproc (constant stb-loproc #:13 \:r:[var r]))

    (stb-hiproc (constant stb-hiproc #:15 \:r:[var r]))

    (elf64-st-bind (function elf64-st-bind (l r) (`[>> (,[@fst l]) #:4]r)))

    (elf64-st-type (function elf64-st-type (l r) (`[band (,[@fst l]) #:15]r)))

    (elf64-st-info (function elf64-st-info (l r) (`[+ [<< (,[@fst l]) #:4] [band (,[@frst l]) #:15]]r)))

  (-- Symbol Table: Symbol Types)

    (stt-notype (constant stt-notype #:0 \:r:[var r]))

    (stt-object (constant stt-object #:1 \:r:[var r]))

    (stt-func (constant stt-func #:2 \:r:[var r]))

    (stt-section (constant stt-section #:3 \:r:[var r]))

    (stt-file (constant stt-file #:4 \:r:[var r]))

    (stt-loos (constant stt-loos #:10 \:r:[var r]))

    (stt-hios (constant stt-hios #:12 \:r:[var r]))

    (stt-loproc (constant stt-loproc #:13 \:r:[var r]))

    (stt-hiproc (constant stt-hiproc #:15 \:r:[var r]))

  (-- Relocations: ELF-64 Relocation Entries)

    (elf64-rel (constant elf64-rel #:16 \:r:[var r]))

    (elf64-rela (constant elf64-rela #:24 \:r:[var r]))

    (r-offset (property r-offset #:0 #:8 \:r:(`(! static~ ,:[var r] elf64-rela)r)))

    (r-info (property r-info #:8 #:8 \:r:(`(! static~ ,:[var r] elf64-rela)r)))

    (r-addend (property r-addend #:16 #:8 \:r:(`(! static~ ,:[var r] elf64-rela)r)))

    (elf64-r-sym (function elf64-r-sym (l r) (`[>> (,[@fst l]) #:32]r)))

    (elf64-r-type (function elf64-r-type (l r) (`[band (,[@fst l]) 0x:FFFFFFFF]r)))

    (elf64-r-info (function elf64-r-info (l r) (`[+ [<< (,[@fst l]) #:32] [band (,[@frst l]) 0x:FFFFFFFF]]r)))

  (-- System V Application Binary Interface: AMD64 Architecture Processor Supplement)

  (-- Machine Information: Processor Identification)

    (em-x86-64 (constant em-x86-64 #:62 \:r:[var r]))

  (-- Sections: Section Flags)

    (shf-x86-64-large (constant shf-x86-64-large 0x:10000000 \:r:[var r]))

  (-- Sections: Section Types)

    (sht-x86-64-unwind (constant sht-x86-64-unwind 0x:70000001 \:r:[var r]))

  (-- Relocation: Relocation Types)

    (r-x86-64-none (constant r-x86-64-none #:0 \:r:[var r]))

    (r-x86-64-64 (constant r-x86-64-64 #:1 \:r:[var r]))

    (r-x86-64-pc32 (constant r-x86-64-pc32 #:2 \:r:[var r]))

    (r-x86-64-got32 (constant r-x86-64-got32 #:3 \:r:[var r]))

    (r-x86-64-plt32 (constant r-x86-64-plt32 #:4 \:r:[var r]))

    (r-x86-64-copy (constant r-x86-64-copy #:5 \:r:[var r]))

    (r-x86-64-glob-dat (constant r-x86-64-glob-dat #:6 \:r:[var r]))

    (r-x86-64-jump-slot (constant r-x86-64-jump-slot #:7 \:r:[var r]))

    (r-x86-64-relative (constant r-x86-64-relative #:8 \:r:[var r]))

    (r-x86-64-gotpcrel (constant r-x86-64-gotpcrel #:9 \:r:[var r]))

    (r-x86-64-32 (constant r-x86-64-32 #:10 \:r:[var r]))

    (r-x86-64-32s (constant r-x86-64-32s #:11 \:r:[var r]))

    (r-x86-64-16 (constant r-x86-64-16 #:12 \:r:[var r]))

    (r-x86-64-pc16 (constant r-x86-64-pc16 #:13 \:r:[var r]))

    (r-x86-64-8 (constant r-x86-64-8 #:14 \:r:[var r]))

    (r-x86-64-pc8 (constant r-x86-64-pc8 #:15 \:r:[var r]))

    (r-x86-64-dtpmod64 (constant r-x86-64-dtpmod64 #:16 \:r:[var r]))

    (r-x86-64-dtpoff64 (constant r-x86-64-dtpoff64 #:17 \:r:[var r]))

    (r-x86-64-tposs64 (constant r-x86-64-tposs64 #:18 \:r:[var r]))

    (r-x86-64-tlsgd (constant r-x86-64-tlsgd #:19 \:r:[var r]))

    (r-x86-64-tlsld (constant r-x86-64-tlsld #:20 \:r:[var r]))

    (r-x86-64-dtpoff32 (constant r-x86-64-dtpoff32 #:21 \:r:[var r]))

    (r-x86-64-gottpoff (constant r-x86-64-gottpoff #:22 \:r:[var r]))

    (r-x86-64-tpoff32 (constant r-x86-64-tpoff32 #:23 \:r:[var r]))

    (r-x86-64-pc64 (constant r-x86-64-pc64 #:24 \:r:[var r]))

    (r-x86-64-gotoff64 (constant r-x86-64-gotoff64 #:25 \:r:[var r]))

    (r-x86-64-gotpc32 (constant r-x86-64-gotpc32 #:26 \:r:[var r]))

    (r-x86-64-size32 (constant r-x86-64-size32 #:32 \:r:[var r]))

    (r-x86-64-size64 (constant r-x86-64-size64 #:33 \:r:[var r]))

    (r-x86-64-gotpc32-tlsdesc (constant r-x86-64-gotpc32-tlsdesc #:34 \:r:[var r]))

    (r-x86-64-tlsdesc-call (constant r-x86-64-tlsdesc-call #:35 \:r:[var r]))

    (r-x86-64-tlsdesc (constant r-x86-64-tlsdesc #:36 \:r:[var r]))

    (r-x86-64-irelative (constant r-x86-64-irelative #:37 \:r:[var r]))

    (r-x86-64-relative64 (constant r-x86-64-relative64 #:38 \:r:[var r]))

    (r-x86-64-gotpcrelx (constant r-x86-64-gotpcrelx #:41 \:r:[var r]))

    (r-x86-64-rex-gotpcrelx (constant r-x86-64-rex-gotpcrelx #:42 \:r:[var r]))

(-- ELF-64 Object File Format structures but with addresses instead of offsets and indicies.
  This serves to ease the construction and parsing of ELF-64 Object Files.)
  
  (-- File header and body: ELF-64 Header and Body)

    (linked-elf64-e (constant linked-elf64-e #:40 \:r:[var r]))

    (lkde-raw (property lkde-raw #:0 #:8 (\ r (`(! static~ elf64-ehdr linked-elf64-e)r))))

    (lkde-ph (property lkde-ph #:8 #:8 (\ r (`(! static~ (list linked-elf64-ph) linked-elf64-e)r))))

    (lkde-sh (property lkde-sh #:16 #:8 (\ r (`(! static~ (list linked-elf64-sh) linked-elf64-e)r))))

    (lkde-shstr (property lkde-shstr #:24 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-e)r))))
    
    (lkde-undef (property lkde-undef #:32 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-e)r))))
  
  (-- Sections: Section header entries)

    (linked-elf64-sh (constant linked-elf64-sh #:48 \:r:[var r]))
    
    (lkdsh-raw (property lkdsh-raw #:0 #:8 (\ r (`(! static~ elf64-shdr linked-elf64-sh)r))))
    
    (lkdsh-name (property lkdsh-name #:8 #:8 (\ r (`(! static~ linked-elf64-strtab linked-elf64-sh)r))))

    (lkdsh-offset (property lkdsh-offset #:16 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sh)r))))
    
    (lkdsh-symtab (property lkdsh-symtab #:16 #:8 (\ r (`(! static~ (list linked-elf64-sym) linked-elf64-sh)r))))
    
    (lkdsh-strtab (property lkdsh-strtab #:16 #:8 (\ r (`(! static~ (list linked-elf64-strtab) linked-elf64-sh)r))))
    
    (lkdsh-rela (property lkdsh-rela #:16 #:8 (\ r (`(! static~ (list linked-elf64-rela) linked-elf64-sh)r))))

    (lkdsh-link (property lkdsh-link #:24 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-sh)r))))

    (lkdsh-rela-info (property lkdsh-rela-info #:32 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-sh)r))))
    
    (lkdsh-ndx (property lkdsh-ndx #:40 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sh)r))))
  
  (-- Symbol Table: ELF-64 Symbol Table Entry)

    (linked-elf64-sym (constant linked-elf64-sym #:40 \:r:[var r]))
    
    (lkdst-raw (property lkdst-raw #:0 #:8 (\ r (`(! static~ elf64-sym linked-elf64-sym)r))))

    (lkdst-name (property lkdst-name #:8 #:8 (\ r (`(! static~ linked-elf64-strtab linked-elf64-sym)r))))

    (lkdst-sh (property lkdst-sh #:16 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-sym)r))))
    
    (lkdst-ndx (property lkdst-ndx #:24 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sym)r))))
    
    (lkdst-other (property lkdst-other #:32 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sym)r))))
  
  (-- Relocations: ELF-64 Relocation Entries)

    (linked-elf64-rela (constant linked-elf64-rela #:16 \:r:[var r]))

    (lkdr-raw (property lkdr-raw #:0 #:8 (\ r (`(! static~ elf64-rela linked-elf64-rela)r))))

    (lkdr-info-sym (property lkdr-info-sym #:8 #:8 (\ r (`(! static~ linked-elf64-sym linked-elf64-rela)r))))
  
  (-- String Table: ELF-64 String Table Entry)
  
    (linked-elf64-strtab (constant linked-elf64-strtab #:16 \:r:[var r]))
    
    (lkdstrt-raw (property lkdstrt-raw #:0 #:8 (\ r (`(! static~ string linked-elf64-strtab)r))))
    
    (lkdstrt-ndx (property lkdstrt-ndx #:8 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-strtab)r)))))))

(constrain make-lkdstrt (\ r (?(a) (`(function (string region ,:a) linked-elf64-strtab)r)r)))

(function make-lkdstrt (str buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkdstrt [region-alloc (L:linked-elf64-strtab) ..])
      (L:lkdstrt-raw str))))

(constrain make-lkdr (\ r (?(a) (`(function (linked-elf64-sym region ,:a) linked-elf64-rela)r)r)))

(function make-lkdr (info-sym buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkdr [region-alloc (L:linked-elf64-rela) ..])
      (L:lkdr-raw [region-alloc (L:elf64-rela) ..])
      (L:lkdr-info-sym info-sym))))

(constrain make-lkdst (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,:a) linked-elf64-sym)r)r)))

(function make-lkdst (name sh buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkdst [region-alloc (L:linked-elf64-sym) ..])
      (L:lkdst-raw [region-alloc (L:elf64-sym) ..])
      (L:lkdst-name name)
      (L:lkdst-sh sh))))

(constrain make-lkdsymtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-sym) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdsymtab (name link symtab buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkdsh [region-alloc (L:linked-elf64-sh) ..])
      (L:lkdsh-raw [region-alloc (L:elf64-shdr) ..])
      (L:lkdsh-raw (setf L:sh-type (@ L:lkdsh-raw lkdsh) (L:sht-symtab)))
      (L:lkdsh-name name)
      (L:lkdsh-link link)
      (L:lkdsh-symtab symtab))))

(constrain make-lkdstrtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-strtab) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdstrtab (name link strtab buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkdsh [region-alloc (L:linked-elf64-sh) ..])
      (L:lkdsh-raw [region-alloc (L:elf64-shdr) ..])
      (L:lkdsh-raw (setf L:sh-type (@ L:lkdsh-raw lkdsh) (L:sht-strtab)))
      (L:lkdsh-name name)
      (L:lkdsh-strtab strtab)
      (L:lkdsh-link link))))

(constrain make-lkdrela
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh linked-elf64-sh (list linked-elf64-rela) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdrela (name link info rela buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkdsh [region-alloc (L:linked-elf64-sh) ..])
      (L:lkdsh-raw [region-alloc (L:elf64-shdr) ..])
      (L:lkdsh-raw (setf L:sh-type (@ L:lkdsh-raw lkdsh) (L:sht-rela)))
      (L:lkdsh-name name)
      (L:lkdsh-rela rela)
      (L:lkdsh-link link)
      (L:lkdsh-rela-info info))))

(constrain make-lkds
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,:a) linked-elf64-sh)r)r)))

(function make-lkds (name link buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkdsh [region-alloc (L:linked-elf64-sh) ..])
      (L:lkdsh-raw [region-alloc (L:elf64-shdr) ..])
      (L:lkdsh-name name)
      (L:lkdsh-link link))))

(constrain make-lkde
  (\ r (?(a) (`(function ((list linked-elf64-ph) (list linked-elf64-sh) linked-elf64-sh linked-elf64-sh region ,:a)
    linked-elf64-e)r)r)))

(function make-lkde (ph sh undef shstr buf hdl)
  (sub (L elf64) (.. buf hdl)
    (record (lkde [region-alloc (L:linked-elf64-e) ..])
      (L:lkde-raw [region-alloc (L:elf64-ehdr) ..])
      (L:lkde-ph ph)
      (L:lkde-sh sh)
      (L:lkde-undef undef)
      (L:lkde-shstr shstr))))
