(constrain = (\ r (?(a b) (`(function (,a ,a) ,b)r)r)))

(constrain < (\ r (?(a b) (`(function (,a ,a) ,b)r)r)))

(constrain > (\ r (?(a b) (`(function (,a ,a) ,b)r)r)))

(constrain <= (\ r (?(a b) (`(function (,a ,a) ,b)r)r)))

(function <= (a b) (not [> a b]))

(constrain >= (\ r (?(a b) (`(function (,a ,a) ,b)r)r)))

(function >= (a b) (not [< a b]))

(constrain not= (\ r (?(a b) (`(function (,a ,a) ,b)r)r)))

(function not= (a b) (not [= a b]))

(constrain max (\ r (?(a) (`(function (,a ,a) ,a)r)r)))

(function max (a b) (if [> a b] a b))

(constrain min (\ r (?(a) (`(function (,a ,a) ,a)r)r)))

(function min (a b) (if [< a b] a b))

(constrain set+ (\ r (?(a b) (`(function ((ref ,a) ,b) ())r)r)))

(function set+ (r inc) [set r [+ $:r inc]])

(constrain set- (\ r (?(a b) (`(function ((ref ,a) ,b) ())r)r)))

(function set- (r inc) [set r [- $:r inc]])

(ignore Turns an 8-byte value into a literal-expression representation of it.)

(function =# (binary r)
  [lst [lllllllst -l- -i- -t- -e- -r- -a- -l- emt r]
    [lst (with return {(continuation write (count in out)
        (if count
          {write [- count (literal 0000000000000000000000000000000000000000000000000000000000000001)]
            [>> in (literal 0000000000000000000000000000000000000000000000000000000000000001)]
            [lst (if [band in (literal 0000000000000000000000000000000000000000000000000000000000000001)]
              -1- -0-) out r]}
          {return out}))
        (literal 0000000000000000000000000000000000000000000000000000000001000000) binary emt})
      emt r]r])

(ignore Makes a constant that is constrained to the given signature from the given value.)

(function =## (value sig r) (`(constrain (,[=# value r]) (,[=# sig r]))r))

(ignore Turns the base-10 fragment input into a literal expression.)

(function # (l r) [=#
  (with return {(continuation read (in out)
    (if [emt? in]
      {return out}
      {read [@rst in] [+ [* out (literal 0000000000000000000000000000000000000000000000000000000000001010)]
        (if [char= [@fst in] -9-] (literal 0000000000000000000000000000000000000000000000000000000000001001)
        (if [char= [@fst in] -8-] (literal 0000000000000000000000000000000000000000000000000000000000001000)
        (if [char= [@fst in] -7-] (literal 0000000000000000000000000000000000000000000000000000000000000111)
        (if [char= [@fst in] -6-] (literal 0000000000000000000000000000000000000000000000000000000000000110)
        (if [char= [@fst in] -5-] (literal 0000000000000000000000000000000000000000000000000000000000000101)
        (if [char= [@fst in] -4-] (literal 0000000000000000000000000000000000000000000000000000000000000100)
        (if [char= [@fst in] -3-] (literal 0000000000000000000000000000000000000000000000000000000000000011)
        (if [char= [@fst in] -2-] (literal 0000000000000000000000000000000000000000000000000000000000000010)
        (if [char= [@fst in] -1-] (literal 0000000000000000000000000000000000000000000000000000000000000001)
          (literal 0000000000000000000000000000000000000000000000000000000000000000))))))))))]}))
    [@fst l] (literal 0000000000000000000000000000000000000000000000000000000000000000)}) r])

(ignore Turns the base-16 fragment input into a literal expression. Only capital letters are valid.)

(function hex (l r) [=#
  (with return {(continuation read (in out)
    (if [emt? in]
      {return out}
      {read [@rst in] [+ [* out (literal 0000000000000000000000000000000000000000000000000000000000010000)]
        (if [char= [@fst in] -F-] (literal 0000000000000000000000000000000000000000000000000000000000001111)
        (if [char= [@fst in] -E-] (literal 0000000000000000000000000000000000000000000000000000000000001110)
        (if [char= [@fst in] -D-] (literal 0000000000000000000000000000000000000000000000000000000000001101)
        (if [char= [@fst in] -C-] (literal 0000000000000000000000000000000000000000000000000000000000001100)
        (if [char= [@fst in] -B-] (literal 0000000000000000000000000000000000000000000000000000000000001011)
        (if [char= [@fst in] -A-] (literal 0000000000000000000000000000000000000000000000000000000000001010)
        (if [char= [@fst in] -9-] (literal 0000000000000000000000000000000000000000000000000000000000001001)
        (if [char= [@fst in] -8-] (literal 0000000000000000000000000000000000000000000000000000000000001000)
        (if [char= [@fst in] -7-] (literal 0000000000000000000000000000000000000000000000000000000000000111)
        (if [char= [@fst in] -6-] (literal 0000000000000000000000000000000000000000000000000000000000000110)
        (if [char= [@fst in] -5-] (literal 0000000000000000000000000000000000000000000000000000000000000101)
        (if [char= [@fst in] -4-] (literal 0000000000000000000000000000000000000000000000000000000000000100)
        (if [char= [@fst in] -3-] (literal 0000000000000000000000000000000000000000000000000000000000000011)
        (if [char= [@fst in] -2-] (literal 0000000000000000000000000000000000000000000000000000000000000010)
        (if [char= [@fst in] -1-] (literal 0000000000000000000000000000000000000000000000000000000000000001)
          (literal 0000000000000000000000000000000000000000000000000000000000000000))))))))))))))))]}))
    [@fst l] (literal 0000000000000000000000000000000000000000000000000000000000000000)}) r])

