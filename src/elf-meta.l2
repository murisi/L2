(ignore ELF-64 Object File Format)

  (ignore Data representation: ELF64 Data Types)

    (function elf64-addr (l r) [=# #:8 r])

    (function elf64-off (l r) [=# #:8 r])

    (function elf64-half (l r) [=# #:2 r])

    (function elf64-word (l r) [=# #:4 r])

    (function elf64-sword (l r) [=# #:4 r])

    (function elf64-xword (l r) [=# #:8 r])

    (function elf64-sxword (l r) [=# #:8 r])

  (ignore File header: ELF-64 Header)

    (function elf64-ehdr (l r) [=# #:64 r])

    (property e-ident #:0 #:16 (\ r (`(; static~ e-ident elf64-ehdr)r)))

    (property e-type #:16 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-machine #:18 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-version #:20 #:4 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-entry #:24 #:8 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-phoff #:32 #:8 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-shoff #:40 #:8 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-flags #:48 #:4 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-ehsize #:52 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-phentsize #:54 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-phnum #:56 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-shentsize #:58 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-shnum #:60 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

    (property e-shstrndx #:62 #:2 (\ r (`(; static~ (,[var r]) elf64-ehdr)r)))

  (ignore File header: ELF Identification, e-ident)

    (property ei-mag0 #:0 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-mag1 #:1 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-mag2 #:2 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-mag3 #:3 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-class #:4 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-data #:5 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-version #:6 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-osabi #:7 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (property ei-abiversion #:8 #:1 (\ r (`(; static~ (,[var r]) (ref e-ident))r)))

    (function ei-pad (l r) [=# #:9 r])

    (function ei-nident (l r) [=# #:16 r])

    (function elfmag0 (l r) [=# 0x:7F r])

    (function elfmag1 (l r) [=# (char E) r])

    (function elfmag2 (l r) [=# (char L) r])

    (function elfmag3 (l r) [=# (char F) r])

  (ignore File header: Object File Classes, e-ident > ei-class)

    (function elfclass32 (l r) [=# #:1 r])

    (function elfclass64 (l r) [=# #:2 r])

  (ignore File header: Data Encodings, e-ident > ei-data)

    (function elfdata2lsb (l r) [=# #:1 r])

    (function elfdata3msb (l r) [=# #:2 r])

  (ignore File header: Operating System and ABI Identifiers, e-ident > ei-osabi)

    (function elfosabi-sysv (l r) [=# #:0 r])

    (function elfosabi-hpux (l r) [=# #:1 r])

    (function elfosabi-standalone (l r) [=# #:255 r])

  (ignore File header: Object File Types, e-type)

    (function et-none (l r) [=# #:0 r])

    (function et-rel (l r) [=# #:1 r])

    (function et-exec (l r) [=# #:2 r])

    (function et-dyn (l r) [=# #:3 r])

    (function et-core (l r) [=# #:4 r])

    (function et-loos (l r) [=# 0x:FE00 r])

    (function et-hios (l r) [=# 0x:FEFF r])

    (function et-loproc (l r) [=# 0x:FF00 r])

    (function et-hiproc (l r) [=# 0x:FFFF r])

  (ignore Sections: Section indicies)

    (function shn-undef (l r) [=# #:0 r])

    (function shn-loproc (l r) [=# 0x:FF00 r])

    (function shn-hiproc (l r) [=# 0x:FF1F r])

    (function shn-loos (l r) [=# 0x:FF20 r])

    (function shn-hios (l r) [=# 0x:FF3F r])

    (function shn-abs (l r) [=# 0x:FFF1 r])

    (function shn-common (l r) [=# 0x:FFF2 r])

  (ignore Sections: Section header entries)

    (function elf64-shdr (l r) [=# #:64 r])

    (property sh-name #:0 #:4 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-type #:4 #:4 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-flags #:8 #:8 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-addr #:16 #:8 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-offset #:24 #:8 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-size #:32 #:8 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-link #:40 #:4 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-info #:44 #:4 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-addralign #:48 #:8 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

    (property sh-entsize #:56 #:8 \:r:(`(; static~ ,:[var r] elf64-shdr)r))

  (ignore Sections: Section Types)

    (constant sht-null #:0 \:r:[var r])

    (constant sht-progbits #:1 \:r:[var r])

    (constant sht-symtab #:2 \:r:[var r])

    (constant sht-strtab #:3 \:r:[var r])

    (constant sht-rela #:4 \:r:[var r])

    (constant sht-hash #:5 \:r:[var r])

    (constant sht-dynamic #:6 \:r:[var r])

    (constant sht-note #:7 \:r:[var r])

    (constant sht-nobits #:8 \:r:[var r])

    (constant sht-rel #:9 \:r:[var r])

    (constant sht-shlib #:10 \:r:[var r])

    (constant sht-dynsym #:11 \:r:[var r])

    (constant sht-loos 0x:60000000 \:r:[var r])

    (constant sht-hios 0x:6FFFFFFF \:r:[var r])

    (constant sht-loproc 0x:70000000 \:r:[var r])

    (constant sht-hiproc 0x:7FFFFFFF \:r:[var r])

  (ignore Sections: Section Attributes, sh-flags)

    (function shf-write (l r) [=# 0x:1 r])

    (function shf-alloc (l r) [=# 0x:2 r])

    (function shf-execinstr (l r) [=# 0x:4 r])

    (function shf-maskos (l r) [=# 0x:0F000000 r])

    (function shf-maskproc (l r) [=# 0x:F0000000 r])

  (ignore Symbol Table: ELF-64 Symbol Table Entry)

    (function elf64-sym (l r) [=# #:24 r])

    (property st-name #:0 #:4 (\ r (`(; static~ (,[var r]) elf64-sym)r)))

    (property st-info #:4 #:1 (\ r (`(; static~ (,[var r]) elf64-sym)r)))

    (property st-other #:5 #:1 (\ r (`(; static~ (,[var r]) elf64-sym)r)))

    (property st-shndx #:6 #:2 (\ r (`(; static~ (,[var r]) elf64-sym)r)))

    (property st-value #:8 #:8 (\ r (`(; static~ (,[var r]) elf64-sym)r)))

    (property st-size #:16 #:8 (\ r (`(; static~ (,[var r]) elf64-sym)r)))

  (ignore Symbol Table: Symbol Bindings)

    (function stb-local (l r) [=# #:0 r])

    (function stb-global (l r) [=# #:1 r])

    (function stb-weak (l r) [=# #:2 r])

    (function stb-loos (l r) [=# #:10 r])

    (function stb-hios (l r) [=# #:12 r])

    (function stb-loproc (l r) [=# #:13 r])

    (function stb-hiproc (l r) [=# #:15 r])

    (function elf64-st-bind (l r) (`[>> (,[@fst l]) #:4]r))

    (function elf64-st-type (l r) (`[band (,[@fst l]) #:15]r))

    (function elf64-st-info (l r) (`[+ [<< (,[@fst l]) #:4] [band (,[@frst l]) #:15]]r))

  (ignore Symbol Table: Symbol Types)

    (function stt-notype (l r) [=# #:0 r])

    (function stt-object (l r) [=# #:1 r])

    (function stt-func (l r) [=# #:2 r])

    (function stt-section (l r) [=# #:3 r])

    (function stt-file (l r) [=# #:4 r])

    (function stt-loos (l r) [=# #:10 r])

    (function stt-hios (l r) [=# #:12 r])

    (function stt-loproc (l r) [=# #:13 r])

    (function stt-hiproc (l r) [=# #:15 r])

  (ignore Relocations: ELF-64 Relocation Entries)

    (function elf64-rel (l r) [=# #:16 r])

    (function elf64-rela (l r) [=# #:24 r])

    (property r-offset #:0 #:8 (\ r (`(; static~ (,[var r]) elf64-rela)r)))

    (property r-info #:8 #:8 (\ r (`(; static~ (,[var r]) elf64-rela)r)))

    (property r-addend #:16 #:8 (\ r (`(; static~ (,[var r]) elf64-rela)r)))

    (function elf64-r-sym (l r) (`[>> (,[@fst l]) #:32]r))

    (function elf64-r-type (l r) (`[band (,[@fst l]) 0x:FFFFFFFF]r))

    (function elf64-r-info (l r) (`[+ [<< (,[@fst l]) #:32] [band (,[@frst l]) 0x:FFFFFFFF]]r))

  (ignore System V Application Binary Interface: AMD64 Architecture Processor Supplement)

  (ignore Machine Information: Processor Identification)

    (function em-x86-64 (l r) [=# #:62 r])

  (ignore Sections: Section Flags)

    (function shf-x86-64-large (l r) [=# 0x:10000000 r])

  (ignore Sections: Section Types)

    (function sht-x86-64-unwind (l r) [=# 0x:70000001 r])

  (ignore Relocation: Relocation Types)

    (function r-x86-64-none (l r) [=# #:0 r])

    (function r-x86-64-64 (l r) [=# #:1 r])

    (function r-x86-64-pc32 (l r) [=# #:2 r])

    (function r-x86-64-got32 (l r) [=# #:3 r])

    (function r-x86-64-plt32 (l r) [=# #:4 r])

    (function r-x86-64-copy (l r) [=# #:5 r])

    (function r-x86-64-glob-dat (l r) [=# #:6 r])

    (function r-x86-64-jump-slot (l r) [=# #:7 r])

    (function r-x86-64-relative (l r) [=# #:8 r])

    (function r-x86-64-gotpcrel (l r) [=# #:9 r])

    (function r-x86-64-32 (l r) [=# #:10 r])

    (function r-x86-64-32s (l r) [=# #:11 r])

    (function r-x86-64-16 (l r) [=# #:12 r])

    (function r-x86-64-pc16 (l r) [=# #:13 r])

    (function r-x86-64-8 (l r) [=# #:14 r])

    (function r-x86-64-pc8 (l r) [=# #:15 r])

    (function r-x86-64-dtpmod64 (l r) [=# #:16 r])

    (function r-x86-64-dtpoff64 (l r) [=# #:17 r])

    (function r-x86-64-tposs64 (l r) [=# #:18 r])

    (function r-x86-64-tlsgd (l r) [=# #:19 r])

    (function r-x86-64-tlsld (l r) [=# #:20 r])

    (function r-x86-64-dtpoff32 (l r) [=# #:21 r])

    (function r-x86-64-gottpoff (l r) [=# #:22 r])

    (function r-x86-64-tpoff32 (l r) [=# #:23 r])

    (function r-x86-64-pc64 (l r) [=# #:24 r])

    (function r-x86-64-gotoff64 (l r) [=# #:25 r])

    (function r-x86-64-gotpc32 (l r) [=# #:26 r])

    (function r-x86-64-size32 (l r) [=# #:32 r])

    (function r-x86-64-size64 (l r) [=# #:33 r])

    (function r-x86-64-gotpc32-tlsdesc (l r) [=# #:34 r])

    (function r-x86-64-tlsdesc-call (l r) [=# #:35 r])

    (function r-x86-64-tlsdesc (l r) [=# #:36 r])

    (function r-x86-64-irelative (l r) [=# #:37 r])

    (function r-x86-64-relative64 (l r) [=# #:38 r])

    (function r-x86-64-gotpcrelx (l r) [=# #:41 r])

    (function r-x86-64-rex-gotpcrelx (l r) [=# #:42 r])

(ignore
  ELF-64 Object File Format structures but with addresses instead of offsets and indicies.
  This serves to ease the construction and parsing of ELF-64 Object Files.)
  
  (ignore File header and body: ELF-64 Header and Body)

    (function linked-elf64-e (l r) [=# #:40 r])

    (property lkde-raw #:0 #:8 (\ r (`(; static~ elf64-ehdr linked-elf64-e)r)))

    (property lkde-ph #:8 #:8 (\ r (`(; static~ (list linked-elf64-ph) linked-elf64-e)r)))

    (property lkde-sh #:16 #:8 (\ r (`(; static~ (list linked-elf64-sh) linked-elf64-e)r)))

    (property lkde-shstr #:24 #:8 (\ r (`(; static~ linked-elf64-sh linked-elf64-e)r)))
    
    (property lkde-undef #:32 #:8 (\ r (`(; static~ linked-elf64-sh linked-elf64-e)r)))
  
  (ignore Sections: Section header entries)

    (function linked-elf64-sh (l r) [=# #:48 r])
    
    (property lkdsh-raw #:0 #:8 (\ r (`(; static~ elf64-shdr linked-elf64-sh)r)))
    
    (property lkdsh-name #:8 #:8 (\ r (`(; static~ linked-elf64-strtab linked-elf64-sh)r)))

    (property lkdsh-offset #:16 #:8 (\ r (`(; static~ (,[var r]) linked-elf64-sh)r)))
    
    (property lkdsh-symtab #:16 #:8 (\ r (`(; static~ (list linked-elf64-sym) linked-elf64-sh)r)))
    
    (property lkdsh-strtab #:16 #:8 (\ r (`(; static~ (list linked-elf64-strtab) linked-elf64-sh)r)))
    
    (property lkdsh-rela #:16 #:8 (\ r (`(; static~ (list linked-elf64-rela) linked-elf64-sh)r)))

    (property lkdsh-link #:24 #:8 (\ r (`(; static~ linked-elf64-sh linked-elf64-sh)r)))

    (property lkdsh-rela-info #:32 #:8 (\ r (`(; static~ linked-elf64-sh linked-elf64-sh)r)))
    
    (property lkdsh-ndx #:40 #:8 (\ r (`(; static~ (,[var r]) linked-elf64-sh)r)))
  
  (ignore Symbol Table: ELF-64 Symbol Table Entry)

    (function linked-elf64-sym (l r) [=# #:40 r])
    
    (property lkdst-raw #:0 #:8 (\ r (`(; static~ elf64-sym linked-elf64-sym)r)))

    (property lkdst-name #:8 #:8 (\ r (`(; static~ linked-elf64-strtab linked-elf64-sym)r)))

    (property lkdst-sh #:16 #:8 (\ r (`(; static~ linked-elf64-sh linked-elf64-sym)r)))
    
    (property lkdst-ndx #:24 #:8 (\ r (`(; static~ (,[var r]) linked-elf64-sym)r)))
    
    (property lkdst-other #:32 #:8 (\ r (`(; static~ (,[var r]) linked-elf64-sym)r)))
  
  (ignore Relocations: ELF-64 Relocation Entries)

    (function linked-elf64-rela (l r) [=# #:16 r])

    (property lkdr-raw #:0 #:8 (\ r (`(; static~ elf64-rela linked-elf64-rela)r)))

    (property lkdr-info-sym #:8 #:8 (\ r (`(; static~ linked-elf64-sym linked-elf64-rela)r)))
  
  (ignore String Table: ELF-64 String Table Entry)
  
    (function linked-elf64-strtab (l r) [=# #:16 r])
    
    (property lkdstrt-raw #:0 #:8 (\ r (`(; static~ string linked-elf64-strtab)r)))
    
    (property lkdstrt-ndx #:8 #:8 (\ r (`(; static~ (,[var r]) linked-elf64-strtab)r)))

(constrain make-lkdstrt (\ r (?(a) (`(function (string region ,:a) linked-elf64-strtab)r)r)))

(function make-lkdstrt (str buf hdl)
  (substitute (.. buf hdl)
    (record (lkdstrt [region-alloc (linked-elf64-strtab) ..])
      (lkdstrt-raw str))))

(constrain make-lkdr (\ r (?(a) (`(function (linked-elf64-sym region ,:a) linked-elf64-rela)r)r)))

(function make-lkdr (info-sym buf hdl)
  (substitute (.. buf hdl)
    (record (lkdr [region-alloc (linked-elf64-rela) ..])
      (lkdr-raw [region-alloc (elf64-rela) ..])
      (lkdr-info-sym info-sym))))

(constrain make-lkdst (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,:a) linked-elf64-sym)r)r)))

(function make-lkdst (name sh buf hdl)
  (substitute (.. buf hdl)
    (record (lkdst [region-alloc (linked-elf64-sym) ..])
      (lkdst-raw [region-alloc (elf64-sym) ..])
      (lkdst-name name)
      (lkdst-sh sh))))

(constrain make-lkdsymtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-sym) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdsymtab (name link symtab buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-symtab)))
      (lkdsh-name name)
      (lkdsh-link link)
      (lkdsh-symtab symtab))))

(constrain make-lkdstrtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-strtab) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdstrtab (name link strtab buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-strtab)))
      (lkdsh-name name)
      (lkdsh-strtab strtab)
      (lkdsh-link link))))

(constrain make-lkdrela
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh linked-elf64-sh (list linked-elf64-rela) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdrela (name link info rela buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-rela)))
      (lkdsh-name name)
      (lkdsh-rela rela)
      (lkdsh-link link)
      (lkdsh-rela-info info))))

(constrain make-lkds
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,:a) linked-elf64-sh)r)r)))

(function make-lkds (name link buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-name name)
      (lkdsh-link link))))

(constrain make-lkde
  (\ r (?(a) (`(function ((list linked-elf64-ph) (list linked-elf64-sh) linked-elf64-sh linked-elf64-sh region ,:a)
    linked-elf64-e)r)r)))

(function make-lkde (ph sh undef shstr buf hdl)
  (substitute (.. buf hdl)
    (record (lkde [region-alloc (linked-elf64-e) ..])
      (lkde-raw [region-alloc (elf64-ehdr) ..])
      (lkde-ph ph)
      (lkde-sh sh)
      (lkde-undef undef)
      (lkde-shstr shstr))))
