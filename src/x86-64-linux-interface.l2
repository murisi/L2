(ignore x86-64 Linux specific constants.)

(ignore x86-64 Linux system-call numbers.)

  (function sys-read (l r) [=## #0 (\ r (` syscall-num r)) r])

  (function sys-write (l r) [=## #1 (\ r (` syscall-num r)) r])

  (function sys-open (l r) [=## #2 (\ r (` syscall-num r)) r])

  (function sys-close (l r) [=## #3 (\ r (` syscall-num r)) r])

  (function sys-fstat (l r) [=## #5 (\ r (` syscall-num r)) r])

  (function sys-mmap (l r) [=## #9 (\ r (` syscall-num r)) r])

  (function sys-munmap (l r) [=## #11 (\ r (` syscall-num r)) r])

  (function sys-exit (l r) [=## #60 (\ r (` syscall-num r)) r])

  (function sys-clock-gettime (l r) [=## #228 (\ r (` syscall-num r)) r])

(ignore Linux open access modes.)

  (function o-rdonly (l r) [=# #0 r])

  (function o-wronly (l r) [=# #1 r])

  (function o-rdwr (l r) [=# #2 r])

  (function o-creat (l r) [=# #64 r])

(ignore Linux open file modes.)

  (function s-irwxu (l r) [=# #448 r])

  (function s-irwxg (l r) [=# #56 r])

  (function s-irwxo (l r) [=# #7 r])

(ignore Valid memory protections for mappings.)

  (function prot-read (l r) [=# #1 r])

  (function prot-write (l r) [=# #2 r])

  (function prot-exec (l r) [=# #4 r])

  (function prot-none (l r) [=# #0 r])

(ignore Valid flags for mmap.)

  (function map-private (l r) [=# #2 r])

  (function map-anonymous (l r) [=# #32 r])
  
  (function map-32bit (l r) [=# #64 r])

(function page-size (l r) [=# #4096 r])

(function arg-max (l r) (`(page-size)r))

(function clock-process-cputime-id (l r) [=# #2 r])

(function stdin (l r) [=## #0 (\ r (` fd r)) r])

(function stdout (l r) [=## #1 (\ r (` fd r)) r])

(function byte (l r) [=# #1 r])

(function unit (l r) [=# #8 r])

(function alloc-alignment (l r) [=# #8 r])

(ignore Layout of the header of our endogenous linked list of mmaped regions.)

  (function region-element (l r) [=# #48 r])
  
  (ignore Contains reference to previous mmaped region. Is null-element otherwise.)
  
  (function reg-prev-elt (l r) [property #0 #8 (\ r (`(@ region region)r)) l r])

  (ignore Contains reference to next mmaped region. Is null-element otherwise.)

  (function reg-next-elt (l r) [property #8 #8 (\ r (`(@ region region)r)) l r])

  (ignore Contains reference to last mmaped region in region. Field required to reduce allocation time.)

  (function reg-last-elt (l r) [property #16 #8 (\ r (`(@ region region)r)) l r])

  (ignore Contains reference to next aligned free memory in region element.)

  (function reg-curr-pos (l r) [property #24 #8 (\ r (`(@ (,[var r]) region)r)) l r])

  (ignore Contains reference to the end of the region element.)

  (function reg-end-pos (l r) [property #32 #8 (\ r (`(@ (,[var r]) region)r)) l r])

  (ignore Contains magic debug value.)

  (function reg-magic-dbg (l r) [property #40 #8 (\ r (`(@ (,[var r]) region)r)) l r])

(ignore Defined in assembly file that will be linked with this file.)

(constrain syscall (\ r (with-vars (a b c d e f g) (`(function (syscall-num ,a ,b ,c ,d ,e ,f) ,g)r)r)))

(function exit (code) [syscall (sys-exit) code (ignore) (ignore) (ignore) (ignore) (ignore)])

(function memcpy (dest src n)
  (loop do-cpy (dest dest) (src src) (n n)
    (if n
      (do
        [setb dest [getb src]]
        {do-cpy [+ dest #1] [+ src #1] [- n #1]})
      (ignore))))

(function memset (s c n)
  (loop do-set (s s) (n n)
    (if n
      (do
        [setb s c]
        {do-set [+ s #1] [- n #1]})
      (ignore))))

(function isspace (c) (switch = c
  ((space)(ff)(lf)(cr)(ht)(vt) (true))
  (false)))

(ignore
  What follows is essentially wrappers for Linux syscalls. The only twist is that if the
  actual syscall returns an error code, then these functions will follow the error
  continuation instead of returning.)

(storage file-access-error (ignore))

(constrain open (\ r (with-vars (b) (`(function (string ,b) fd)r)r)))

(function open (path handler)
  (let (ret [syscall (sys-open) path (o-rdonly) (ignore) (ignore) (ignore) (ignore)])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ file-access-error path)}
      ret)))

(constrain create (\ r (with-vars (b) (`(function (string ,b) fd)r)r)))

(function create (path handler)
  (let (ret [syscall (sys-open) path [bor (o-wronly) (o-creat)] [bor (s-irwxu) [bor (s-irwxg) (s-irwxo)]]  (ignore) (ignore) (ignore)])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ file-access-error path)}
      ret)))

(constrain print (\ r (with-vars (a b c e) (`(function (fd ,a ,b ,c) ,e)r)r)))

(function print (fd d len handler)
  (let (ret [syscall (sys-write) fd d len (ignore) (ignore) (ignore)])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ file-access-error empty-string)}
      ret)))

(constrain print-str (\ r (with-vars (b e) (`(function (fd string ,b) ,e)r)r)))

(function print-str (fd str handler) [print fd str [strlen str] handler])

(constrain print-char (\ r (with-vars (a b e) (`(function (fd ,a ,b) ,e)r)r)))

(function print-char (fd ch handler) [print fd (storage _ ch) #1 handler])

(constrain print-uint (\ r (with-vars (a b e) (`(function (fd ,a ,b) ,e)r)r)))

(function print-uint (fd i handler)
  (let (j (storage _ #19))
  (let (str (storage _ (ignore) (ignore) (ignore))) (do
  (until (i i) [= i #0] [/ i #10] (do
    [setb [+ str $j] (switch = [rem i #10]
      (#9 (char 9))
      (#8 (char 8))
      (#7 (char 7))
      (#6 (char 6))
      (#5 (char 5))
      (#4 (char 4))
      (#3 (char 3))
      (#2 (char 2))
      (#1 (char 1))
      (char 0))]
    [set j [- $j #1]]))
  [print fd [+ str [+ $j #1]] [- #19 $j] handler]))))

(constrain hex->char (\ r (with-vars (a b) (`(function (,a) ,b)r)r)))

(function hex->char (h)
  (switch = h
    ((hex F) (char F))
    ((hex E) (char E))
    ((hex D) (char D))
    ((hex C) (char C))
    ((hex B) (char B))
    ((hex A) (char A))
    ((hex 9) (char 9))
    ((hex 8) (char 8))
    ((hex 7) (char 7))
    ((hex 6) (char 6))
    ((hex 5) (char 5))
    ((hex 4) (char 4))
    ((hex 3) (char 3))
    ((hex 2) (char 2))
    ((hex 1) (char 1))
    (char 0)))

(constrain print-hex (\ r (with-vars (a b e) (`(function (fd ,a ,b) ,e)r)r)))

(function print-hex (fd i handler)
  (let (j (storage _ #16))
  (let (str (storage _ (ignore) (ignore))) (do
  (until (i i) [= i #0] [/ i #16] (do
    [setb [+ str $j] [hex->char [rem i #16]]]
    [set j [- $j #1]]))
  [print fd [+ str [+ $j #1]] [- #16 $j] handler]))))

(constrain print-bytes
  (\ r (with-vars (a b h i) (`(function (fd ,a ,b ,h) ,i)r)r)))

(function print-bytes (fd bs sz handler)
  (until (i #0) [= i sz] [+ i #1] (do
    [print-char fd [hex->char [>> [getb[+ bs i]] #4]] handler]
    [print-char fd [hex->char [band [getb[+ bs i]] (hex 0F)]] handler])))

(constrain read (\ r (with-vars (a b c e) (`(function (fd ,a ,b ,c) ,e)r)r)))

(function read (fd buf cnt handler)
  (let (ret [syscall (sys-read) fd buf cnt (ignore) (ignore) (ignore)])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ file-access-error empty-string)}
      ret)))

(constrain close (\ r (with-vars (a c) (`(function (fd ,a) ,c)r)r)))

(function close (fd handler)
  (let (ret [syscall (sys-close) fd (ignore) (ignore) (ignore) (ignore) (ignore)])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ file-access-error empty-string)}
      ret)))

(constrain size (\ r (with-vars (a c) (`(function (fd ,a) ,c)r)r)))

(function size (fd handler)
  (let (statbuf (storage _ (ignore)(ignore)(ignore)(ignore)(ignore)(ignore)(ignore)(ignore)(ignore)
    (ignore)(ignore)(ignore)(ignore)(ignore)(ignore)(ignore)(ignore)(ignore)))
  (let (ret [syscall (sys-fstat) fd statbuf (ignore) (ignore) (ignore) (ignore)])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ file-access-error empty-string)}
      [get [+ statbuf #48]]))))

(storage memory-access-error (ignore))

(ignore Creates a new virtual address mapping of the size in bytes given at len.)

(function mmap (len handler)
  (let (ret [syscall (sys-mmap) #0 len [bor (prot-read) (prot-write)] [bor (map-private) [bor (map-anonymous) (map-32bit)]] [bnot #0] #0])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ memory-access-error)}
      ret)))

(ignore
  Deletes virtual address mappings coinciding with the range starting with the value at
  ptr and having an extent of the value given at len.)

(function munmap (ptr len handler)
  (let (ret [syscall (sys-munmap) ptr len (ignore) (ignore) (ignore) (ignore)])
    (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
      {handler (storage _ memory-access-error)}
      ret)))

(function pad-size (x nearest) (let (r [rem x nearest]) [+ x (if r [- nearest r] #0)]))

(constrain null-element (\ r (` region r)))

(storage null-element (ignore))

(ignore Creates a new region with a minimum capacity in bytes given by the value at
  min-capacity.)

(constrain create-region (\ r (with-vars (a b) (`(function (,a ,b) region)r)r)))

(function create-region (min-capacity handler)
  (let (len [pad-size [+ min-capacity (region-element)] (page-size)])
    (let (reg [mmap len handler]) (do
      (setf reg-next-elt reg null-element)
      (setf reg-prev-elt reg null-element)
      (setf reg-last-elt reg reg)
      (setf reg-curr-pos reg [+ reg (region-element)])
      (setf reg-end-pos reg [+ reg len])
      (setf reg-magic-dbg reg (hex DEADBEEFDEADBEEF))
      reg))))

(ignore
  Allocates memory in the region at reg of an amount in bytes equal to the integer at len.)

(constrain region-alloc (\ r (with-vars (a b d) (`(function (,a region ,b) ,d)r)r)))

(function region-alloc (len reg handler)
  (let (len [pad-size len (alloc-alignment)])
  (let (new-last-elt
    (let (curr-last-elt (@ reg-last-elt reg))
    (if [> [+(@ reg-curr-pos curr-last-elt)len] (@ reg-end-pos curr-last-elt)]
      (let (new-last-elt [create-region [+ len [* #2[-(@ reg-end-pos curr-last-elt) curr-last-elt]]] handler]) (do
        (setf reg-next-elt curr-last-elt new-last-elt)
        (setf reg-last-elt reg new-last-elt)
        (setf reg-prev-elt new-last-elt curr-last-elt)
        new-last-elt))
      curr-last-elt))) (do
  (setf reg-curr-pos new-last-elt [+(@ reg-curr-pos new-last-elt)len])
  [-(@ reg-curr-pos new-last-elt)len]))))

(ignore
  The following macro implements the following transformation:
  ((region-storage buf hdl) buf-storage arg1 arg2 ... argN)
  ->
  (let (buf-storage [region-alloc [* N(unit)] buf hdl]) (do
    [set [+ buf-storage [* #0(unit)]] arg1]
    [set [+ buf-storage [* #1(unit)]] arg2]
    ...
    [set [+ buf-storage [* #(N-1)(unit)]] argN]
    buf-storage)))

(function region-storage (region-storage:l region-storage:r)
  (`(function region-storage:temp (l r)
      (`(let ((,[@fst l]) [region-alloc [* (,[=# [- [meta:length l] #1] r]) (unit)]
            (,(,[`[llst [@fst region-storage:l] (` r region-storage:r) emt region-storage:r] region-storage:r]))
            (,(,[`[llst [@frst region-storage:l] (` r region-storage:r) emt region-storage:r] region-storage:r]))])
          (,[lst (` do r) [meta:reverse [lst [@fst l]
            (loop make-set (identifiers [@rst l]) (idx #0) (sets emt)
              (if [emt? identifiers]
                sets
                {make-set [@rst identifiers] [+ idx #1]
                  [lst (`[set [+ (,[@fst l]) [* (,[=# idx r]) (unit)]] (,[@fst identifiers])]r) sets r]})) r] r] r]))r))region-storage:r))

(ignore
  Frees the given reference and everything allocated afterwards in the given region.)

(constrain region-free (\ r (with-vars (a b d) (`(function (,a region ,b) ,d)r)r)))

(function region-free (ref reg handler)
  (loop do-free (last-elt (@ reg-last-elt reg))
    (if (cand [<= [+ last-elt (region-element)] ref] [<= ref (@ reg-end-pos last-elt)])
      (do
        (setf reg-curr-pos last-elt ref)
        (setf reg-last-elt reg last-elt))
      (let (prev-elt (@ reg-prev-elt last-elt)) (do
        [munmap last-elt [- (@ reg-end-pos last-elt) last-elt] handler]
        {do-free prev-elt})))))

(ignore
  A macro to ensure that allocated memory is freed. The following macro saves the supplied
  region's current position, evaluates the given expression, and then resets the region's
  position to the saved value. It is implemented by the following transformation:
  (with-region buf expr)
  ->
  (let (with-region:position [region-alloc #0 buf (ignore)])
    (let (with-region:val expr) (do
      [region-free with-region:position buf (ignore)]
      with-region:val))))

(function with-region (l r)
  (`(let (with-region:region (,[@car l]))
      (let (with-region:position [region-alloc #0 with-region:region (ignore)])
        (let (with-region:val (,[@cadr l])) (do
          [region-free with-region:position with-region:region (ignore)]
          with-region:val))))r))

(ignore
  Releases the memory associated with the region reg. After a call to this function, it is
  invalid to read or write data to the memory allocated on this region.)

(constrain destroy-region (\ r (with-vars (b) (`(function (region ,b) ())r)r)))

(function destroy-region (reg handler)
  (loop do-destroy (reg reg)
    (let (next-reg (@ reg-next-elt reg)) (do
      [munmap reg [- (@ reg-end-pos reg) reg] handler]
      (if [= next-reg null-element]
        (ignore)
        {do-destroy next-reg})))))

(ignore
  Returns a list containing the the command line arguments. The returned list and its
  dependencies will all reside in the region reg.)

(constrain argv (\ r (with-vars (a) (`(function (region ,a) (list string))r)r)))

(function argv (reg handler)
  (let (f [open (" /proc/self/cmdline) handler])
    (fallthrough
        (let (buf [region-alloc (arg-max) reg cleanup])
        (let (bytes-rem [read f buf (arg-max) cleanup])
        (storage _ no-error
          (loop get-arg (buf buf) (bytes-rem bytes-rem) (args nil)
            (if bytes-rem
              {get-arg [+ buf [+ [strlen buf] #1]] [- bytes-rem [+ [strlen buf] #1]] [cons buf args reg cleanup]}
              [reverse args reg cleanup])))))
      
      (cleanup err (do
        [close f handler]
        (if [= (@0 err) no-error] (@1 err) {handler err}))))))

(storage time-error (ignore))

(constrain clock-gettime (\ r (with-vars (a b) (`(function (,a) ,b)r)r)))

(function clock-gettime (handler)
  (let (t (storage _ (ignore)(ignore)))
    (let (ret [syscall (sys-clock-gettime) (clock-process-cputime-id) t (ignore) (ignore) (ignore) (ignore)])
      (if (cand [<= [- #0 #4095] ret] [<= ret [- #0 #1]])
        {handler (storage _ time-error)}
        [+ [* $t #1000000000] ($[+ t (unit)])]))))

(ignore
  Times the execution of the given expression in nanoseconds and adds it
  to the given accumulator. This expression evaluates to the values of its
  inner expression. Does the following transformation:
  
  (time acc expr handler)
  ->
  (let (time:handler handler)
    (let (time:start [clock-gettime time:handler])
      (let (time:val expr) (do
        [set+ acc [- [clock-gettime time:handler] time:start]]
        time:val)))))

(function time (l r)
  (`(let (time:handler (,[@frrst l]))
      (let (time:start [clock-gettime time:handler])
        (let (time:val (,[@frst l])) (do
          [set+ (,[@fst l]) [- [clock-gettime time:handler] time:start]]
          time:val))))r))
