(ignore ELF-64 Object File Format)

  (ignore Data representation: ELF64 Data Types)

    (constant elf64-addr #:8 \:r:[var r])

    (constant elf64-off #:8 \:r:[var r])

    (constant elf64-half #:2 \:r:[var r])

    (constant elf64-word #:4 \:r:[var r])

    (constant elf64-sword #:4 \:r:[var r])

    (constant elf64-xword #:8 \:r:[var r])

    (constant elf64-sxword #:8 \:r:[var r])

  (ignore File header: ELF-64 Header)

    (constant elf64-ehdr #:64 \:r:[var r])

    (property e-ident #:0 #:16 (\ r (`(! static~ e-ident elf64-ehdr)r)))

    (property e-type #:16 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-machine #:18 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-version #:20 #:4 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-entry #:24 #:8 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-phoff #:32 #:8 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-shoff #:40 #:8 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-flags #:48 #:4 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-ehsize #:52 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-phentsize #:54 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-phnum #:56 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-shentsize #:58 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-shnum #:60 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

    (property e-shstrndx #:62 #:2 (\ r (`(! static~ (,[var r]) elf64-ehdr)r)))

  (ignore File header: ELF Identification, e-ident)

    (property ei-mag0 #:0 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-mag1 #:1 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-mag2 #:2 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-mag3 #:3 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-class #:4 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-data #:5 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-version #:6 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-osabi #:7 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (property ei-abiversion #:8 #:1 (\ r (`(! static~ (,[var r]) !:Ref:e-ident)r)))

    (constant ei-pad #:9 \:r:[var r])

    (constant ei-nident #:16 \:r:[var r])

    (constant elfmag0 0x:7F \:r:[var r])

    (constant elfmag1 (char E) \:r:[var r])

    (constant elfmag2 (char L) \:r:[var r])

    (constant elfmag3 (char F) \:r:[var r])

  (ignore File header: Object File Classes, e-ident > ei-class)

    (constant elfclass32 #:1 \:r:[var r])

    (constant elfclass64 #:2 \:r:[var r])

  (ignore File header: Data Encodings, e-ident > ei-data)

    (constant elfdata2lsb #:1 \:r:[var r])

    (constant elfdata3msb #:2 \:r:[var r])

  (ignore File header: Operating System and ABI Identifiers, e-ident > ei-osabi)

    (constant elfosabi-sysv #:0 \:r:[var r])

    (constant elfosabi-hpux #:1 \:r:[var r])

    (constant elfosabi-standalone #:255 \:r:[var r])

  (ignore File header: Object File Types, e-type)

    (constant et-none #:0 \:r:[var r])

    (constant et-rel #:1 \:r:[var r])

    (constant et-exec #:2 \:r:[var r])

    (constant et-dyn #:3 \:r:[var r])

    (constant et-core #:4 \:r:[var r])

    (constant et-loos 0x:FE00 \:r:[var r])

    (constant et-hios 0x:FEFF \:r:[var r])

    (constant et-loproc 0x:FF00 \:r:[var r])

    (constant et-hiproc 0x:FFFF \:r:[var r])

  (ignore Sections: Section indicies)

    (constant shn-undef #:0 \:r:[var r])

    (constant shn-loproc 0x:FF00 \:r:[var r])

    (constant shn-hiproc 0x:FF1F \:r:[var r])

    (constant shn-loos 0x:FF20 \:r:[var r])

    (constant shn-hios 0x:FF3F \:r:[var r])

    (constant shn-abs 0x:FFF1 \:r:[var r])

    (constant shn-common 0x:FFF2 \:r:[var r])

  (ignore Sections: Section header entries)

    (constant elf64-shdr #:64 \:r:[var r])

    (property sh-name #:0 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-type #:4 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-flags #:8 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-addr #:16 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-offset #:24 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-size #:32 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-link #:40 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-info #:44 #:4 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-addralign #:48 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

    (property sh-entsize #:56 #:8 \:r:(`(! static~ ,:[var r] elf64-shdr)r))

  (ignore Sections: Section Types)

    (constant sht-null #:0 \:r:[var r])

    (constant sht-progbits #:1 \:r:[var r])

    (constant sht-symtab #:2 \:r:[var r])

    (constant sht-strtab #:3 \:r:[var r])

    (constant sht-rela #:4 \:r:[var r])

    (constant sht-hash #:5 \:r:[var r])

    (constant sht-dynamic #:6 \:r:[var r])

    (constant sht-note #:7 \:r:[var r])

    (constant sht-nobits #:8 \:r:[var r])

    (constant sht-rel #:9 \:r:[var r])

    (constant sht-shlib #:10 \:r:[var r])

    (constant sht-dynsym #:11 \:r:[var r])

    (constant sht-loos 0x:60000000 \:r:[var r])

    (constant sht-hios 0x:6FFFFFFF \:r:[var r])

    (constant sht-loproc 0x:70000000 \:r:[var r])

    (constant sht-hiproc 0x:7FFFFFFF \:r:[var r])

  (ignore Sections: Section Attributes, sh-flags)

    (constant shf-write 0x:1 \:r:[var r])

    (constant shf-alloc 0x:2 \:r:[var r])

    (constant shf-execinstr 0x:4 \:r:[var r])

    (constant shf-maskos 0x:0F000000 \:r:[var r])

    (constant shf-maskproc 0x:F0000000 \:r:[var r])

  (ignore Symbol Table: ELF-64 Symbol Table Entry)

    (constant elf64-sym #:24 \:r:[var r])

    (property st-name #:0 #:4 \:r:(`(! static~ ,:[var r] elf64-sym)r))

    (property st-info #:4 #:1 \:r:(`(! static~ ,:[var r] elf64-sym)r))

    (property st-other #:5 #:1 \:r:(`(! static~ ,:[var r] elf64-sym)r))

    (property st-shndx #:6 #:2 \:r:(`(! static~ ,:[var r] elf64-sym)r))

    (property st-value #:8 #:8 \:r:(`(! static~ ,:[var r] elf64-sym)r))

    (property st-size #:16 #:8 \:r:(`(! static~ ,:[var r] elf64-sym)r))

  (ignore Symbol Table: Symbol Bindings)

    (constant stb-local #:0 \:r:[var r])

    (constant stb-global #:1 \:r:[var r])

    (constant stb-weak #:2 \:r:[var r])

    (constant stb-loos #:10 \:r:[var r])

    (constant stb-hios #:12 \:r:[var r])

    (constant stb-loproc #:13 \:r:[var r])

    (constant stb-hiproc #:15 \:r:[var r])

    (function elf64-st-bind (l r) (`[>> (,[@fst l]) #:4]r))

    (function elf64-st-type (l r) (`[band (,[@fst l]) #:15]r))

    (function elf64-st-info (l r) (`[+ [<< (,[@fst l]) #:4] [band (,[@frst l]) #:15]]r))

  (ignore Symbol Table: Symbol Types)

    (constant stt-notype #:0 \:r:[var r])

    (constant stt-object #:1 \:r:[var r])

    (constant stt-func #:2 \:r:[var r])

    (constant stt-section #:3 \:r:[var r])

    (constant stt-file #:4 \:r:[var r])

    (constant stt-loos #:10 \:r:[var r])

    (constant stt-hios #:12 \:r:[var r])

    (constant stt-loproc #:13 \:r:[var r])

    (constant stt-hiproc #:15 \:r:[var r])

  (ignore Relocations: ELF-64 Relocation Entries)

    (constant elf64-rel #:16 \:r:[var r])

    (constant elf64-rela #:24 \:r:[var r])

    (property r-offset #:0 #:8 \:r:(`(! static~ ,:[var r] elf64-rela)r))

    (property r-info #:8 #:8 \:r:(`(! static~ ,:[var r] elf64-rela)r))

    (property r-addend #:16 #:8 \:r:(`(! static~ ,:[var r] elf64-rela)r))

    (function elf64-r-sym (l r) (`[>> (,[@fst l]) #:32]r))

    (function elf64-r-type (l r) (`[band (,[@fst l]) 0x:FFFFFFFF]r))

    (function elf64-r-info (l r) (`[+ [<< (,[@fst l]) #:32] [band (,[@frst l]) 0x:FFFFFFFF]]r))

  (ignore System V Application Binary Interface: AMD64 Architecture Processor Supplement)

  (ignore Machine Information: Processor Identification)

    (constant em-x86-64 #:62 \:r:[var r])

  (ignore Sections: Section Flags)

    (constant shf-x86-64-large 0x:10000000 \:r:[var r])

  (ignore Sections: Section Types)

    (constant sht-x86-64-unwind 0x:70000001 \:r:[var r])

  (ignore Relocation: Relocation Types)

    (constant r-x86-64-none #:0 \:r:[var r])

    (constant r-x86-64-64 #:1 \:r:[var r])

    (constant r-x86-64-pc32 #:2 \:r:[var r])

    (constant r-x86-64-got32 #:3 \:r:[var r])

    (constant r-x86-64-plt32 #:4 \:r:[var r])

    (constant r-x86-64-copy #:5 \:r:[var r])

    (constant r-x86-64-glob-dat #:6 \:r:[var r])

    (constant r-x86-64-jump-slot #:7 \:r:[var r])

    (constant r-x86-64-relative #:8 \:r:[var r])

    (constant r-x86-64-gotpcrel #:9 \:r:[var r])

    (constant r-x86-64-32 #:10 \:r:[var r])

    (constant r-x86-64-32s #:11 \:r:[var r])

    (constant r-x86-64-16 #:12 \:r:[var r])

    (constant r-x86-64-pc16 #:13 \:r:[var r])

    (constant r-x86-64-8 #:14 \:r:[var r])

    (constant r-x86-64-pc8 #:15 \:r:[var r])

    (constant r-x86-64-dtpmod64 #:16 \:r:[var r])

    (constant r-x86-64-dtpoff64 #:17 \:r:[var r])

    (constant r-x86-64-tposs64 #:18 \:r:[var r])

    (constant r-x86-64-tlsgd #:19 \:r:[var r])

    (constant r-x86-64-tlsld #:20 \:r:[var r])

    (constant r-x86-64-dtpoff32 #:21 \:r:[var r])

    (constant r-x86-64-gottpoff #:22 \:r:[var r])

    (constant r-x86-64-tpoff32 #:23 \:r:[var r])

    (constant r-x86-64-pc64 #:24 \:r:[var r])

    (constant r-x86-64-gotoff64 #:25 \:r:[var r])

    (constant r-x86-64-gotpc32 #:26 \:r:[var r])

    (constant r-x86-64-size32 #:32 \:r:[var r])

    (constant r-x86-64-size64 #:33 \:r:[var r])

    (constant r-x86-64-gotpc32-tlsdesc #:34 \:r:[var r])

    (constant r-x86-64-tlsdesc-call #:35 \:r:[var r])

    (constant r-x86-64-tlsdesc #:36 \:r:[var r])

    (constant r-x86-64-irelative #:37 \:r:[var r])

    (constant r-x86-64-relative64 #:38 \:r:[var r])

    (constant r-x86-64-gotpcrelx #:41 \:r:[var r])

    (constant r-x86-64-rex-gotpcrelx #:42 \:r:[var r])

(ignore
  ELF-64 Object File Format structures but with addresses instead of offsets and indicies.
  This serves to ease the construction and parsing of ELF-64 Object Files.)
  
  (ignore File header and body: ELF-64 Header and Body)

    (constant linked-elf64-e #:40 \:r:[var r])

    (property lkde-raw #:0 #:8 (\ r (`(! static~ elf64-ehdr linked-elf64-e)r)))

    (property lkde-ph #:8 #:8 (\ r (`(! static~ (list linked-elf64-ph) linked-elf64-e)r)))

    (property lkde-sh #:16 #:8 (\ r (`(! static~ (list linked-elf64-sh) linked-elf64-e)r)))

    (property lkde-shstr #:24 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-e)r)))
    
    (property lkde-undef #:32 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-e)r)))
  
  (ignore Sections: Section header entries)

    (constant linked-elf64-sh #:48 \:r:[var r])
    
    (property lkdsh-raw #:0 #:8 (\ r (`(! static~ elf64-shdr linked-elf64-sh)r)))
    
    (property lkdsh-name #:8 #:8 (\ r (`(! static~ linked-elf64-strtab linked-elf64-sh)r)))

    (property lkdsh-offset #:16 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sh)r)))
    
    (property lkdsh-symtab #:16 #:8 (\ r (`(! static~ (list linked-elf64-sym) linked-elf64-sh)r)))
    
    (property lkdsh-strtab #:16 #:8 (\ r (`(! static~ (list linked-elf64-strtab) linked-elf64-sh)r)))
    
    (property lkdsh-rela #:16 #:8 (\ r (`(! static~ (list linked-elf64-rela) linked-elf64-sh)r)))

    (property lkdsh-link #:24 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-sh)r)))

    (property lkdsh-rela-info #:32 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-sh)r)))
    
    (property lkdsh-ndx #:40 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sh)r)))
  
  (ignore Symbol Table: ELF-64 Symbol Table Entry)

    (constant linked-elf64-sym #:40 \:r:[var r])
    
    (property lkdst-raw #:0 #:8 (\ r (`(! static~ elf64-sym linked-elf64-sym)r)))

    (property lkdst-name #:8 #:8 (\ r (`(! static~ linked-elf64-strtab linked-elf64-sym)r)))

    (property lkdst-sh #:16 #:8 (\ r (`(! static~ linked-elf64-sh linked-elf64-sym)r)))
    
    (property lkdst-ndx #:24 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sym)r)))
    
    (property lkdst-other #:32 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-sym)r)))
  
  (ignore Relocations: ELF-64 Relocation Entries)

    (constant linked-elf64-rela #:16 \:r:[var r])

    (property lkdr-raw #:0 #:8 (\ r (`(! static~ elf64-rela linked-elf64-rela)r)))

    (property lkdr-info-sym #:8 #:8 (\ r (`(! static~ linked-elf64-sym linked-elf64-rela)r)))
  
  (ignore String Table: ELF-64 String Table Entry)
  
    (constant linked-elf64-strtab #:16 \:r:[var r])
    
    (property lkdstrt-raw #:0 #:8 (\ r (`(! static~ string linked-elf64-strtab)r)))
    
    (property lkdstrt-ndx #:8 #:8 (\ r (`(! static~ (,[var r]) linked-elf64-strtab)r)))

(constrain make-lkdstrt (\ r (?(a) (`(function (string region ,:a) linked-elf64-strtab)r)r)))

(function make-lkdstrt (str buf hdl)
  (substitute (.. buf hdl)
    (record (lkdstrt [region-alloc (linked-elf64-strtab) ..])
      (lkdstrt-raw str))))

(constrain make-lkdr (\ r (?(a) (`(function (linked-elf64-sym region ,:a) linked-elf64-rela)r)r)))

(function make-lkdr (info-sym buf hdl)
  (substitute (.. buf hdl)
    (record (lkdr [region-alloc (linked-elf64-rela) ..])
      (lkdr-raw [region-alloc (elf64-rela) ..])
      (lkdr-info-sym info-sym))))

(constrain make-lkdst (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,:a) linked-elf64-sym)r)r)))

(function make-lkdst (name sh buf hdl)
  (substitute (.. buf hdl)
    (record (lkdst [region-alloc (linked-elf64-sym) ..])
      (lkdst-raw [region-alloc (elf64-sym) ..])
      (lkdst-name name)
      (lkdst-sh sh))))

(constrain make-lkdsymtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-sym) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdsymtab (name link symtab buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-symtab)))
      (lkdsh-name name)
      (lkdsh-link link)
      (lkdsh-symtab symtab))))

(constrain make-lkdstrtab
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh (list linked-elf64-strtab) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdstrtab (name link strtab buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-strtab)))
      (lkdsh-name name)
      (lkdsh-strtab strtab)
      (lkdsh-link link))))

(constrain make-lkdrela
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh linked-elf64-sh (list linked-elf64-rela) region ,:a) linked-elf64-sh)r)r)))

(function make-lkdrela (name link info rela buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-raw (setf sh-type (@ lkdsh-raw lkdsh) (sht-rela)))
      (lkdsh-name name)
      (lkdsh-rela rela)
      (lkdsh-link link)
      (lkdsh-rela-info info))))

(constrain make-lkds
  (\ r (?(a) (`(function (linked-elf64-strtab linked-elf64-sh region ,:a) linked-elf64-sh)r)r)))

(function make-lkds (name link buf hdl)
  (substitute (.. buf hdl)
    (record (lkdsh [region-alloc (linked-elf64-sh) ..])
      (lkdsh-raw [region-alloc (elf64-shdr) ..])
      (lkdsh-name name)
      (lkdsh-link link))))

(constrain make-lkde
  (\ r (?(a) (`(function ((list linked-elf64-ph) (list linked-elf64-sh) linked-elf64-sh linked-elf64-sh region ,:a)
    linked-elf64-e)r)r)))

(function make-lkde (ph sh undef shstr buf hdl)
  (substitute (.. buf hdl)
    (record (lkde [region-alloc (linked-elf64-e) ..])
      (lkde-raw [region-alloc (elf64-ehdr) ..])
      (lkde-ph ph)
      (lkde-sh sh)
      (lkde-undef undef)
      (lkde-shstr shstr))))
