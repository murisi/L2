(-- The constants and fields to be used in x86-64-object.l2)

(constant object [* #:6(unit)] \:r:[var r])

(property obj-ehdr #:0 #:8 \:r:(`(! static~ ,:[var r] obj)r))

(property obj-shdrs #:8 #:8 \:r:(`(! static~ ,:[var r] obj)r))

(property obj-syms #:16 #:8 \:r:(`(! static~ ,:[var r] obj)r))

(property obj-relas #:24 #:8 \:r:(`(! static~ ,:[var r] obj)r))

(property obj-addends #:32 #:8 \:r:(`(! static~ ,:[var r] obj)r))

(property obj-segs #:40 #:8 \:r:(`(! static~ ,:[var r] obj)r))

(constant binding [* #:4(unit)] \:r:[var r])

(-- Does the relocations specified in the object file in light of the current binding
  addresses. The continuation handler is followed with the singleton (object-error) if
  relocation type is unrecognized.)

(constrain do-relocations (\ r (?(a) (`(function (obj ,:a) ())r)r)))

(function do-relocations (obj handler)
  (sub (L elf64)
    (for (sec-idx (%:range #:0 (@ L:e-shnum(@ obj-ehdr obj)))) (~)
      (let (shdr-buf (loc (L:elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (if (or [= (@ L:sh-type shdr-buf) (L:sht-rela)] [= (@ L:sh-type shdr-buf) (L:sht-rel)])
        (let (relanum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (relas-buf ($(loc (unit) sec-idx (@ obj-relas obj))))
        (let (addends-buf ($(loc (unit) sec-idx (@ obj-addends obj))))
        (for (rela-idx (%:range #:0 relanum)) (~)
          (let (syms-buf ($(loc (unit) (@ L:sh-link shdr-buf) (@ obj-syms obj))))
          (let (rela (loc (L:elf64-rela) rela-idx relas-buf))
          (let (addend ($(loc (L:elf64-sxword) rela-idx addends-buf)))
          (let (sym (loc (L:elf64-sym) (L:elf64-r-sym (@ L:r-info rela)) syms-buf))
            [do-relocation (@ L:r-offset rela) rela sym addend handler]))))))))
        (~))))))

(-- Stores the relocation addends somewhere out of the way because it may be the case that
  the contents of the addend field may be overwritten by a relocation, which is a problem
  because the future relocations may depend on the value of the addend.)

(constrain store-addends (\ r (?(a) (`(function (obj region ,:a) ())r)r)))

(function store-addends (obj reg handler)
  (sub (L elf64)
    (for (sec-idx (%:range #:0 (@ L:e-shnum(@ obj-ehdr obj)))) (~)
      (let (shdr-buf (loc (L:elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (if [= (@ L:sh-type shdr-buf) (L:sht-rela)]
        (let (relanum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (relas-buf $:(loc (unit) sec-idx (@ obj-relas obj)))
        (let (addends-buf (loc (unit) sec-idx (@ obj-addends obj))) (do
        [set addends-buf [region-alloc [* relanum (L:elf64-sxword)] reg handler]]
        (for (rela-idx (%:range #:0 relanum)) (~)
          (let (rela (loc (L:elf64-rela) rela-idx relas-buf))
            [set8b (loc (L:elf64-sxword) rela-idx $:addends-buf) (@ L:r-addend rela)]))))))
            
      (if [= (@ L:sh-type shdr-buf) (L:sht-rel)]
        (let (relanum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (relas-buf $:(loc (unit) sec-idx (@ obj-relas obj)))
        (let (addends-buf (loc (unit) sec-idx (@ obj-addends obj))) (do
        [set addends-buf [region-alloc [* relanum (L:elf64-sxword)] reg handler]]
        (for (rela-idx (%:range #:0 relanum)) (~)
          (let (rela (loc (L:elf64-rela) rela-idx relas-buf))
            (sub (.. [cast (loc (L:elf64-sxword) rela-idx $:addends-buf)] (@ L:r-offset rela))
              (switch = (L:elf64-r-type (@ L:r-info rela))
                ((L:r-x86-64-8) [set1b ..]) ((L:r-x86-64-pc8) [set1b ..]) ((L:r-x86-64-16) [set2b ..])
                ((L:r-x86-64-pc16) [set2b ..]) ((L:r-x86-64-pc32) [set4b ..]) ((L:r-x86-64-32) [set4b ..])
                ((L:r-x86-64-32s) [set4b ..]) ((L:r-x86-64-size32) [set4b ..]) ((L:r-x86-64-64) [set8b ..])
                ((L:r-x86-64-size64) [set8b ..]) ((L:r-x86-64-glob-dat) [set8b ..]) ((L:r-x86-64-jump-slot) [set8b ..])
                {handler (storage _ object-error)}))))))))
      
      (~)))))))

(-- The offsets specified in the object file need to be turned into addresses for the code
  to execute correctly.)

(constrain offsets-to-addresses (\ r (`(function (obj) ())r)))

(function offsets-to-addresses (obj)
  (sub (L elf64)
    (for (sec-idx (%:range #:0 (@ L:e-shnum(@ obj-ehdr obj)))) (~)
      (let (shdr-buf (loc (L:elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (if (or [= (@ L:sh-type shdr-buf) (L:sht-rela)] [= (@ L:sh-type shdr-buf) (L:sht-rel)])
        (let (relanum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (relas-buf ($(loc (unit) sec-idx (@ obj-relas obj))))
        (for (rela-idx (%:range #:0 relanum)) (~)
          (let (rela (loc (L:elf64-rela) rela-idx relas-buf))
          (let (target-seg-addr ($(loc (unit) (@ L:sh-info shdr-buf) (@ obj-segs obj)))) (do
          (setf L:r-offset rela [+ target-seg-addr (@ L:r-offset rela)])
          (~)))))))
          
      (if [= (@ L:sh-type shdr-buf) (L:sht-symtab)]
        (let (symnum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (syms-buf ($(loc (unit) sec-idx (@ obj-syms obj))))
        (for (sym-idx (%:range #:0 symnum)) (~)
          (let (sym (loc (L:elf64-sym) sym-idx syms-buf)) (do
          (setf L:st-value sym (switch = (@ L:st-shndx sym)
            ((L:shn-abs) (@ L:st-value sym))
            ((L:shn-common) #:0)
            ((L:shn-undef) #:0)
            (let (base-seg-addr ($(loc (unit) (@ L:st-shndx sym) (@ obj-segs obj))))
              [+ base-seg-addr (@ L:st-value sym)])))
          (~))))))
              
      (~)))))))

(-- Reformats the raw object code into a format more amenable for extraction of information
  and updating. Constructs an object containing everything of interest in the object code
  in the region reg and returns it.)

(constrain read-object (\ r (?(c d e) (`(function (,:c ,:d region ,:e) obj)r)r)))

(function read-object (objsrc objsrc-sz reg handler)
  (sub (L elf64)
    (let (obj [region-alloc (object) reg handler]) (do
    (if [< objsrc-sz (L:elf64-ehdr)] {handler (storage _ object-error)} (~))
    (setf obj-ehdr obj [region-alloc (L:elf64-ehdr) reg handler])
    [memcpy (@ obj-ehdr obj) objsrc (L:elf64-ehdr)]
    (setf obj-shdrs obj [region-alloc [* (@ L:e-shnum(@ obj-ehdr obj)) (L:elf64-shdr)] reg handler])
    (setf obj-syms obj [region-alloc [* (@ L:e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
    (setf obj-relas obj [region-alloc [* (@ L:e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
    (setf obj-addends obj [region-alloc [* (@ L:e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
    (setf obj-segs obj [region-alloc [* (@ L:e-shnum(@ obj-ehdr obj)) (unit)] reg handler])
    
    (for (sec-idx (%:range #:0 (@ L:e-shnum(@ obj-ehdr obj)))) (~)
      (let (shdr-buf (loc (L:elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (let (seg-buf (loc (unit) sec-idx (@ obj-segs obj))) (do
      [memcpy shdr-buf [+ objsrc (loc (@ L:e-shentsize(@ obj-ehdr obj)) sec-idx (@ L:e-shoff(@ obj-ehdr obj)))] (L:elf64-shdr)]
      [set seg-buf [region-alloc (@ L:sh-size shdr-buf) reg handler]]
      
      (if [= (@ L:sh-type shdr-buf) (L:sht-nobits)] (~)
        [memcpy $:seg-buf [+ objsrc (@ L:sh-offset shdr-buf)] (@ L:sh-size shdr-buf)])
        
      (if [= (@ L:sh-type shdr-buf) (L:sht-symtab)]
        (let (symnum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (syms-buf (loc (unit) sec-idx (@ obj-syms obj))) (do
        (-- Following code copies recognized information from the symbol table into (@ obj-syms obj))
        [set syms-buf [region-alloc [* symnum (L:elf64-sym)] reg handler]]
        (for (sym-idx (%:range #:0 symnum)) (~)
          [memcpy (loc (L:elf64-sym) sym-idx $:syms-buf) (loc (@ L:sh-entsize shdr-buf) sym-idx $:seg-buf)
            (L:elf64-sym)]))))
            
      (if (or [= (@ L:sh-type shdr-buf) (L:sht-rela)] [= (@ L:sh-type shdr-buf) (L:sht-rel)])
        (let (relanum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (relas-buf (loc (unit) sec-idx (@ obj-relas obj))) (do
        (-- Following code copies recognized information from the relocations into (@ obj-relas obj))
        [set relas-buf [region-alloc [* relanum (L:elf64-rela)] reg handler]]
        (for (rela-idx (%:range #:0 relanum)) (~)
          [memcpy (loc (L:elf64-rela) rela-idx $:relas-buf) (loc (@ L:sh-entsize shdr-buf) rela-idx $:seg-buf)
            (if [= (@ L:sh-type shdr-buf) (L:sht-rela)] (L:elf64-rela) (L:elf64-rel))]))))
            
      (~)))))))
    
    obj))))

(storage object-error (~))

(-- Constructs a handle to the specified object code. objsrc is a reference to the buffer
  containing the object code. objsrc-sz is the size of the buffer. reg is the region in
  which our handle will be constructed. Return value is a handle to the object.)

(constrain load (\ r (?(c d e) (`(function (,:c ,:d region ,:e) obj)r)r)))

(function load (objsrc objsrc-sz reg handler)
  (let (obj [read-object objsrc objsrc-sz reg handler]) (do
    [offsets-to-addresses obj]
    [store-addends obj reg handler]
    [do-relocations obj handler]
    obj)))

(constrain name-of (\ r (`(function (obj elf64-shdr elf64-sym) string)r)))

(function name-of (obj shdr sym)
  (sub (L elf64)
    (let (seg-buf ($(loc (unit) (@ L:sh-link shdr) (@ obj-segs obj))))
      [+ seg-buf (@ L:st-name sym)])))

(-- Makes a binding with the given name and address. name is a string containg the name of
  the binding. address is the address of the binding. reg is the region in which the
  binding should be constructed. Return value is the constructed binding.)

(constrain make-binding (\ r (?(a b) (`(function (string ,:a region ,:b) bndg-aug)r)r)))

(function make-binding (name address reg handler)
  (let (sym [region-alloc (binding) reg handler]) (do
    (setf bndg-name sym name)
    (setf bndg-offset sym address)
    (setf bndg-dependencies sym nil)
    sym)))

(-- Updates the bindings in the given object. obj is the object whose bindings need
  updating. updates is a list of bindings representing the updates that need to be applied
  to obj.)

(constrain mutate-bindings (\ r (`(function (obj (hash-table string bndg-aug)) ())r)))

(function mutate-bindings (obj updates)
  (sub (L elf64) (do
    (for (sec-idx (%:range #:0 (@ L:e-shnum(@ obj-ehdr obj)))) (~)
      (let (shdr-buf (loc (L:elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (if [= (@ L:sh-type shdr-buf) (L:sht-symtab)]
        (let (symnum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (syms-buf ($(loc (unit) sec-idx (@ obj-syms obj))))
        (for (sym-idx (%:range #:1 symnum)) (~)
          (let (sym (loc (L:elf64-sym) sym-idx syms-buf))
          (bind-if (and [ht-contains [name-of obj shdr-buf sym] updates bndg]
              (or [= (@ L:st-shndx sym) (L:shn-undef)] [= (@ L:st-shndx sym) (L:shn-common)])
              (or [= (L:elf64-st-bind (@ L:st-info sym)) (L:stb-global)]
                [= (L:elf64-st-bind (@ L:st-info sym)) (L:stb-weak)]))
            (bndg) (setf L:st-value sym (@ bndg-offset $:bndg)) (~)))))) (~))))
    (-- If obj was created using load, the following invocation cannot produce an error; hence the unspecified handler arguments.)
    [do-relocations obj (~)])))

(-- Returns the bindings in the given object.)

(constrain bindings (\ r (?(a b) (`(function (,:a obj (hash-table string bndg-aug) region ,:b) (hash-table string bndg-aug))r)r)))

(function bindings (flag obj ht reg handler)
  (sub (L elf64) (do
    (for (sec-idx (%:range #:0 (@ L:e-shnum(@ obj-ehdr obj)))) (~)
      (let (shdr-buf (loc (L:elf64-shdr) sec-idx (@ obj-shdrs obj)))
      (if [= (@ L:sh-type shdr-buf) (L:sht-symtab)]
        (let (symnum [/ (@ L:sh-size shdr-buf) (@ L:sh-entsize shdr-buf)])
        (let (syms-buf ($(loc (unit) sec-idx (@ obj-syms obj))))
        (for (sym-idx (%:range #:1 symnum)) (~)
          (let (sym (loc (L:elf64-sym) sym-idx syms-buf))
          (if (and [= (not(not(or [= (@ L:st-shndx sym) (L:shn-undef)] [= (@ L:st-shndx sym) (L:shn-common)]))) flag]
              (or [= (L:elf64-st-bind (@ L:st-info sym)) (L:stb-global)]
                [= (L:elf64-st-bind (@ L:st-info sym)) (L:stb-weak)]))
            [ht-put [name-of obj shdr-buf sym] [make-binding [name-of obj shdr-buf sym] (@ L:st-value sym) reg handler] ht
              reg handler] (~)))))) (~))))
    ht)))

(-- Returns a list of the mutable bindings in the given object. obj is the object whose
  mutable bindings are being queried. reg is the region in which the list of mutable
  bindings will be constructed. Return value is the list of mutable bindings.)

(constrain mutable-bindings
  (\ r (?(b) (`(function (obj (hash-table string bndg-aug) region ,:b) (hash-table string bndg-aug))r)r)))

(function mutable-bindings (obj ht reg handler) [bindings #:1 obj ht reg handler])

(-- Analogous to above.)

(constrain immutable-bindings
  (\ r (?(b) (`(function (obj (hash-table string bndg-aug) region ,:b) (hash-table string bndg-aug))r)r)))

(function immutable-bindings (obj ht reg handler) [bindings #:0 obj ht reg handler])

(-- Returns the address of the segment of the given object that has a particular name. obj
  is the object whose segment addresses is being queried. name is the name of the segment
  that is to be found.)

(constrain segment (\ r (?(a) (`(function (obj string) ,:a)r)r)))

(function segment (obj name)
  (sub (L elf64) (with return
    (if [= (@ L:e-shstrndx(@ obj-ehdr obj)) (L:shn-undef)] (~)
      (let (shstrseg-buf ($(loc (unit) (@ L:e-shstrndx(@ obj-ehdr obj)) (@ obj-segs obj))))
      (for (sec-idx (%:range #:0 (@ L:e-shnum(@ obj-ehdr obj)))) (~)
        (let (shdr-buf (loc (L:elf64-shdr) sec-idx (@ obj-shdrs obj)))
        (if [strcmp (loc #:1 (@ L:sh-name shdr-buf) shstrseg-buf) name] (~)
          {return ($(loc (unit) sec-idx (@ obj-segs obj)))}))))))))

