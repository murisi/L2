(ignore
  Does an in-place filter over a list. Does the following transformation:
  (filter (x l) expr)
  ->
  (let (filter.l l)
    (loop filter.loop (filter.m filter.l)
      (if [nil? $:filter.m]
        filter.l
        (if (let (x [@car $:filter.m]) expr)
          {filter.loop (& cdr $:filter.m)}
          (do
            [set filter.m [@cdr $:filter.m]]
            {filter.loop filter.m}))))))

(function filter (l r)
  (`(let (filter.l (,[@frfst l]))
      (loop filter.loop (filter.m filter.l)
        (if [nil? $:filter.m]
          filter.l
          (if (let ((,[@ffst l]) [@car $:filter.m]) (,[@frst l]))
            {filter.loop (& cdr $:filter.m)}
            (do
              [set filter.m [@cdr $:filter.m]]
              {filter.loop filter.m})))))r))

(ignore
  Like a C-array initializer, but for lists. Does the following transformation:
  (list (..) expr1 expr2 ... exprN)
  ->
  [cons expr1 [cons expr2 [... [cons exprN nil ..] ...] ..] ..])

(function list (l r)
  (loop add-item (out (` nil r)) (in [meta.reverse [@rst l] r])
    (if [emt? in]
      out
      {add-item [llllst (` invoke r) (` cons r) [@fst in] out [@fst l] r] [@rst in]})))

(ignore
  A macro to do a find. Does the following transformation:
  (find (x l) expr)
  ->
  (loop find.loop (find.l l)
    (if [nil? find.l]
      nil
      (if (let (x [@car find.l]) expr)
        find.l
        {find.loop [@cdr find.l]}))))

(function find (l r)
  (`(loop find.loop (find.l (,[@frfst l]))
      (if [nil? find.l]
        nil
        (if (let ((,[@ffst l]) [@car find.l]) (,[@frst l]))
          find.l
          {find.loop [@cdr find.l]})))r))

(ignore
  A macro to do a locate. Does the following transformation:
  (locate (x l-ref) expr)
  ->
  (loop locate.loop (locate.l-ref l-ref)
    (if [nil? $:locate.l-ref]
      locate.l-ref
      (if (let (x [@car $:locate.l-ref]) expr)
        locate.l-ref
        {locate.loop (& cdr $:locate.l-ref)}))))

(function locate (l r)
  (`(loop locate.loop (locate.l-ref (,[@frfst l]))
      (if [nil? $:locate.l-ref]
        locate.l-ref
        (if (let ((,[@ffst l]) [@car $:locate.l-ref]) (,[@frst l]))
          locate.l-ref
          {locate.loop (& cdr $:locate.l-ref)})))r))

(ignore
  The following macro matches a list by using the matchers given for its constituents.
  ((list? matcher1 matcher2 matcher3 ... matcherN) obj consequent alternate)
  ->
  (let (list?.temp obj)
    (if [nil? list?.temp]
      alternate
      (matcher1 [@car list?.temp]
        (let (list?.temp [@cdr list?.temp])
          (if [nil? list?.temp]
            alternate
            (matcher2 [@car list?.temp]
              (let (list?.temp [@cdr list?.temp])
                (if [nil? list?.temp]
                  alternate
                  (matcher3 [@car list?.temp]
                    (let (list?.temp [@cdr list?.temp])
                      ...)
                    alternate)))
              alternate)))
        alternate))))

(function list? (l r)
  (`(function list?.func (l r)
      (let (obj [@fst l]) (alternate [@frrst l]) (consequent [@frst l]) (obj-sym [meta.concat `:list?.temp:r [gentok r] r])
        (`(let (,:obj-sym ,:obj)
            (,(loop build (expr (`(if [nil? ,:obj-sym] ,:consequent ,:alternate)r)) (parts ,:[`[llst [meta.reverse l r] `:r:r emt r]r])
                (if [emt? parts]
                  expr
                  {build
                    (`(if [nil? ,:obj-sym]
                        ,:alternate
                        ((,[@fst parts]) [@car ,:obj-sym]
                          (let (,:obj-sym [@cdr ,:obj-sym]) ,:expr)
                          ,:alternate))r) [@rst parts]}))))r)))r))

(ignore
  The following macro matches a list by using the matchers given for its constituents.
  ((list-prefix? matcher1 matcher2 matcher3 ... matcherN) obj consequent alternate)
  ->
  (let (list-prefix?.temp obj)
    (if [nil? list-prefix?.temp]
      alternate
      (matcher1 [@car list-prefix?.temp]
        (let (list-prefix?.temp [@cdr list-prefix?.temp])
          (if [nil? list-prefix?.temp]
            alternate
            (matcher2 [@car list-prefix?.temp]
              (let (list-prefix?.temp [@cdr list-prefix?.temp])
                (if [nil? list-prefix?.temp]
                  alternate
                  (matcher3 [@car list-prefix?.temp]
                    (let (list-prefix?.temp [@cdr list-prefix?.temp])
                      ...)
                    alternate)))
              alternate)))
        alternate))))

(function list-prefix? (l r)
  (`(function list-prefix? (l r)
      (let (obj [@fst l]) (consequent [@frst l]) (alternate [@frrst l])
        (`(let (list-prefix?.temp ,:obj)
            (,(loop build (expr consequent) (parts ,:[`[llst [meta.reverse l r] `:r:r emt r]r])
                (if [emt? parts]
                  expr
                  {build
                    (`(if [nil? list-prefix?.temp]
                        ,:alternate
                        ((,[@fst parts]) [@car list-prefix?.temp]
                          (let (list-prefix?.temp [@cdr list-prefix?.temp]) ,:expr)
                          ,:alternate))r) [@rst parts]}))))r)))r))

(ignore
  The following macro does the same thing as cons except that it uses the stack instead of
  the heap. It does the following transformation:
  (storage-cons data rest)
  ->
  (with storage-cons.ret
    {(constrain
      (continuation storage-cons.cont (storage-cons.data storage-cons.rest)
        {storage-cons.ret (storage storage-cons.stor storage-cons.data storage-cons.rest)})
      (\ r (?(et) (`(continuation (,:et (list ,:et)))r)r))) data rest}))

(function storage-cons (l r)
  (`(with storage-cons.ret
    {(constrain
      (continuation storage-cons.cont (storage-cons.data storage-cons.rest)
        {storage-cons.ret (storage storage-cons.stor storage-cons.data storage-cons.rest)})
      (\ r (?(et) (`(continuation (,:et (list ,:et)))r)r))) (,[@fst l]) (,[@frst l])})r))

(constant list-struct #:16 \:r:[var r])

(property car #:0 #:8 (\ r (?(a) (`(! static~ ,:a (list ,:a))r)r)))

(property cdr #:8 #:8 (\ r (?(a) (`(! static~ (list ,:a) (list ,:a))r)r)))

(ignore
  Convenience functions for accessing elements of program internal lists. Note that the
  @fst and @rst functions are list accessor functions only for the fragments supplied to
  macros.)

(function @car (l) (@ car l))

(function @cdr (l) (@ cdr l))

(function @cddr (l) [@cdr [@cdr l]])

(function @cdddr (l) [@cdr [@cddr l]])

(function @cddddr (l) [@cdr [@cdddr l]])

(function @cdddddr (l) [@cdr [@cddddr l]])

(function @cddddddr (l) [@cdr [@cdddddr l]])

(function @cadr (l) [@car [@cdr l]])

(function @caddr (l) [@car [@cddr l]])

(function @cadddr (l) [@car [@cdddr l]])

(function @caddddr (l) [@car [@cddddr l]])

(function @cadddddr (l) [@car [@cdddddr l]])

(ignore Initialize the given buffer so that it satisfies the nil predicate.)

(constrain init-nil (\ r (?(a) (`(function ((list ,:a)) (list ,:a))r)r)))

(function init-nil (buf) (do
  (setf car buf [cast init-nil])
  (setf cdr buf buf)
  buf))

(constrain nil? (\ r (?(a b) (`(function ((list ,:a)) ,:b)r)r)))

(function nil? (l) (and [= (@ cdr l) l] [= (@ car l) [cast init-nil]]))

(ignore Declare and initialize a global nil value using init-nil.)

(constrain nil (\ r (?(et) (`(list ,:et)r)r)))

(storage nil (ignore) (ignore))

[init-nil nil]

(ignore
  Appends an item to the given list. data is the data that is to be appended. l is a
  reference to the list that is to be appended to. r is the region into which the extension
  is being placed.)

(constrain append (\ r (?(et b) (`(function (,:et (ref (list ,:et)) region ,:b) (ref (list ,:et)))r)r)))

(function append (data l r handler)
  (loop next (l l)
    (if (not [nil? $:l])
      {next (& cdr $:l)}
      (let (end $:l) (do
        [set l [region-alloc (list-struct) r handler]]
        (setf car $:l data)
        (setf cdr $:l end)
        (& cdr $:l))))))

(ignore
  Makes a new list with the given head and tail. data is what is going to be put at the
  head. rest is the list that will be the tail of the new list. r is the region into which
  the extension is being placed. Return value is the new list.)

(constrain cons (\ r (?(et a) (`(function (,:et (list ,:et) region ,:a) (list ,:et))r)r)))

(function cons (data rest r handler)
  (let (l [region-alloc (list-struct) r handler]) (do
    (setf car l data)
    (setf cdr l rest)
    l)))

(constrain ccons (\ r (?(et a) (`(function (,:et ,:et (list ,:et) region ,:a) (list ,:et))r)r)))

(function ccons (data1 data2 rest r handler)
  (substitute (.. r handler)
    [cons data1 [cons data2 rest ..] ..]))

(ignore
  Appends the second list onto the first list. fst-ref is a reference to the list that
  will be appended to. snd is the list that will be appended.)

(constrain append-list (\ r (?(et) (`(function ((ref (list ,:et)) (list ,:et)) ())r)r)))

(function append-list (fst-ref snd)
  (loop next (fst-ref fst-ref)
    (if [nil? $:fst-ref]
      [set fst-ref snd]
      {next (& cdr $:fst-ref)})))

(ignore Analogous to append above.)

(constrain prepend (\ r (?(et a) (`(function (,:et (ref (list ,:et)) region ,:a) (ref (list ,:et)))r)r)))

(function prepend (data l-ref r handler)
  (let (ret [region-alloc (list-struct) r handler]) (do
    (setf car ret data)
    (setf cdr ret $:l-ref)
    [set l-ref ret]
    l-ref)))

(ignore Computes the length of the given list. l is the list whose length will be computed.)

(constrain length (\ r (?(et nt) (`(function ((list ,:et)) ,:nt)r)r)))

(function length (l)
  (loop next (l l) (size #:0)
    (if [nil? l]
      size
      {next [@cdr l] [+ #:1 size]})))

(ignore Flattens the given list of lists and reverses them.)

(constrain reverse-flatten (\ r (?(a b) (`(function ((list (list ,:a)) region ,:b) (list ,:a))r)r)))

(function reverse-flatten (l r handler)
  (substitute (.. r handler)
    (fold (all nil) (s (%:list-iter l))
      (fold (t all) (u (%:list-iter s)) [cons u t ..] ..) ..)))

(ignore
  Constructs a reverse of the given list. l is the list that is to be reversed. r is the
  region into which the reversed list should be placed. Return value is the reversed list.)

(constrain reverse (\ r (?(et a) (`(function ((list ,:et) region ,:a) (list ,:et))r)r)))

(function reverse (l r handler)
  (substitute (.. r handler)
    [collect-reverse-list (%:list-iter l) [nil-of l] ..]))

(ignore
  Searches for the given element in the given list and returns (true) if it is found.
  Otherwise returns (false).)

(constrain contains (\ r (?(et a) (`(function (,:et (list ,:et)) ,:a)r)r)))

(function contains (data l)
  (loop search (sub l)
    (if [nil? sub]
      (false)
    (if [= [@car sub] data]
      (true)
      {search [@cdr sub]}))))

(ignore Because there can be several instances of nil, it makes sense to get a list's nil.)

(constrain nil-of (\ r (?(et) (`(function ((list ,:et)) (list ,:et))r)r)))

(function nil-of (l)
  (loop find (l l)
    (if [nil? l] l {find [@cdr l]})))

(ignore Prints the given list using the given function to print each element.)

(constrain print-list (\ r (?(et a) (`(function ((function (,:et ,:a) ()) (list ,:et) ,:a) ())r)r)))

(function print-list (printer l handler) (do
  [print-char (stdout) (lparen) handler]
  (if [nil? l] (ignore) (do
    [printer [@car l] handler]
    (for (u (%:list-iter [@cdr l])) (ignore) (do
      [print-char (stdout) (lf) handler]
      [printer u handler]))))
  [print-char (stdout) (rparen) handler]))

(ignore Creates an iterator that iterates through elements of the given list.)

(constrain list-iter \:r:(?(a b c) (`(function ((continuation ((! iterator ,:a ,:b))) (list ,:a)) ,:c)r)r))

(function list-iter (ret l)
  {ret (continuation cont (end ctx recv)
    (loop lop (recv recv) (ctx ctx) (list l)
      (if [nil? list]
        {end ctx}
        (cps {recv next ctx [@car list]}
          (next (new-recv new-ctx) {lop [cast new-recv] new-ctx [@cdr list]})))))})

(ignore Creates an iterator that iterates through sublists of the given list.)

(constrain sublist-iter \:r:(?(a b c) (`(function ((continuation ((! iterator (list ,:a) ,:b))) (list ,:a)) ,:c)r)r))

(function sublist-iter (ret l)
  {ret (continuation cont (end ctx recv)
    (loop lop (recv recv) (ctx ctx) (list l)
      (if [nil? list]
        {end ctx}
        (cps {recv next ctx list}
          (next (new-recv new-ctx) {lop [cast new-recv] new-ctx [@cdr list]})))))})

(ignore Creates an iterator that iterates through references to elements of the given list.)

(constrain list-ref-iter \:r:(?(a b c) (`(function ((continuation ((! iterator (ref ,:a) ,:b))) (list ,:a)) ,:c)r)r))

(function list-ref-iter (ret l)
  {ret (continuation cont (end ctx recv)
    (loop lop (recv recv) (ctx ctx) (list l)
      (if [nil? list]
        {end ctx}
        (cps {recv next ctx (& car list)}
          (next (new-recv new-ctx) {lop [cast new-recv] new-ctx [@cdr list]})))))})

(ignore Collect the values yielded by the iterator into a list of the same order.)

(constrain collect-list \:r:(?(a b c d) (`(function ((! iterator ,:a ,:b) (list ,:d) region ,:c) (list ,:a))r)r))

(function collect-list (ite lnil r handler)
  (substitute (.. r handler)
    (let (start (storage _ lnil)) (do
      (fold (end start) (x ite) [append x end ..])
      $:start))))

(ignore Collect the values yielded by the iterator into a list of the reverse order.)

(constrain collect-reverse-list \:r:(?(a b c d) (`(function ((! iterator ,:a ,:b) (list ,:d) region ,:c) (list ,:a))r)r))

(function collect-reverse-list (ite lnil r handler)
  (substitute (.. r handler)
    (fold (l lnil) (x ite) [cons x l ..])))
